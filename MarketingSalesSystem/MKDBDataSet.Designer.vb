'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("MKDBDataSet"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class MKDBDataSet
    Inherits Global.System.Data.DataSet
    
    Private tabletrans_CatchActivities As trans_CatchActivitiesDataTable
    
    Private tabletrans_CatchActivityDetails As trans_CatchActivityDetailsDataTable
    
    Private tabletrans_CatchMethod As trans_CatchMethodDataTable
    
    Private tabletrans_SalesReport As trans_SalesReportDataTable
    
    Private tabletrans_SalesReportCatcher As trans_SalesReportCatcherDataTable
    
    Private tabletrans_SalesReportPrice As trans_SalesReportPriceDataTable
    
    Private tabletrans_SalesReportSummary As trans_SalesReportSummaryDataTable
    
    Private tabletrans_SalesReportWeightSlips As trans_SalesReportWeightSlipsDataTable
    
    Private tabletrans_WeightSlip As trans_WeightSlipDataTable
    
    Private tabletrans_WeightSlipDetails As trans_WeightSlipDetailsDataTable
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("trans_CatchActivities")) Is Nothing) Then
                MyBase.Tables.Add(New trans_CatchActivitiesDataTable(ds.Tables("trans_CatchActivities")))
            End If
            If (Not (ds.Tables("trans_CatchActivityDetails")) Is Nothing) Then
                MyBase.Tables.Add(New trans_CatchActivityDetailsDataTable(ds.Tables("trans_CatchActivityDetails")))
            End If
            If (Not (ds.Tables("trans_CatchMethod")) Is Nothing) Then
                MyBase.Tables.Add(New trans_CatchMethodDataTable(ds.Tables("trans_CatchMethod")))
            End If
            If (Not (ds.Tables("trans_SalesReport")) Is Nothing) Then
                MyBase.Tables.Add(New trans_SalesReportDataTable(ds.Tables("trans_SalesReport")))
            End If
            If (Not (ds.Tables("trans_SalesReportCatcher")) Is Nothing) Then
                MyBase.Tables.Add(New trans_SalesReportCatcherDataTable(ds.Tables("trans_SalesReportCatcher")))
            End If
            If (Not (ds.Tables("trans_SalesReportPrice")) Is Nothing) Then
                MyBase.Tables.Add(New trans_SalesReportPriceDataTable(ds.Tables("trans_SalesReportPrice")))
            End If
            If (Not (ds.Tables("trans_SalesReportSummary")) Is Nothing) Then
                MyBase.Tables.Add(New trans_SalesReportSummaryDataTable(ds.Tables("trans_SalesReportSummary")))
            End If
            If (Not (ds.Tables("trans_SalesReportWeightSlips")) Is Nothing) Then
                MyBase.Tables.Add(New trans_SalesReportWeightSlipsDataTable(ds.Tables("trans_SalesReportWeightSlips")))
            End If
            If (Not (ds.Tables("trans_WeightSlip")) Is Nothing) Then
                MyBase.Tables.Add(New trans_WeightSlipDataTable(ds.Tables("trans_WeightSlip")))
            End If
            If (Not (ds.Tables("trans_WeightSlipDetails")) Is Nothing) Then
                MyBase.Tables.Add(New trans_WeightSlipDetailsDataTable(ds.Tables("trans_WeightSlipDetails")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property trans_CatchActivities() As trans_CatchActivitiesDataTable
        Get
            Return Me.tabletrans_CatchActivities
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property trans_CatchActivityDetails() As trans_CatchActivityDetailsDataTable
        Get
            Return Me.tabletrans_CatchActivityDetails
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property trans_CatchMethod() As trans_CatchMethodDataTable
        Get
            Return Me.tabletrans_CatchMethod
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property trans_SalesReport() As trans_SalesReportDataTable
        Get
            Return Me.tabletrans_SalesReport
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property trans_SalesReportCatcher() As trans_SalesReportCatcherDataTable
        Get
            Return Me.tabletrans_SalesReportCatcher
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property trans_SalesReportPrice() As trans_SalesReportPriceDataTable
        Get
            Return Me.tabletrans_SalesReportPrice
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property trans_SalesReportSummary() As trans_SalesReportSummaryDataTable
        Get
            Return Me.tabletrans_SalesReportSummary
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property trans_SalesReportWeightSlips() As trans_SalesReportWeightSlipsDataTable
        Get
            Return Me.tabletrans_SalesReportWeightSlips
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property trans_WeightSlip() As trans_WeightSlipDataTable
        Get
            Return Me.tabletrans_WeightSlip
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property trans_WeightSlipDetails() As trans_WeightSlipDetailsDataTable
        Get
            Return Me.tabletrans_WeightSlipDetails
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As MKDBDataSet = CType(MyBase.Clone,MKDBDataSet)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet()
            ds.ReadXml(reader)
            If (Not (ds.Tables("trans_CatchActivities")) Is Nothing) Then
                MyBase.Tables.Add(New trans_CatchActivitiesDataTable(ds.Tables("trans_CatchActivities")))
            End If
            If (Not (ds.Tables("trans_CatchActivityDetails")) Is Nothing) Then
                MyBase.Tables.Add(New trans_CatchActivityDetailsDataTable(ds.Tables("trans_CatchActivityDetails")))
            End If
            If (Not (ds.Tables("trans_CatchMethod")) Is Nothing) Then
                MyBase.Tables.Add(New trans_CatchMethodDataTable(ds.Tables("trans_CatchMethod")))
            End If
            If (Not (ds.Tables("trans_SalesReport")) Is Nothing) Then
                MyBase.Tables.Add(New trans_SalesReportDataTable(ds.Tables("trans_SalesReport")))
            End If
            If (Not (ds.Tables("trans_SalesReportCatcher")) Is Nothing) Then
                MyBase.Tables.Add(New trans_SalesReportCatcherDataTable(ds.Tables("trans_SalesReportCatcher")))
            End If
            If (Not (ds.Tables("trans_SalesReportPrice")) Is Nothing) Then
                MyBase.Tables.Add(New trans_SalesReportPriceDataTable(ds.Tables("trans_SalesReportPrice")))
            End If
            If (Not (ds.Tables("trans_SalesReportSummary")) Is Nothing) Then
                MyBase.Tables.Add(New trans_SalesReportSummaryDataTable(ds.Tables("trans_SalesReportSummary")))
            End If
            If (Not (ds.Tables("trans_SalesReportWeightSlips")) Is Nothing) Then
                MyBase.Tables.Add(New trans_SalesReportWeightSlipsDataTable(ds.Tables("trans_SalesReportWeightSlips")))
            End If
            If (Not (ds.Tables("trans_WeightSlip")) Is Nothing) Then
                MyBase.Tables.Add(New trans_WeightSlipDataTable(ds.Tables("trans_WeightSlip")))
            End If
            If (Not (ds.Tables("trans_WeightSlipDetails")) Is Nothing) Then
                MyBase.Tables.Add(New trans_WeightSlipDetailsDataTable(ds.Tables("trans_WeightSlipDetails")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tabletrans_CatchActivities = CType(MyBase.Tables("trans_CatchActivities"),trans_CatchActivitiesDataTable)
        If (initTable = true) Then
            If (Not (Me.tabletrans_CatchActivities) Is Nothing) Then
                Me.tabletrans_CatchActivities.InitVars
            End If
        End If
        Me.tabletrans_CatchActivityDetails = CType(MyBase.Tables("trans_CatchActivityDetails"),trans_CatchActivityDetailsDataTable)
        If (initTable = true) Then
            If (Not (Me.tabletrans_CatchActivityDetails) Is Nothing) Then
                Me.tabletrans_CatchActivityDetails.InitVars
            End If
        End If
        Me.tabletrans_CatchMethod = CType(MyBase.Tables("trans_CatchMethod"),trans_CatchMethodDataTable)
        If (initTable = true) Then
            If (Not (Me.tabletrans_CatchMethod) Is Nothing) Then
                Me.tabletrans_CatchMethod.InitVars
            End If
        End If
        Me.tabletrans_SalesReport = CType(MyBase.Tables("trans_SalesReport"),trans_SalesReportDataTable)
        If (initTable = true) Then
            If (Not (Me.tabletrans_SalesReport) Is Nothing) Then
                Me.tabletrans_SalesReport.InitVars
            End If
        End If
        Me.tabletrans_SalesReportCatcher = CType(MyBase.Tables("trans_SalesReportCatcher"),trans_SalesReportCatcherDataTable)
        If (initTable = true) Then
            If (Not (Me.tabletrans_SalesReportCatcher) Is Nothing) Then
                Me.tabletrans_SalesReportCatcher.InitVars
            End If
        End If
        Me.tabletrans_SalesReportPrice = CType(MyBase.Tables("trans_SalesReportPrice"),trans_SalesReportPriceDataTable)
        If (initTable = true) Then
            If (Not (Me.tabletrans_SalesReportPrice) Is Nothing) Then
                Me.tabletrans_SalesReportPrice.InitVars
            End If
        End If
        Me.tabletrans_SalesReportSummary = CType(MyBase.Tables("trans_SalesReportSummary"),trans_SalesReportSummaryDataTable)
        If (initTable = true) Then
            If (Not (Me.tabletrans_SalesReportSummary) Is Nothing) Then
                Me.tabletrans_SalesReportSummary.InitVars
            End If
        End If
        Me.tabletrans_SalesReportWeightSlips = CType(MyBase.Tables("trans_SalesReportWeightSlips"),trans_SalesReportWeightSlipsDataTable)
        If (initTable = true) Then
            If (Not (Me.tabletrans_SalesReportWeightSlips) Is Nothing) Then
                Me.tabletrans_SalesReportWeightSlips.InitVars
            End If
        End If
        Me.tabletrans_WeightSlip = CType(MyBase.Tables("trans_WeightSlip"),trans_WeightSlipDataTable)
        If (initTable = true) Then
            If (Not (Me.tabletrans_WeightSlip) Is Nothing) Then
                Me.tabletrans_WeightSlip.InitVars
            End If
        End If
        Me.tabletrans_WeightSlipDetails = CType(MyBase.Tables("trans_WeightSlipDetails"),trans_WeightSlipDetailsDataTable)
        If (initTable = true) Then
            If (Not (Me.tabletrans_WeightSlipDetails) Is Nothing) Then
                Me.tabletrans_WeightSlipDetails.InitVars
            End If
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Sub InitClass()
        Me.DataSetName = "MKDBDataSet"
        Me.Prefix = ""
        Me.Namespace = "http://tempuri.org/MKDBDataSet.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tabletrans_CatchActivities = New trans_CatchActivitiesDataTable()
        MyBase.Tables.Add(Me.tabletrans_CatchActivities)
        Me.tabletrans_CatchActivityDetails = New trans_CatchActivityDetailsDataTable()
        MyBase.Tables.Add(Me.tabletrans_CatchActivityDetails)
        Me.tabletrans_CatchMethod = New trans_CatchMethodDataTable()
        MyBase.Tables.Add(Me.tabletrans_CatchMethod)
        Me.tabletrans_SalesReport = New trans_SalesReportDataTable()
        MyBase.Tables.Add(Me.tabletrans_SalesReport)
        Me.tabletrans_SalesReportCatcher = New trans_SalesReportCatcherDataTable()
        MyBase.Tables.Add(Me.tabletrans_SalesReportCatcher)
        Me.tabletrans_SalesReportPrice = New trans_SalesReportPriceDataTable()
        MyBase.Tables.Add(Me.tabletrans_SalesReportPrice)
        Me.tabletrans_SalesReportSummary = New trans_SalesReportSummaryDataTable()
        MyBase.Tables.Add(Me.tabletrans_SalesReportSummary)
        Me.tabletrans_SalesReportWeightSlips = New trans_SalesReportWeightSlipsDataTable()
        MyBase.Tables.Add(Me.tabletrans_SalesReportWeightSlips)
        Me.tabletrans_WeightSlip = New trans_WeightSlipDataTable()
        MyBase.Tables.Add(Me.tabletrans_WeightSlip)
        Me.tabletrans_WeightSlipDetails = New trans_WeightSlipDetailsDataTable()
        MyBase.Tables.Add(Me.tabletrans_WeightSlipDetails)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializetrans_CatchActivities() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializetrans_CatchActivityDetails() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializetrans_CatchMethod() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializetrans_SalesReport() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializetrans_SalesReportCatcher() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializetrans_SalesReportPrice() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializetrans_SalesReportSummary() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializetrans_SalesReportWeightSlips() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializetrans_WeightSlip() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Function ShouldSerializetrans_WeightSlipDetails() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As MKDBDataSet = New MKDBDataSet()
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub trans_CatchActivitiesRowChangeEventHandler(ByVal sender As Object, ByVal e As trans_CatchActivitiesRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub trans_CatchActivityDetailsRowChangeEventHandler(ByVal sender As Object, ByVal e As trans_CatchActivityDetailsRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub trans_CatchMethodRowChangeEventHandler(ByVal sender As Object, ByVal e As trans_CatchMethodRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub trans_SalesReportRowChangeEventHandler(ByVal sender As Object, ByVal e As trans_SalesReportRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub trans_SalesReportCatcherRowChangeEventHandler(ByVal sender As Object, ByVal e As trans_SalesReportCatcherRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub trans_SalesReportPriceRowChangeEventHandler(ByVal sender As Object, ByVal e As trans_SalesReportPriceRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub trans_SalesReportSummaryRowChangeEventHandler(ByVal sender As Object, ByVal e As trans_SalesReportSummaryRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub trans_SalesReportWeightSlipsRowChangeEventHandler(ByVal sender As Object, ByVal e As trans_SalesReportWeightSlipsRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub trans_WeightSlipRowChangeEventHandler(ByVal sender As Object, ByVal e As trans_WeightSlipRowChangeEvent)
    
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Delegate Sub trans_WeightSlipDetailsRowChangeEventHandler(ByVal sender As Object, ByVal e As trans_WeightSlipDetailsRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class trans_CatchActivitiesDataTable
        Inherits Global.System.Data.TypedTableBase(Of trans_CatchActivitiesRow)
        
        Private columncatchActivity_ID As Global.System.Data.DataColumn
        
        Private columncatchDate As Global.System.Data.DataColumn
        
        Private columnmethod_ID As Global.System.Data.DataColumn
        
        Private columnlongitude As Global.System.Data.DataColumn
        
        Private columnlatitude As Global.System.Data.DataColumn
        
        Private columncatchReferenceNum As Global.System.Data.DataColumn
        
        Private columnapprovalStatus As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "trans_CatchActivities"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property catchActivity_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncatchActivity_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property catchDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncatchDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property method_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmethod_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property longitudeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlongitude
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property latitudeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlatitude
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property catchReferenceNumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncatchReferenceNum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property approvalStatusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnapprovalStatus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As trans_CatchActivitiesRow
            Get
                Return CType(Me.Rows(index),trans_CatchActivitiesRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event trans_CatchActivitiesRowChanging As trans_CatchActivitiesRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event trans_CatchActivitiesRowChanged As trans_CatchActivitiesRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event trans_CatchActivitiesRowDeleting As trans_CatchActivitiesRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event trans_CatchActivitiesRowDeleted As trans_CatchActivitiesRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub Addtrans_CatchActivitiesRow(ByVal row As trans_CatchActivitiesRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function Addtrans_CatchActivitiesRow(ByVal catchDate As Date, ByVal method_ID As Integer, ByVal longitude As Decimal, ByVal latitude As Decimal, ByVal catchReferenceNum As String, ByVal approvalStatus As Integer) As trans_CatchActivitiesRow
            Dim rowtrans_CatchActivitiesRow As trans_CatchActivitiesRow = CType(Me.NewRow,trans_CatchActivitiesRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, catchDate, method_ID, longitude, latitude, catchReferenceNum, approvalStatus}
            rowtrans_CatchActivitiesRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowtrans_CatchActivitiesRow)
            Return rowtrans_CatchActivitiesRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindBycatchActivity_ID(ByVal catchActivity_ID As Integer) As trans_CatchActivitiesRow
            Return CType(Me.Rows.Find(New Object() {catchActivity_ID}),trans_CatchActivitiesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As trans_CatchActivitiesDataTable = CType(MyBase.Clone,trans_CatchActivitiesDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New trans_CatchActivitiesDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columncatchActivity_ID = MyBase.Columns("catchActivity_ID")
            Me.columncatchDate = MyBase.Columns("catchDate")
            Me.columnmethod_ID = MyBase.Columns("method_ID")
            Me.columnlongitude = MyBase.Columns("longitude")
            Me.columnlatitude = MyBase.Columns("latitude")
            Me.columncatchReferenceNum = MyBase.Columns("catchReferenceNum")
            Me.columnapprovalStatus = MyBase.Columns("approvalStatus")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columncatchActivity_ID = New Global.System.Data.DataColumn("catchActivity_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncatchActivity_ID)
            Me.columncatchDate = New Global.System.Data.DataColumn("catchDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncatchDate)
            Me.columnmethod_ID = New Global.System.Data.DataColumn("method_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmethod_ID)
            Me.columnlongitude = New Global.System.Data.DataColumn("longitude", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlongitude)
            Me.columnlatitude = New Global.System.Data.DataColumn("latitude", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlatitude)
            Me.columncatchReferenceNum = New Global.System.Data.DataColumn("catchReferenceNum", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncatchReferenceNum)
            Me.columnapprovalStatus = New Global.System.Data.DataColumn("approvalStatus", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnapprovalStatus)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columncatchActivity_ID}, true))
            Me.columncatchActivity_ID.AutoIncrement = true
            Me.columncatchActivity_ID.AutoIncrementSeed = -1
            Me.columncatchActivity_ID.AutoIncrementStep = -1
            Me.columncatchActivity_ID.AllowDBNull = false
            Me.columncatchActivity_ID.ReadOnly = true
            Me.columncatchActivity_ID.Unique = true
            Me.columncatchDate.AllowDBNull = false
            Me.columnmethod_ID.AllowDBNull = false
            Me.columnlongitude.AllowDBNull = false
            Me.columnlatitude.AllowDBNull = false
            Me.columncatchReferenceNum.AllowDBNull = false
            Me.columncatchReferenceNum.MaxLength = 13
            Me.columnapprovalStatus.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Newtrans_CatchActivitiesRow() As trans_CatchActivitiesRow
            Return CType(Me.NewRow,trans_CatchActivitiesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New trans_CatchActivitiesRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(trans_CatchActivitiesRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.trans_CatchActivitiesRowChangedEvent) Is Nothing) Then
                RaiseEvent trans_CatchActivitiesRowChanged(Me, New trans_CatchActivitiesRowChangeEvent(CType(e.Row,trans_CatchActivitiesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.trans_CatchActivitiesRowChangingEvent) Is Nothing) Then
                RaiseEvent trans_CatchActivitiesRowChanging(Me, New trans_CatchActivitiesRowChangeEvent(CType(e.Row,trans_CatchActivitiesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.trans_CatchActivitiesRowDeletedEvent) Is Nothing) Then
                RaiseEvent trans_CatchActivitiesRowDeleted(Me, New trans_CatchActivitiesRowChangeEvent(CType(e.Row,trans_CatchActivitiesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.trans_CatchActivitiesRowDeletingEvent) Is Nothing) Then
                RaiseEvent trans_CatchActivitiesRowDeleting(Me, New trans_CatchActivitiesRowChangeEvent(CType(e.Row,trans_CatchActivitiesRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Removetrans_CatchActivitiesRow(ByVal row As trans_CatchActivitiesRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As MKDBDataSet = New MKDBDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "trans_CatchActivitiesDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class trans_CatchActivityDetailsDataTable
        Inherits Global.System.Data.TypedTableBase(Of trans_CatchActivityDetailsRow)
        
        Private columncatchActivityDetail_ID As Global.System.Data.DataColumn
        
        Private columncatchActivity_ID As Global.System.Data.DataColumn
        
        Private columnvessel_ID As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "trans_CatchActivityDetails"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property catchActivityDetail_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncatchActivityDetail_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property catchActivity_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncatchActivity_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property vessel_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnvessel_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As trans_CatchActivityDetailsRow
            Get
                Return CType(Me.Rows(index),trans_CatchActivityDetailsRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event trans_CatchActivityDetailsRowChanging As trans_CatchActivityDetailsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event trans_CatchActivityDetailsRowChanged As trans_CatchActivityDetailsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event trans_CatchActivityDetailsRowDeleting As trans_CatchActivityDetailsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event trans_CatchActivityDetailsRowDeleted As trans_CatchActivityDetailsRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub Addtrans_CatchActivityDetailsRow(ByVal row As trans_CatchActivityDetailsRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function Addtrans_CatchActivityDetailsRow(ByVal catchActivity_ID As Integer, ByVal vessel_ID As Integer) As trans_CatchActivityDetailsRow
            Dim rowtrans_CatchActivityDetailsRow As trans_CatchActivityDetailsRow = CType(Me.NewRow,trans_CatchActivityDetailsRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, catchActivity_ID, vessel_ID}
            rowtrans_CatchActivityDetailsRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowtrans_CatchActivityDetailsRow)
            Return rowtrans_CatchActivityDetailsRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindBycatchActivityDetail_ID(ByVal catchActivityDetail_ID As Integer) As trans_CatchActivityDetailsRow
            Return CType(Me.Rows.Find(New Object() {catchActivityDetail_ID}),trans_CatchActivityDetailsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As trans_CatchActivityDetailsDataTable = CType(MyBase.Clone,trans_CatchActivityDetailsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New trans_CatchActivityDetailsDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columncatchActivityDetail_ID = MyBase.Columns("catchActivityDetail_ID")
            Me.columncatchActivity_ID = MyBase.Columns("catchActivity_ID")
            Me.columnvessel_ID = MyBase.Columns("vessel_ID")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columncatchActivityDetail_ID = New Global.System.Data.DataColumn("catchActivityDetail_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncatchActivityDetail_ID)
            Me.columncatchActivity_ID = New Global.System.Data.DataColumn("catchActivity_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncatchActivity_ID)
            Me.columnvessel_ID = New Global.System.Data.DataColumn("vessel_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnvessel_ID)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columncatchActivityDetail_ID}, true))
            Me.columncatchActivityDetail_ID.AutoIncrement = true
            Me.columncatchActivityDetail_ID.AutoIncrementSeed = -1
            Me.columncatchActivityDetail_ID.AutoIncrementStep = -1
            Me.columncatchActivityDetail_ID.AllowDBNull = false
            Me.columncatchActivityDetail_ID.ReadOnly = true
            Me.columncatchActivityDetail_ID.Unique = true
            Me.columncatchActivity_ID.AllowDBNull = false
            Me.columnvessel_ID.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Newtrans_CatchActivityDetailsRow() As trans_CatchActivityDetailsRow
            Return CType(Me.NewRow,trans_CatchActivityDetailsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New trans_CatchActivityDetailsRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(trans_CatchActivityDetailsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.trans_CatchActivityDetailsRowChangedEvent) Is Nothing) Then
                RaiseEvent trans_CatchActivityDetailsRowChanged(Me, New trans_CatchActivityDetailsRowChangeEvent(CType(e.Row,trans_CatchActivityDetailsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.trans_CatchActivityDetailsRowChangingEvent) Is Nothing) Then
                RaiseEvent trans_CatchActivityDetailsRowChanging(Me, New trans_CatchActivityDetailsRowChangeEvent(CType(e.Row,trans_CatchActivityDetailsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.trans_CatchActivityDetailsRowDeletedEvent) Is Nothing) Then
                RaiseEvent trans_CatchActivityDetailsRowDeleted(Me, New trans_CatchActivityDetailsRowChangeEvent(CType(e.Row,trans_CatchActivityDetailsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.trans_CatchActivityDetailsRowDeletingEvent) Is Nothing) Then
                RaiseEvent trans_CatchActivityDetailsRowDeleting(Me, New trans_CatchActivityDetailsRowChangeEvent(CType(e.Row,trans_CatchActivityDetailsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Removetrans_CatchActivityDetailsRow(ByVal row As trans_CatchActivityDetailsRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As MKDBDataSet = New MKDBDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "trans_CatchActivityDetailsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class trans_CatchMethodDataTable
        Inherits Global.System.Data.TypedTableBase(Of trans_CatchMethodRow)
        
        Private columncatchMethod_ID As Global.System.Data.DataColumn
        
        Private columncatchMethod As Global.System.Data.DataColumn
        
        Private columnactive As Global.System.Data.DataColumn
        
        Private columnmodifiedDate As Global.System.Data.DataColumn
        
        Private columnmodifiedBy As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "trans_CatchMethod"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property catchMethod_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncatchMethod_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property catchMethodColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncatchMethod
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property activeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnactive
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property modifiedDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmodifiedDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property modifiedByColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnmodifiedBy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As trans_CatchMethodRow
            Get
                Return CType(Me.Rows(index),trans_CatchMethodRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event trans_CatchMethodRowChanging As trans_CatchMethodRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event trans_CatchMethodRowChanged As trans_CatchMethodRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event trans_CatchMethodRowDeleting As trans_CatchMethodRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event trans_CatchMethodRowDeleted As trans_CatchMethodRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub Addtrans_CatchMethodRow(ByVal row As trans_CatchMethodRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function Addtrans_CatchMethodRow(ByVal catchMethod As String, ByVal active As Boolean, ByVal modifiedDate As Date, ByVal modifiedBy As Date) As trans_CatchMethodRow
            Dim rowtrans_CatchMethodRow As trans_CatchMethodRow = CType(Me.NewRow,trans_CatchMethodRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, catchMethod, active, modifiedDate, modifiedBy}
            rowtrans_CatchMethodRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowtrans_CatchMethodRow)
            Return rowtrans_CatchMethodRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindBycatchMethod_ID(ByVal catchMethod_ID As Integer) As trans_CatchMethodRow
            Return CType(Me.Rows.Find(New Object() {catchMethod_ID}),trans_CatchMethodRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As trans_CatchMethodDataTable = CType(MyBase.Clone,trans_CatchMethodDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New trans_CatchMethodDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columncatchMethod_ID = MyBase.Columns("catchMethod_ID")
            Me.columncatchMethod = MyBase.Columns("catchMethod")
            Me.columnactive = MyBase.Columns("active")
            Me.columnmodifiedDate = MyBase.Columns("modifiedDate")
            Me.columnmodifiedBy = MyBase.Columns("modifiedBy")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columncatchMethod_ID = New Global.System.Data.DataColumn("catchMethod_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncatchMethod_ID)
            Me.columncatchMethod = New Global.System.Data.DataColumn("catchMethod", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncatchMethod)
            Me.columnactive = New Global.System.Data.DataColumn("active", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnactive)
            Me.columnmodifiedDate = New Global.System.Data.DataColumn("modifiedDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmodifiedDate)
            Me.columnmodifiedBy = New Global.System.Data.DataColumn("modifiedBy", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnmodifiedBy)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columncatchMethod_ID}, true))
            Me.columncatchMethod_ID.AutoIncrement = true
            Me.columncatchMethod_ID.AutoIncrementSeed = -1
            Me.columncatchMethod_ID.AutoIncrementStep = -1
            Me.columncatchMethod_ID.AllowDBNull = false
            Me.columncatchMethod_ID.ReadOnly = true
            Me.columncatchMethod_ID.Unique = true
            Me.columncatchMethod.AllowDBNull = false
            Me.columncatchMethod.MaxLength = 255
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Newtrans_CatchMethodRow() As trans_CatchMethodRow
            Return CType(Me.NewRow,trans_CatchMethodRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New trans_CatchMethodRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(trans_CatchMethodRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.trans_CatchMethodRowChangedEvent) Is Nothing) Then
                RaiseEvent trans_CatchMethodRowChanged(Me, New trans_CatchMethodRowChangeEvent(CType(e.Row,trans_CatchMethodRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.trans_CatchMethodRowChangingEvent) Is Nothing) Then
                RaiseEvent trans_CatchMethodRowChanging(Me, New trans_CatchMethodRowChangeEvent(CType(e.Row,trans_CatchMethodRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.trans_CatchMethodRowDeletedEvent) Is Nothing) Then
                RaiseEvent trans_CatchMethodRowDeleted(Me, New trans_CatchMethodRowChangeEvent(CType(e.Row,trans_CatchMethodRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.trans_CatchMethodRowDeletingEvent) Is Nothing) Then
                RaiseEvent trans_CatchMethodRowDeleting(Me, New trans_CatchMethodRowChangeEvent(CType(e.Row,trans_CatchMethodRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Removetrans_CatchMethodRow(ByVal row As trans_CatchMethodRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As MKDBDataSet = New MKDBDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "trans_CatchMethodDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class trans_SalesReportDataTable
        Inherits Global.System.Data.TypedTableBase(Of trans_SalesReportRow)
        
        Private columnsalesReport_ID As Global.System.Data.DataColumn
        
        Private columninvoiceNum As Global.System.Data.DataColumn
        
        Private columnreferenceNum As Global.System.Data.DataColumn
        
        Private columnsalesDate As Global.System.Data.DataColumn
        
        Private columnsalesNum As Global.System.Data.DataColumn
        
        Private columnsellingType As Global.System.Data.DataColumn
        
        Private columnunloadingType As Global.System.Data.DataColumn
        
        Private columnunloadingVessel_ID As Global.System.Data.DataColumn
        
        Private columnunloadingForeignVessel As Global.System.Data.DataColumn
        
        Private columnbuyer As Global.System.Data.DataColumn
        
        Private columncatchtDeliveryNum As Global.System.Data.DataColumn
        
        Private columnusdRate As Global.System.Data.DataColumn
        
        Private columncontractNum As Global.System.Data.DataColumn
        
        Private columnremarks As Global.System.Data.DataColumn
        
        Private columnencodedBy As Global.System.Data.DataColumn
        
        Private columnencodedOn As Global.System.Data.DataColumn
        
        Private columnapprovalStatus As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "trans_SalesReport"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property salesReport_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsalesReport_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property invoiceNumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columninvoiceNum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property referenceNumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnreferenceNum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property salesDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsalesDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property salesNumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsalesNum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property sellingTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsellingType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property unloadingTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnunloadingType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property unloadingVessel_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnunloadingVessel_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property unloadingForeignVesselColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnunloadingForeignVessel
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property buyerColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbuyer
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property catchtDeliveryNumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncatchtDeliveryNum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property usdRateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnusdRate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property contractNumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncontractNum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property remarksColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnremarks
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property encodedByColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnencodedBy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property encodedOnColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnencodedOn
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property approvalStatusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnapprovalStatus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As trans_SalesReportRow
            Get
                Return CType(Me.Rows(index),trans_SalesReportRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event trans_SalesReportRowChanging As trans_SalesReportRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event trans_SalesReportRowChanged As trans_SalesReportRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event trans_SalesReportRowDeleting As trans_SalesReportRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event trans_SalesReportRowDeleted As trans_SalesReportRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub Addtrans_SalesReportRow(ByVal row As trans_SalesReportRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function Addtrans_SalesReportRow( _
                    ByVal invoiceNum As String,  _
                    ByVal referenceNum As String,  _
                    ByVal salesDate As Date,  _
                    ByVal salesNum As String,  _
                    ByVal sellingType As String,  _
                    ByVal unloadingType As String,  _
                    ByVal unloadingVessel_ID As String,  _
                    ByVal unloadingForeignVessel As String,  _
                    ByVal buyer As String,  _
                    ByVal catchtDeliveryNum As String,  _
                    ByVal usdRate As Decimal,  _
                    ByVal contractNum As String,  _
                    ByVal remarks As String,  _
                    ByVal encodedBy As Integer,  _
                    ByVal encodedOn As Date,  _
                    ByVal approvalStatus As Integer) As trans_SalesReportRow
            Dim rowtrans_SalesReportRow As trans_SalesReportRow = CType(Me.NewRow,trans_SalesReportRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, invoiceNum, referenceNum, salesDate, salesNum, sellingType, unloadingType, unloadingVessel_ID, unloadingForeignVessel, buyer, catchtDeliveryNum, usdRate, contractNum, remarks, encodedBy, encodedOn, approvalStatus}
            rowtrans_SalesReportRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowtrans_SalesReportRow)
            Return rowtrans_SalesReportRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindBysalesReport_ID(ByVal salesReport_ID As Integer) As trans_SalesReportRow
            Return CType(Me.Rows.Find(New Object() {salesReport_ID}),trans_SalesReportRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As trans_SalesReportDataTable = CType(MyBase.Clone,trans_SalesReportDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New trans_SalesReportDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnsalesReport_ID = MyBase.Columns("salesReport_ID")
            Me.columninvoiceNum = MyBase.Columns("invoiceNum")
            Me.columnreferenceNum = MyBase.Columns("referenceNum")
            Me.columnsalesDate = MyBase.Columns("salesDate")
            Me.columnsalesNum = MyBase.Columns("salesNum")
            Me.columnsellingType = MyBase.Columns("sellingType")
            Me.columnunloadingType = MyBase.Columns("unloadingType")
            Me.columnunloadingVessel_ID = MyBase.Columns("unloadingVessel_ID")
            Me.columnunloadingForeignVessel = MyBase.Columns("unloadingForeignVessel")
            Me.columnbuyer = MyBase.Columns("buyer")
            Me.columncatchtDeliveryNum = MyBase.Columns("catchtDeliveryNum")
            Me.columnusdRate = MyBase.Columns("usdRate")
            Me.columncontractNum = MyBase.Columns("contractNum")
            Me.columnremarks = MyBase.Columns("remarks")
            Me.columnencodedBy = MyBase.Columns("encodedBy")
            Me.columnencodedOn = MyBase.Columns("encodedOn")
            Me.columnapprovalStatus = MyBase.Columns("approvalStatus")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnsalesReport_ID = New Global.System.Data.DataColumn("salesReport_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsalesReport_ID)
            Me.columninvoiceNum = New Global.System.Data.DataColumn("invoiceNum", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columninvoiceNum)
            Me.columnreferenceNum = New Global.System.Data.DataColumn("referenceNum", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnreferenceNum)
            Me.columnsalesDate = New Global.System.Data.DataColumn("salesDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsalesDate)
            Me.columnsalesNum = New Global.System.Data.DataColumn("salesNum", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsalesNum)
            Me.columnsellingType = New Global.System.Data.DataColumn("sellingType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsellingType)
            Me.columnunloadingType = New Global.System.Data.DataColumn("unloadingType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnunloadingType)
            Me.columnunloadingVessel_ID = New Global.System.Data.DataColumn("unloadingVessel_ID", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnunloadingVessel_ID)
            Me.columnunloadingForeignVessel = New Global.System.Data.DataColumn("unloadingForeignVessel", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnunloadingForeignVessel)
            Me.columnbuyer = New Global.System.Data.DataColumn("buyer", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbuyer)
            Me.columncatchtDeliveryNum = New Global.System.Data.DataColumn("catchtDeliveryNum", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncatchtDeliveryNum)
            Me.columnusdRate = New Global.System.Data.DataColumn("usdRate", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnusdRate)
            Me.columncontractNum = New Global.System.Data.DataColumn("contractNum", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncontractNum)
            Me.columnremarks = New Global.System.Data.DataColumn("remarks", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnremarks)
            Me.columnencodedBy = New Global.System.Data.DataColumn("encodedBy", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnencodedBy)
            Me.columnencodedOn = New Global.System.Data.DataColumn("encodedOn", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnencodedOn)
            Me.columnapprovalStatus = New Global.System.Data.DataColumn("approvalStatus", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnapprovalStatus)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnsalesReport_ID}, true))
            Me.columnsalesReport_ID.AutoIncrement = true
            Me.columnsalesReport_ID.AutoIncrementSeed = -1
            Me.columnsalesReport_ID.AutoIncrementStep = -1
            Me.columnsalesReport_ID.AllowDBNull = false
            Me.columnsalesReport_ID.ReadOnly = true
            Me.columnsalesReport_ID.Unique = true
            Me.columninvoiceNum.MaxLength = 20
            Me.columnreferenceNum.AllowDBNull = false
            Me.columnreferenceNum.MaxLength = 13
            Me.columnsalesDate.AllowDBNull = false
            Me.columnsalesNum.AllowDBNull = false
            Me.columnsalesNum.MaxLength = 20
            Me.columnsellingType.AllowDBNull = false
            Me.columnsellingType.MaxLength = 20
            Me.columnunloadingType.AllowDBNull = false
            Me.columnunloadingType.MaxLength = 20
            Me.columnunloadingVessel_ID.MaxLength = 140
            Me.columnunloadingForeignVessel.MaxLength = 140
            Me.columnbuyer.AllowDBNull = false
            Me.columnbuyer.MaxLength = 100
            Me.columncatchtDeliveryNum.AllowDBNull = false
            Me.columncatchtDeliveryNum.MaxLength = 15
            Me.columnusdRate.AllowDBNull = false
            Me.columncontractNum.AllowDBNull = false
            Me.columncontractNum.MaxLength = 50
            Me.columnremarks.MaxLength = 300
            Me.columnencodedBy.AllowDBNull = false
            Me.columnencodedOn.AllowDBNull = false
            Me.columnapprovalStatus.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Newtrans_SalesReportRow() As trans_SalesReportRow
            Return CType(Me.NewRow,trans_SalesReportRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New trans_SalesReportRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(trans_SalesReportRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.trans_SalesReportRowChangedEvent) Is Nothing) Then
                RaiseEvent trans_SalesReportRowChanged(Me, New trans_SalesReportRowChangeEvent(CType(e.Row,trans_SalesReportRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.trans_SalesReportRowChangingEvent) Is Nothing) Then
                RaiseEvent trans_SalesReportRowChanging(Me, New trans_SalesReportRowChangeEvent(CType(e.Row,trans_SalesReportRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.trans_SalesReportRowDeletedEvent) Is Nothing) Then
                RaiseEvent trans_SalesReportRowDeleted(Me, New trans_SalesReportRowChangeEvent(CType(e.Row,trans_SalesReportRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.trans_SalesReportRowDeletingEvent) Is Nothing) Then
                RaiseEvent trans_SalesReportRowDeleting(Me, New trans_SalesReportRowChangeEvent(CType(e.Row,trans_SalesReportRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Removetrans_SalesReportRow(ByVal row As trans_SalesReportRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As MKDBDataSet = New MKDBDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "trans_SalesReportDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class trans_SalesReportCatcherDataTable
        Inherits Global.System.Data.TypedTableBase(Of trans_SalesReportCatcherRow)
        
        Private columnsalesReportCatcher_ID As Global.System.Data.DataColumn
        
        Private columnsalesReport_ID As Global.System.Data.DataColumn
        
        Private columncatchActivityDetail_ID As Global.System.Data.DataColumn
        
        Private columnskipjack0_300To0_499 As Global.System.Data.DataColumn
        
        Private columnskipjack0_500To0_999 As Global.System.Data.DataColumn
        
        Private columnskipjack1_0To1_39 As Global.System.Data.DataColumn
        
        Private columnskipjack1_4To1_79 As Global.System.Data.DataColumn
        
        Private columnskipjack1_8To2_49 As Global.System.Data.DataColumn
        
        Private columnskipjack2_5To3_49 As Global.System.Data.DataColumn
        
        Private columnskipjack3_5AndUP As Global.System.Data.DataColumn
        
        Private columnyellowfin0_300To0_499 As Global.System.Data.DataColumn
        
        Private columnyellowfin0_500To0_999 As Global.System.Data.DataColumn
        
        Private columnyellowfin1_0To1_49 As Global.System.Data.DataColumn
        
        Private columnyellowfin1_5To2_49 As Global.System.Data.DataColumn
        
        Private columnyellowfin2_5To3_49 As Global.System.Data.DataColumn
        
        Private columnyellowfin3_5To4_99 As Global.System.Data.DataColumn
        
        Private columnyellowfin5_0To9_99 As Global.System.Data.DataColumn
        
        Private columnyellowfin10AndUpGood As Global.System.Data.DataColumn
        
        Private columnyellowfin10AndUpDeformed As Global.System.Data.DataColumn
        
        Private columnbigeye0_500To0_999 As Global.System.Data.DataColumn
        
        Private columnbigeye1_0To1_49 As Global.System.Data.DataColumn
        
        Private columnbigeye1_5To2_49 As Global.System.Data.DataColumn
        
        Private columnbigeye2_5To3_49 As Global.System.Data.DataColumn
        
        Private columnbigeye3_5To4_99 As Global.System.Data.DataColumn
        
        Private columnbigeye5_0To9_99 As Global.System.Data.DataColumn
        
        Private columnbigeye10AndUP As Global.System.Data.DataColumn
        
        Private columnbonito As Global.System.Data.DataColumn
        
        Private columnfishmeal As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "trans_SalesReportCatcher"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property salesReportCatcher_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsalesReportCatcher_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property salesReport_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsalesReport_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property catchActivityDetail_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncatchActivityDetail_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property skipjack0_300To0_499Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnskipjack0_300To0_499
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property skipjack0_500To0_999Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnskipjack0_500To0_999
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property skipjack1_0To1_39Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnskipjack1_0To1_39
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property skipjack1_4To1_79Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnskipjack1_4To1_79
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property skipjack1_8To2_49Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnskipjack1_8To2_49
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property skipjack2_5To3_49Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnskipjack2_5To3_49
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property skipjack3_5AndUPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnskipjack3_5AndUP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property yellowfin0_300To0_499Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnyellowfin0_300To0_499
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property yellowfin0_500To0_999Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnyellowfin0_500To0_999
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property yellowfin1_0To1_49Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnyellowfin1_0To1_49
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property yellowfin1_5To2_49Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnyellowfin1_5To2_49
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property yellowfin2_5To3_49Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnyellowfin2_5To3_49
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property yellowfin3_5To4_99Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnyellowfin3_5To4_99
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property yellowfin5_0To9_99Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnyellowfin5_0To9_99
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property yellowfin10AndUpGoodColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnyellowfin10AndUpGood
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property yellowfin10AndUpDeformedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnyellowfin10AndUpDeformed
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property bigeye0_500To0_999Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnbigeye0_500To0_999
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property bigeye1_0To1_49Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnbigeye1_0To1_49
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property bigeye1_5To2_49Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnbigeye1_5To2_49
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property bigeye2_5To3_49Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnbigeye2_5To3_49
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property bigeye3_5To4_99Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnbigeye3_5To4_99
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property bigeye5_0To9_99Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnbigeye5_0To9_99
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property bigeye10AndUPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbigeye10AndUP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property bonitoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbonito
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property fishmealColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfishmeal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As trans_SalesReportCatcherRow
            Get
                Return CType(Me.Rows(index),trans_SalesReportCatcherRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event trans_SalesReportCatcherRowChanging As trans_SalesReportCatcherRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event trans_SalesReportCatcherRowChanged As trans_SalesReportCatcherRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event trans_SalesReportCatcherRowDeleting As trans_SalesReportCatcherRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event trans_SalesReportCatcherRowDeleted As trans_SalesReportCatcherRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub Addtrans_SalesReportCatcherRow(ByVal row As trans_SalesReportCatcherRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function Addtrans_SalesReportCatcherRow( _
                    ByVal salesReport_ID As Integer,  _
                    ByVal catchActivityDetail_ID As Integer,  _
                    ByVal skipjack0_300To0_499 As Decimal,  _
                    ByVal skipjack0_500To0_999 As Decimal,  _
                    ByVal skipjack1_0To1_39 As Decimal,  _
                    ByVal skipjack1_4To1_79 As Decimal,  _
                    ByVal skipjack1_8To2_49 As Decimal,  _
                    ByVal skipjack2_5To3_49 As Decimal,  _
                    ByVal skipjack3_5AndUP As Decimal,  _
                    ByVal yellowfin0_300To0_499 As Decimal,  _
                    ByVal yellowfin0_500To0_999 As Decimal,  _
                    ByVal yellowfin1_0To1_49 As Decimal,  _
                    ByVal yellowfin1_5To2_49 As Decimal,  _
                    ByVal yellowfin2_5To3_49 As Decimal,  _
                    ByVal yellowfin3_5To4_99 As Decimal,  _
                    ByVal yellowfin5_0To9_99 As Decimal,  _
                    ByVal yellowfin10AndUpGood As Decimal,  _
                    ByVal yellowfin10AndUpDeformed As Decimal,  _
                    ByVal bigeye0_500To0_999 As Decimal,  _
                    ByVal bigeye1_0To1_49 As Decimal,  _
                    ByVal bigeye1_5To2_49 As Decimal,  _
                    ByVal bigeye2_5To3_49 As Decimal,  _
                    ByVal bigeye3_5To4_99 As Decimal,  _
                    ByVal bigeye5_0To9_99 As Decimal,  _
                    ByVal bigeye10AndUP As Decimal,  _
                    ByVal bonito As Decimal,  _
                    ByVal fishmeal As Decimal) As trans_SalesReportCatcherRow
            Dim rowtrans_SalesReportCatcherRow As trans_SalesReportCatcherRow = CType(Me.NewRow,trans_SalesReportCatcherRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, salesReport_ID, catchActivityDetail_ID, skipjack0_300To0_499, skipjack0_500To0_999, skipjack1_0To1_39, skipjack1_4To1_79, skipjack1_8To2_49, skipjack2_5To3_49, skipjack3_5AndUP, yellowfin0_300To0_499, yellowfin0_500To0_999, yellowfin1_0To1_49, yellowfin1_5To2_49, yellowfin2_5To3_49, yellowfin3_5To4_99, yellowfin5_0To9_99, yellowfin10AndUpGood, yellowfin10AndUpDeformed, bigeye0_500To0_999, bigeye1_0To1_49, bigeye1_5To2_49, bigeye2_5To3_49, bigeye3_5To4_99, bigeye5_0To9_99, bigeye10AndUP, bonito, fishmeal}
            rowtrans_SalesReportCatcherRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowtrans_SalesReportCatcherRow)
            Return rowtrans_SalesReportCatcherRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindBysalesReportCatcher_ID(ByVal salesReportCatcher_ID As Integer) As trans_SalesReportCatcherRow
            Return CType(Me.Rows.Find(New Object() {salesReportCatcher_ID}),trans_SalesReportCatcherRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As trans_SalesReportCatcherDataTable = CType(MyBase.Clone,trans_SalesReportCatcherDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New trans_SalesReportCatcherDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnsalesReportCatcher_ID = MyBase.Columns("salesReportCatcher_ID")
            Me.columnsalesReport_ID = MyBase.Columns("salesReport_ID")
            Me.columncatchActivityDetail_ID = MyBase.Columns("catchActivityDetail_ID")
            Me.columnskipjack0_300To0_499 = MyBase.Columns("skipjack0_300To0_499")
            Me.columnskipjack0_500To0_999 = MyBase.Columns("skipjack0_500To0_999")
            Me.columnskipjack1_0To1_39 = MyBase.Columns("skipjack1_0To1_39")
            Me.columnskipjack1_4To1_79 = MyBase.Columns("skipjack1_4To1_79")
            Me.columnskipjack1_8To2_49 = MyBase.Columns("skipjack1_8To2_49")
            Me.columnskipjack2_5To3_49 = MyBase.Columns("skipjack2_5To3_49")
            Me.columnskipjack3_5AndUP = MyBase.Columns("skipjack3_5AndUP")
            Me.columnyellowfin0_300To0_499 = MyBase.Columns("yellowfin0_300To0_499")
            Me.columnyellowfin0_500To0_999 = MyBase.Columns("yellowfin0_500To0_999")
            Me.columnyellowfin1_0To1_49 = MyBase.Columns("yellowfin1_0To1_49")
            Me.columnyellowfin1_5To2_49 = MyBase.Columns("yellowfin1_5To2_49")
            Me.columnyellowfin2_5To3_49 = MyBase.Columns("yellowfin2_5To3_49")
            Me.columnyellowfin3_5To4_99 = MyBase.Columns("yellowfin3_5To4_99")
            Me.columnyellowfin5_0To9_99 = MyBase.Columns("yellowfin5_0To9_99")
            Me.columnyellowfin10AndUpGood = MyBase.Columns("yellowfin10AndUpGood")
            Me.columnyellowfin10AndUpDeformed = MyBase.Columns("yellowfin10AndUpDeformed")
            Me.columnbigeye0_500To0_999 = MyBase.Columns("bigeye0_500To0_999")
            Me.columnbigeye1_0To1_49 = MyBase.Columns("bigeye1_0To1_49")
            Me.columnbigeye1_5To2_49 = MyBase.Columns("bigeye1_5To2_49")
            Me.columnbigeye2_5To3_49 = MyBase.Columns("bigeye2_5To3_49")
            Me.columnbigeye3_5To4_99 = MyBase.Columns("bigeye3_5To4_99")
            Me.columnbigeye5_0To9_99 = MyBase.Columns("bigeye5_0To9_99")
            Me.columnbigeye10AndUP = MyBase.Columns("bigeye10AndUP")
            Me.columnbonito = MyBase.Columns("bonito")
            Me.columnfishmeal = MyBase.Columns("fishmeal")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnsalesReportCatcher_ID = New Global.System.Data.DataColumn("salesReportCatcher_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsalesReportCatcher_ID)
            Me.columnsalesReport_ID = New Global.System.Data.DataColumn("salesReport_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsalesReport_ID)
            Me.columncatchActivityDetail_ID = New Global.System.Data.DataColumn("catchActivityDetail_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncatchActivityDetail_ID)
            Me.columnskipjack0_300To0_499 = New Global.System.Data.DataColumn("skipjack0_300To0_499", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnskipjack0_300To0_499)
            Me.columnskipjack0_500To0_999 = New Global.System.Data.DataColumn("skipjack0_500To0_999", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnskipjack0_500To0_999)
            Me.columnskipjack1_0To1_39 = New Global.System.Data.DataColumn("skipjack1_0To1_39", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnskipjack1_0To1_39)
            Me.columnskipjack1_4To1_79 = New Global.System.Data.DataColumn("skipjack1_4To1_79", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnskipjack1_4To1_79)
            Me.columnskipjack1_8To2_49 = New Global.System.Data.DataColumn("skipjack1_8To2_49", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnskipjack1_8To2_49)
            Me.columnskipjack2_5To3_49 = New Global.System.Data.DataColumn("skipjack2_5To3_49", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnskipjack2_5To3_49)
            Me.columnskipjack3_5AndUP = New Global.System.Data.DataColumn("skipjack3_5AndUP", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnskipjack3_5AndUP)
            Me.columnyellowfin0_300To0_499 = New Global.System.Data.DataColumn("yellowfin0_300To0_499", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnyellowfin0_300To0_499)
            Me.columnyellowfin0_500To0_999 = New Global.System.Data.DataColumn("yellowfin0_500To0_999", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnyellowfin0_500To0_999)
            Me.columnyellowfin1_0To1_49 = New Global.System.Data.DataColumn("yellowfin1_0To1_49", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnyellowfin1_0To1_49)
            Me.columnyellowfin1_5To2_49 = New Global.System.Data.DataColumn("yellowfin1_5To2_49", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnyellowfin1_5To2_49)
            Me.columnyellowfin2_5To3_49 = New Global.System.Data.DataColumn("yellowfin2_5To3_49", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnyellowfin2_5To3_49)
            Me.columnyellowfin3_5To4_99 = New Global.System.Data.DataColumn("yellowfin3_5To4_99", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnyellowfin3_5To4_99)
            Me.columnyellowfin5_0To9_99 = New Global.System.Data.DataColumn("yellowfin5_0To9_99", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnyellowfin5_0To9_99)
            Me.columnyellowfin10AndUpGood = New Global.System.Data.DataColumn("yellowfin10AndUpGood", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnyellowfin10AndUpGood)
            Me.columnyellowfin10AndUpDeformed = New Global.System.Data.DataColumn("yellowfin10AndUpDeformed", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnyellowfin10AndUpDeformed)
            Me.columnbigeye0_500To0_999 = New Global.System.Data.DataColumn("bigeye0_500To0_999", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbigeye0_500To0_999)
            Me.columnbigeye1_0To1_49 = New Global.System.Data.DataColumn("bigeye1_0To1_49", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbigeye1_0To1_49)
            Me.columnbigeye1_5To2_49 = New Global.System.Data.DataColumn("bigeye1_5To2_49", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbigeye1_5To2_49)
            Me.columnbigeye2_5To3_49 = New Global.System.Data.DataColumn("bigeye2_5To3_49", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbigeye2_5To3_49)
            Me.columnbigeye3_5To4_99 = New Global.System.Data.DataColumn("bigeye3_5To4_99", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbigeye3_5To4_99)
            Me.columnbigeye5_0To9_99 = New Global.System.Data.DataColumn("bigeye5_0To9_99", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbigeye5_0To9_99)
            Me.columnbigeye10AndUP = New Global.System.Data.DataColumn("bigeye10AndUP", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbigeye10AndUP)
            Me.columnbonito = New Global.System.Data.DataColumn("bonito", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbonito)
            Me.columnfishmeal = New Global.System.Data.DataColumn("fishmeal", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfishmeal)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnsalesReportCatcher_ID}, true))
            Me.columnsalesReportCatcher_ID.AutoIncrement = true
            Me.columnsalesReportCatcher_ID.AutoIncrementSeed = -1
            Me.columnsalesReportCatcher_ID.AutoIncrementStep = -1
            Me.columnsalesReportCatcher_ID.AllowDBNull = false
            Me.columnsalesReportCatcher_ID.ReadOnly = true
            Me.columnsalesReportCatcher_ID.Unique = true
            Me.columnsalesReport_ID.AllowDBNull = false
            Me.columncatchActivityDetail_ID.AllowDBNull = false
            Me.columnskipjack0_300To0_499.AllowDBNull = false
            Me.columnskipjack0_500To0_999.AllowDBNull = false
            Me.columnskipjack1_0To1_39.AllowDBNull = false
            Me.columnskipjack1_4To1_79.AllowDBNull = false
            Me.columnskipjack1_8To2_49.AllowDBNull = false
            Me.columnskipjack2_5To3_49.AllowDBNull = false
            Me.columnskipjack3_5AndUP.AllowDBNull = false
            Me.columnyellowfin0_300To0_499.AllowDBNull = false
            Me.columnyellowfin0_500To0_999.AllowDBNull = false
            Me.columnyellowfin1_0To1_49.AllowDBNull = false
            Me.columnyellowfin1_5To2_49.AllowDBNull = false
            Me.columnyellowfin2_5To3_49.AllowDBNull = false
            Me.columnyellowfin3_5To4_99.AllowDBNull = false
            Me.columnyellowfin5_0To9_99.AllowDBNull = false
            Me.columnyellowfin10AndUpGood.AllowDBNull = false
            Me.columnyellowfin10AndUpDeformed.AllowDBNull = false
            Me.columnbigeye0_500To0_999.AllowDBNull = false
            Me.columnbigeye1_0To1_49.AllowDBNull = false
            Me.columnbigeye1_5To2_49.AllowDBNull = false
            Me.columnbigeye2_5To3_49.AllowDBNull = false
            Me.columnbigeye3_5To4_99.AllowDBNull = false
            Me.columnbigeye5_0To9_99.AllowDBNull = false
            Me.columnbigeye10AndUP.AllowDBNull = false
            Me.columnbonito.AllowDBNull = false
            Me.columnfishmeal.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Newtrans_SalesReportCatcherRow() As trans_SalesReportCatcherRow
            Return CType(Me.NewRow,trans_SalesReportCatcherRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New trans_SalesReportCatcherRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(trans_SalesReportCatcherRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.trans_SalesReportCatcherRowChangedEvent) Is Nothing) Then
                RaiseEvent trans_SalesReportCatcherRowChanged(Me, New trans_SalesReportCatcherRowChangeEvent(CType(e.Row,trans_SalesReportCatcherRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.trans_SalesReportCatcherRowChangingEvent) Is Nothing) Then
                RaiseEvent trans_SalesReportCatcherRowChanging(Me, New trans_SalesReportCatcherRowChangeEvent(CType(e.Row,trans_SalesReportCatcherRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.trans_SalesReportCatcherRowDeletedEvent) Is Nothing) Then
                RaiseEvent trans_SalesReportCatcherRowDeleted(Me, New trans_SalesReportCatcherRowChangeEvent(CType(e.Row,trans_SalesReportCatcherRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.trans_SalesReportCatcherRowDeletingEvent) Is Nothing) Then
                RaiseEvent trans_SalesReportCatcherRowDeleting(Me, New trans_SalesReportCatcherRowChangeEvent(CType(e.Row,trans_SalesReportCatcherRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Removetrans_SalesReportCatcherRow(ByVal row As trans_SalesReportCatcherRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As MKDBDataSet = New MKDBDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "trans_SalesReportCatcherDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class trans_SalesReportPriceDataTable
        Inherits Global.System.Data.TypedTableBase(Of trans_SalesReportPriceRow)
        
        Private columnsalesReportPrice_ID As Global.System.Data.DataColumn
        
        Private columnsalesReport_ID As Global.System.Data.DataColumn
        
        Private columnskipjack0_300To0_499 As Global.System.Data.DataColumn
        
        Private columnskipjack0_500To0_999 As Global.System.Data.DataColumn
        
        Private _columnskipjack1_0To1_39 As Global.System.Data.DataColumn
        
        Private columnskipjack1_4To1_79 As Global.System.Data.DataColumn
        
        Private columnskipjack1_8To2_49 As Global.System.Data.DataColumn
        
        Private columnskipjack2_5To3_49 As Global.System.Data.DataColumn
        
        Private columnskipjack3_5AndUP As Global.System.Data.DataColumn
        
        Private columnyellowfin0_300To0_499 As Global.System.Data.DataColumn
        
        Private columnyellowfin0_500To0_999 As Global.System.Data.DataColumn
        
        Private columnyellowfin1_0To1_49 As Global.System.Data.DataColumn
        
        Private columnyellowfin1_5To2_49 As Global.System.Data.DataColumn
        
        Private columnyellowfin2_5To3_49 As Global.System.Data.DataColumn
        
        Private columnyellowfin3_5To4_99 As Global.System.Data.DataColumn
        
        Private columnyellowfin5_0To9_99 As Global.System.Data.DataColumn
        
        Private columnyellowfin10AndUpGood As Global.System.Data.DataColumn
        
        Private columnyellowfin10AndUpDeformed As Global.System.Data.DataColumn
        
        Private columnbigeye0_500To0_999 As Global.System.Data.DataColumn
        
        Private columnbigeye1_0To1_49 As Global.System.Data.DataColumn
        
        Private columnbigeye1_5To2_49 As Global.System.Data.DataColumn
        
        Private columnbigeye2_5To3_49 As Global.System.Data.DataColumn
        
        Private columnbigeye3_5To4_99 As Global.System.Data.DataColumn
        
        Private columnbigeye5_0To9_99 As Global.System.Data.DataColumn
        
        Private columnbigeye10AndUP As Global.System.Data.DataColumn
        
        Private columnbonito As Global.System.Data.DataColumn
        
        Private columnfishmeal As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "trans_SalesReportPrice"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property salesReportPrice_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsalesReportPrice_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property salesReport_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsalesReport_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property skipjack0_300To0_499Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnskipjack0_300To0_499
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property skipjack0_500To0_999Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnskipjack0_500To0_999
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property _skipjack1_0To1_39Column() As Global.System.Data.DataColumn
            Get
                Return Me._columnskipjack1_0To1_39
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property skipjack1_4To1_79Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnskipjack1_4To1_79
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property skipjack1_8To2_49Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnskipjack1_8To2_49
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property skipjack2_5To3_49Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnskipjack2_5To3_49
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property skipjack3_5AndUPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnskipjack3_5AndUP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property yellowfin0_300To0_499Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnyellowfin0_300To0_499
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property yellowfin0_500To0_999Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnyellowfin0_500To0_999
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property yellowfin1_0To1_49Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnyellowfin1_0To1_49
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property yellowfin1_5To2_49Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnyellowfin1_5To2_49
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property yellowfin2_5To3_49Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnyellowfin2_5To3_49
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property yellowfin3_5To4_99Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnyellowfin3_5To4_99
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property yellowfin5_0To9_99Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnyellowfin5_0To9_99
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property yellowfin10AndUpGoodColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnyellowfin10AndUpGood
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property yellowfin10AndUpDeformedColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnyellowfin10AndUpDeformed
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property bigeye0_500To0_999Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnbigeye0_500To0_999
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property bigeye1_0To1_49Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnbigeye1_0To1_49
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property bigeye1_5To2_49Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnbigeye1_5To2_49
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property bigeye2_5To3_49Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnbigeye2_5To3_49
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property bigeye3_5To4_99Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnbigeye3_5To4_99
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property bigeye5_0To9_99Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnbigeye5_0To9_99
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property bigeye10AndUPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbigeye10AndUP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property bonitoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbonito
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property fishmealColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfishmeal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As trans_SalesReportPriceRow
            Get
                Return CType(Me.Rows(index),trans_SalesReportPriceRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event trans_SalesReportPriceRowChanging As trans_SalesReportPriceRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event trans_SalesReportPriceRowChanged As trans_SalesReportPriceRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event trans_SalesReportPriceRowDeleting As trans_SalesReportPriceRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event trans_SalesReportPriceRowDeleted As trans_SalesReportPriceRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub Addtrans_SalesReportPriceRow(ByVal row As trans_SalesReportPriceRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function Addtrans_SalesReportPriceRow( _
                    ByVal salesReport_ID As Integer,  _
                    ByVal skipjack0_300To0_499 As Decimal,  _
                    ByVal skipjack0_500To0_999 As Decimal,  _
                    ByVal _skipjack1_0To1_39 As Decimal,  _
                    ByVal skipjack1_4To1_79 As Decimal,  _
                    ByVal skipjack1_8To2_49 As Decimal,  _
                    ByVal skipjack2_5To3_49 As Decimal,  _
                    ByVal skipjack3_5AndUP As Decimal,  _
                    ByVal yellowfin0_300To0_499 As Decimal,  _
                    ByVal yellowfin0_500To0_999 As Decimal,  _
                    ByVal yellowfin1_0To1_49 As Decimal,  _
                    ByVal yellowfin1_5To2_49 As Decimal,  _
                    ByVal yellowfin2_5To3_49 As Decimal,  _
                    ByVal yellowfin3_5To4_99 As Decimal,  _
                    ByVal yellowfin5_0To9_99 As Decimal,  _
                    ByVal yellowfin10AndUpGood As Decimal,  _
                    ByVal yellowfin10AndUpDeformed As Decimal,  _
                    ByVal bigeye0_500To0_999 As Decimal,  _
                    ByVal bigeye1_0To1_49 As Decimal,  _
                    ByVal bigeye1_5To2_49 As Decimal,  _
                    ByVal bigeye2_5To3_49 As Decimal,  _
                    ByVal bigeye3_5To4_99 As Decimal,  _
                    ByVal bigeye5_0To9_99 As Decimal,  _
                    ByVal bigeye10AndUP As Decimal,  _
                    ByVal bonito As Decimal,  _
                    ByVal fishmeal As Decimal) As trans_SalesReportPriceRow
            Dim rowtrans_SalesReportPriceRow As trans_SalesReportPriceRow = CType(Me.NewRow,trans_SalesReportPriceRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, salesReport_ID, skipjack0_300To0_499, skipjack0_500To0_999, _skipjack1_0To1_39, skipjack1_4To1_79, skipjack1_8To2_49, skipjack2_5To3_49, skipjack3_5AndUP, yellowfin0_300To0_499, yellowfin0_500To0_999, yellowfin1_0To1_49, yellowfin1_5To2_49, yellowfin2_5To3_49, yellowfin3_5To4_99, yellowfin5_0To9_99, yellowfin10AndUpGood, yellowfin10AndUpDeformed, bigeye0_500To0_999, bigeye1_0To1_49, bigeye1_5To2_49, bigeye2_5To3_49, bigeye3_5To4_99, bigeye5_0To9_99, bigeye10AndUP, bonito, fishmeal}
            rowtrans_SalesReportPriceRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowtrans_SalesReportPriceRow)
            Return rowtrans_SalesReportPriceRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindBysalesReportPrice_ID(ByVal salesReportPrice_ID As Integer) As trans_SalesReportPriceRow
            Return CType(Me.Rows.Find(New Object() {salesReportPrice_ID}),trans_SalesReportPriceRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As trans_SalesReportPriceDataTable = CType(MyBase.Clone,trans_SalesReportPriceDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New trans_SalesReportPriceDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnsalesReportPrice_ID = MyBase.Columns("salesReportPrice_ID")
            Me.columnsalesReport_ID = MyBase.Columns("salesReport_ID")
            Me.columnskipjack0_300To0_499 = MyBase.Columns("skipjack0_300To0_499")
            Me.columnskipjack0_500To0_999 = MyBase.Columns("skipjack0_500To0_999")
            Me._columnskipjack1_0To1_39 = MyBase.Columns("skipjack1_0To1-39")
            Me.columnskipjack1_4To1_79 = MyBase.Columns("skipjack1_4To1_79")
            Me.columnskipjack1_8To2_49 = MyBase.Columns("skipjack1_8To2_49")
            Me.columnskipjack2_5To3_49 = MyBase.Columns("skipjack2_5To3_49")
            Me.columnskipjack3_5AndUP = MyBase.Columns("skipjack3_5AndUP")
            Me.columnyellowfin0_300To0_499 = MyBase.Columns("yellowfin0_300To0_499")
            Me.columnyellowfin0_500To0_999 = MyBase.Columns("yellowfin0_500To0_999")
            Me.columnyellowfin1_0To1_49 = MyBase.Columns("yellowfin1_0To1_49")
            Me.columnyellowfin1_5To2_49 = MyBase.Columns("yellowfin1_5To2_49")
            Me.columnyellowfin2_5To3_49 = MyBase.Columns("yellowfin2_5To3_49")
            Me.columnyellowfin3_5To4_99 = MyBase.Columns("yellowfin3_5To4_99")
            Me.columnyellowfin5_0To9_99 = MyBase.Columns("yellowfin5_0To9_99")
            Me.columnyellowfin10AndUpGood = MyBase.Columns("yellowfin10AndUpGood")
            Me.columnyellowfin10AndUpDeformed = MyBase.Columns("yellowfin10AndUpDeformed")
            Me.columnbigeye0_500To0_999 = MyBase.Columns("bigeye0_500To0_999")
            Me.columnbigeye1_0To1_49 = MyBase.Columns("bigeye1_0To1_49")
            Me.columnbigeye1_5To2_49 = MyBase.Columns("bigeye1_5To2_49")
            Me.columnbigeye2_5To3_49 = MyBase.Columns("bigeye2_5To3_49")
            Me.columnbigeye3_5To4_99 = MyBase.Columns("bigeye3_5To4_99")
            Me.columnbigeye5_0To9_99 = MyBase.Columns("bigeye5_0To9_99")
            Me.columnbigeye10AndUP = MyBase.Columns("bigeye10AndUP")
            Me.columnbonito = MyBase.Columns("bonito")
            Me.columnfishmeal = MyBase.Columns("fishmeal")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnsalesReportPrice_ID = New Global.System.Data.DataColumn("salesReportPrice_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsalesReportPrice_ID)
            Me.columnsalesReport_ID = New Global.System.Data.DataColumn("salesReport_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsalesReport_ID)
            Me.columnskipjack0_300To0_499 = New Global.System.Data.DataColumn("skipjack0_300To0_499", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnskipjack0_300To0_499)
            Me.columnskipjack0_500To0_999 = New Global.System.Data.DataColumn("skipjack0_500To0_999", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnskipjack0_500To0_999)
            Me._columnskipjack1_0To1_39 = New Global.System.Data.DataColumn("skipjack1_0To1-39", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            Me._columnskipjack1_0To1_39.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "_columnskipjack1_0To1_39")
            Me._columnskipjack1_0To1_39.ExtendedProperties.Add("Generator_UserColumnName", "skipjack1_0To1-39")
            MyBase.Columns.Add(Me._columnskipjack1_0To1_39)
            Me.columnskipjack1_4To1_79 = New Global.System.Data.DataColumn("skipjack1_4To1_79", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnskipjack1_4To1_79)
            Me.columnskipjack1_8To2_49 = New Global.System.Data.DataColumn("skipjack1_8To2_49", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnskipjack1_8To2_49)
            Me.columnskipjack2_5To3_49 = New Global.System.Data.DataColumn("skipjack2_5To3_49", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnskipjack2_5To3_49)
            Me.columnskipjack3_5AndUP = New Global.System.Data.DataColumn("skipjack3_5AndUP", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnskipjack3_5AndUP)
            Me.columnyellowfin0_300To0_499 = New Global.System.Data.DataColumn("yellowfin0_300To0_499", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnyellowfin0_300To0_499)
            Me.columnyellowfin0_500To0_999 = New Global.System.Data.DataColumn("yellowfin0_500To0_999", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnyellowfin0_500To0_999)
            Me.columnyellowfin1_0To1_49 = New Global.System.Data.DataColumn("yellowfin1_0To1_49", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnyellowfin1_0To1_49)
            Me.columnyellowfin1_5To2_49 = New Global.System.Data.DataColumn("yellowfin1_5To2_49", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnyellowfin1_5To2_49)
            Me.columnyellowfin2_5To3_49 = New Global.System.Data.DataColumn("yellowfin2_5To3_49", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnyellowfin2_5To3_49)
            Me.columnyellowfin3_5To4_99 = New Global.System.Data.DataColumn("yellowfin3_5To4_99", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnyellowfin3_5To4_99)
            Me.columnyellowfin5_0To9_99 = New Global.System.Data.DataColumn("yellowfin5_0To9_99", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnyellowfin5_0To9_99)
            Me.columnyellowfin10AndUpGood = New Global.System.Data.DataColumn("yellowfin10AndUpGood", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnyellowfin10AndUpGood)
            Me.columnyellowfin10AndUpDeformed = New Global.System.Data.DataColumn("yellowfin10AndUpDeformed", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnyellowfin10AndUpDeformed)
            Me.columnbigeye0_500To0_999 = New Global.System.Data.DataColumn("bigeye0_500To0_999", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbigeye0_500To0_999)
            Me.columnbigeye1_0To1_49 = New Global.System.Data.DataColumn("bigeye1_0To1_49", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbigeye1_0To1_49)
            Me.columnbigeye1_5To2_49 = New Global.System.Data.DataColumn("bigeye1_5To2_49", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbigeye1_5To2_49)
            Me.columnbigeye2_5To3_49 = New Global.System.Data.DataColumn("bigeye2_5To3_49", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbigeye2_5To3_49)
            Me.columnbigeye3_5To4_99 = New Global.System.Data.DataColumn("bigeye3_5To4_99", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbigeye3_5To4_99)
            Me.columnbigeye5_0To9_99 = New Global.System.Data.DataColumn("bigeye5_0To9_99", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbigeye5_0To9_99)
            Me.columnbigeye10AndUP = New Global.System.Data.DataColumn("bigeye10AndUP", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbigeye10AndUP)
            Me.columnbonito = New Global.System.Data.DataColumn("bonito", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbonito)
            Me.columnfishmeal = New Global.System.Data.DataColumn("fishmeal", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfishmeal)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnsalesReportPrice_ID}, true))
            Me.columnsalesReportPrice_ID.AutoIncrement = true
            Me.columnsalesReportPrice_ID.AutoIncrementSeed = -1
            Me.columnsalesReportPrice_ID.AutoIncrementStep = -1
            Me.columnsalesReportPrice_ID.AllowDBNull = false
            Me.columnsalesReportPrice_ID.ReadOnly = true
            Me.columnsalesReportPrice_ID.Unique = true
            Me.columnsalesReport_ID.AllowDBNull = false
            Me.columnskipjack0_300To0_499.AllowDBNull = false
            Me.columnskipjack0_500To0_999.AllowDBNull = false
            Me._columnskipjack1_0To1_39.AllowDBNull = false
            Me.columnskipjack1_4To1_79.AllowDBNull = false
            Me.columnskipjack1_8To2_49.AllowDBNull = false
            Me.columnskipjack2_5To3_49.AllowDBNull = false
            Me.columnskipjack3_5AndUP.AllowDBNull = false
            Me.columnyellowfin0_300To0_499.AllowDBNull = false
            Me.columnyellowfin0_500To0_999.AllowDBNull = false
            Me.columnyellowfin1_0To1_49.AllowDBNull = false
            Me.columnyellowfin1_5To2_49.AllowDBNull = false
            Me.columnyellowfin2_5To3_49.AllowDBNull = false
            Me.columnyellowfin3_5To4_99.AllowDBNull = false
            Me.columnyellowfin5_0To9_99.AllowDBNull = false
            Me.columnyellowfin10AndUpGood.AllowDBNull = false
            Me.columnyellowfin10AndUpDeformed.AllowDBNull = false
            Me.columnbigeye0_500To0_999.AllowDBNull = false
            Me.columnbigeye1_0To1_49.AllowDBNull = false
            Me.columnbigeye1_5To2_49.AllowDBNull = false
            Me.columnbigeye2_5To3_49.AllowDBNull = false
            Me.columnbigeye3_5To4_99.AllowDBNull = false
            Me.columnbigeye5_0To9_99.AllowDBNull = false
            Me.columnbigeye10AndUP.AllowDBNull = false
            Me.columnbonito.AllowDBNull = false
            Me.columnfishmeal.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Newtrans_SalesReportPriceRow() As trans_SalesReportPriceRow
            Return CType(Me.NewRow,trans_SalesReportPriceRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New trans_SalesReportPriceRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(trans_SalesReportPriceRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.trans_SalesReportPriceRowChangedEvent) Is Nothing) Then
                RaiseEvent trans_SalesReportPriceRowChanged(Me, New trans_SalesReportPriceRowChangeEvent(CType(e.Row,trans_SalesReportPriceRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.trans_SalesReportPriceRowChangingEvent) Is Nothing) Then
                RaiseEvent trans_SalesReportPriceRowChanging(Me, New trans_SalesReportPriceRowChangeEvent(CType(e.Row,trans_SalesReportPriceRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.trans_SalesReportPriceRowDeletedEvent) Is Nothing) Then
                RaiseEvent trans_SalesReportPriceRowDeleted(Me, New trans_SalesReportPriceRowChangeEvent(CType(e.Row,trans_SalesReportPriceRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.trans_SalesReportPriceRowDeletingEvent) Is Nothing) Then
                RaiseEvent trans_SalesReportPriceRowDeleting(Me, New trans_SalesReportPriceRowChangeEvent(CType(e.Row,trans_SalesReportPriceRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Removetrans_SalesReportPriceRow(ByVal row As trans_SalesReportPriceRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As MKDBDataSet = New MKDBDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "trans_SalesReportPriceDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class trans_SalesReportSummaryDataTable
        Inherits Global.System.Data.TypedTableBase(Of trans_SalesReportSummaryRow)
        
        Private columnsalesReportSummary_ID As Global.System.Data.DataColumn
        
        Private columnsalesReport_ID As Global.System.Data.DataColumn
        
        Private columnvessel_ID As Global.System.Data.DataColumn
        
        Private columncatchersPartialQty As Global.System.Data.DataColumn
        
        Private columncatchersPartialUnloadedQty As Global.System.Data.DataColumn
        
        Private columncatchersActualUnloadedQty As Global.System.Data.DataColumn
        
        Private columnactualQtyInKilos As Global.System.Data.DataColumn
        
        Private columnfishmealInKilos As Global.System.Data.DataColumn
        
        Private columnspoilageInKilos As Global.System.Data.DataColumn
        
        Private columnactualQtyInAmount As Global.System.Data.DataColumn
        
        Private columnfishmealInAmount As Global.System.Data.DataColumn
        
        Private columnspoilageInAmount As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "trans_SalesReportSummary"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property salesReportSummary_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsalesReportSummary_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property salesReport_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsalesReport_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property vessel_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnvessel_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property catchersPartialQtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncatchersPartialQty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property catchersPartialUnloadedQtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncatchersPartialUnloadedQty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property catchersActualUnloadedQtyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncatchersActualUnloadedQty
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property actualQtyInKilosColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnactualQtyInKilos
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property fishmealInKilosColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfishmealInKilos
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property spoilageInKilosColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnspoilageInKilos
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property actualQtyInAmountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnactualQtyInAmount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property fishmealInAmountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfishmealInAmount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property spoilageInAmountColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnspoilageInAmount
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As trans_SalesReportSummaryRow
            Get
                Return CType(Me.Rows(index),trans_SalesReportSummaryRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event trans_SalesReportSummaryRowChanging As trans_SalesReportSummaryRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event trans_SalesReportSummaryRowChanged As trans_SalesReportSummaryRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event trans_SalesReportSummaryRowDeleting As trans_SalesReportSummaryRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event trans_SalesReportSummaryRowDeleted As trans_SalesReportSummaryRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub Addtrans_SalesReportSummaryRow(ByVal row As trans_SalesReportSummaryRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function Addtrans_SalesReportSummaryRow(ByVal salesReport_ID As Integer, ByVal vessel_ID As Integer, ByVal catchersPartialQty As Decimal, ByVal catchersPartialUnloadedQty As Decimal, ByVal catchersActualUnloadedQty As Decimal, ByVal actualQtyInKilos As Decimal, ByVal fishmealInKilos As Decimal, ByVal spoilageInKilos As Decimal, ByVal actualQtyInAmount As Decimal, ByVal fishmealInAmount As Decimal, ByVal spoilageInAmount As Decimal) As trans_SalesReportSummaryRow
            Dim rowtrans_SalesReportSummaryRow As trans_SalesReportSummaryRow = CType(Me.NewRow,trans_SalesReportSummaryRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, salesReport_ID, vessel_ID, catchersPartialQty, catchersPartialUnloadedQty, catchersActualUnloadedQty, actualQtyInKilos, fishmealInKilos, spoilageInKilos, actualQtyInAmount, fishmealInAmount, spoilageInAmount}
            rowtrans_SalesReportSummaryRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowtrans_SalesReportSummaryRow)
            Return rowtrans_SalesReportSummaryRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindBysalesReportSummary_ID(ByVal salesReportSummary_ID As Integer) As trans_SalesReportSummaryRow
            Return CType(Me.Rows.Find(New Object() {salesReportSummary_ID}),trans_SalesReportSummaryRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As trans_SalesReportSummaryDataTable = CType(MyBase.Clone,trans_SalesReportSummaryDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New trans_SalesReportSummaryDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnsalesReportSummary_ID = MyBase.Columns("salesReportSummary_ID")
            Me.columnsalesReport_ID = MyBase.Columns("salesReport_ID")
            Me.columnvessel_ID = MyBase.Columns("vessel_ID")
            Me.columncatchersPartialQty = MyBase.Columns("catchersPartialQty")
            Me.columncatchersPartialUnloadedQty = MyBase.Columns("catchersPartialUnloadedQty")
            Me.columncatchersActualUnloadedQty = MyBase.Columns("catchersActualUnloadedQty")
            Me.columnactualQtyInKilos = MyBase.Columns("actualQtyInKilos")
            Me.columnfishmealInKilos = MyBase.Columns("fishmealInKilos")
            Me.columnspoilageInKilos = MyBase.Columns("spoilageInKilos")
            Me.columnactualQtyInAmount = MyBase.Columns("actualQtyInAmount")
            Me.columnfishmealInAmount = MyBase.Columns("fishmealInAmount")
            Me.columnspoilageInAmount = MyBase.Columns("spoilageInAmount")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnsalesReportSummary_ID = New Global.System.Data.DataColumn("salesReportSummary_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsalesReportSummary_ID)
            Me.columnsalesReport_ID = New Global.System.Data.DataColumn("salesReport_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsalesReport_ID)
            Me.columnvessel_ID = New Global.System.Data.DataColumn("vessel_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnvessel_ID)
            Me.columncatchersPartialQty = New Global.System.Data.DataColumn("catchersPartialQty", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncatchersPartialQty)
            Me.columncatchersPartialUnloadedQty = New Global.System.Data.DataColumn("catchersPartialUnloadedQty", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncatchersPartialUnloadedQty)
            Me.columncatchersActualUnloadedQty = New Global.System.Data.DataColumn("catchersActualUnloadedQty", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncatchersActualUnloadedQty)
            Me.columnactualQtyInKilos = New Global.System.Data.DataColumn("actualQtyInKilos", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnactualQtyInKilos)
            Me.columnfishmealInKilos = New Global.System.Data.DataColumn("fishmealInKilos", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfishmealInKilos)
            Me.columnspoilageInKilos = New Global.System.Data.DataColumn("spoilageInKilos", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnspoilageInKilos)
            Me.columnactualQtyInAmount = New Global.System.Data.DataColumn("actualQtyInAmount", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnactualQtyInAmount)
            Me.columnfishmealInAmount = New Global.System.Data.DataColumn("fishmealInAmount", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfishmealInAmount)
            Me.columnspoilageInAmount = New Global.System.Data.DataColumn("spoilageInAmount", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnspoilageInAmount)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnsalesReportSummary_ID}, true))
            Me.columnsalesReportSummary_ID.AutoIncrement = true
            Me.columnsalesReportSummary_ID.AutoIncrementSeed = -1
            Me.columnsalesReportSummary_ID.AutoIncrementStep = -1
            Me.columnsalesReportSummary_ID.AllowDBNull = false
            Me.columnsalesReportSummary_ID.ReadOnly = true
            Me.columnsalesReportSummary_ID.Unique = true
            Me.columnsalesReport_ID.AllowDBNull = false
            Me.columnvessel_ID.AllowDBNull = false
            Me.columncatchersPartialQty.AllowDBNull = false
            Me.columncatchersPartialUnloadedQty.AllowDBNull = false
            Me.columncatchersActualUnloadedQty.AllowDBNull = false
            Me.columnactualQtyInKilos.AllowDBNull = false
            Me.columnfishmealInKilos.AllowDBNull = false
            Me.columnspoilageInKilos.AllowDBNull = false
            Me.columnactualQtyInAmount.AllowDBNull = false
            Me.columnfishmealInAmount.AllowDBNull = false
            Me.columnspoilageInAmount.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Newtrans_SalesReportSummaryRow() As trans_SalesReportSummaryRow
            Return CType(Me.NewRow,trans_SalesReportSummaryRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New trans_SalesReportSummaryRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(trans_SalesReportSummaryRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.trans_SalesReportSummaryRowChangedEvent) Is Nothing) Then
                RaiseEvent trans_SalesReportSummaryRowChanged(Me, New trans_SalesReportSummaryRowChangeEvent(CType(e.Row,trans_SalesReportSummaryRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.trans_SalesReportSummaryRowChangingEvent) Is Nothing) Then
                RaiseEvent trans_SalesReportSummaryRowChanging(Me, New trans_SalesReportSummaryRowChangeEvent(CType(e.Row,trans_SalesReportSummaryRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.trans_SalesReportSummaryRowDeletedEvent) Is Nothing) Then
                RaiseEvent trans_SalesReportSummaryRowDeleted(Me, New trans_SalesReportSummaryRowChangeEvent(CType(e.Row,trans_SalesReportSummaryRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.trans_SalesReportSummaryRowDeletingEvent) Is Nothing) Then
                RaiseEvent trans_SalesReportSummaryRowDeleting(Me, New trans_SalesReportSummaryRowChangeEvent(CType(e.Row,trans_SalesReportSummaryRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Removetrans_SalesReportSummaryRow(ByVal row As trans_SalesReportSummaryRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As MKDBDataSet = New MKDBDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "trans_SalesReportSummaryDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class trans_SalesReportWeightSlipsDataTable
        Inherits Global.System.Data.TypedTableBase(Of trans_SalesReportWeightSlipsRow)
        
        Private columnsalesReportWeightSlip_ID As Global.System.Data.DataColumn
        
        Private columnsalesReport_ID As Global.System.Data.DataColumn
        
        Private columnweightSlipDetail_ID As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "trans_SalesReportWeightSlips"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property salesReportWeightSlip_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsalesReportWeightSlip_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property salesReport_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsalesReport_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property weightSlipDetail_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnweightSlipDetail_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As trans_SalesReportWeightSlipsRow
            Get
                Return CType(Me.Rows(index),trans_SalesReportWeightSlipsRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event trans_SalesReportWeightSlipsRowChanging As trans_SalesReportWeightSlipsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event trans_SalesReportWeightSlipsRowChanged As trans_SalesReportWeightSlipsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event trans_SalesReportWeightSlipsRowDeleting As trans_SalesReportWeightSlipsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event trans_SalesReportWeightSlipsRowDeleted As trans_SalesReportWeightSlipsRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub Addtrans_SalesReportWeightSlipsRow(ByVal row As trans_SalesReportWeightSlipsRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function Addtrans_SalesReportWeightSlipsRow(ByVal salesReport_ID As Integer, ByVal weightSlipDetail_ID As Integer) As trans_SalesReportWeightSlipsRow
            Dim rowtrans_SalesReportWeightSlipsRow As trans_SalesReportWeightSlipsRow = CType(Me.NewRow,trans_SalesReportWeightSlipsRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, salesReport_ID, weightSlipDetail_ID}
            rowtrans_SalesReportWeightSlipsRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowtrans_SalesReportWeightSlipsRow)
            Return rowtrans_SalesReportWeightSlipsRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindBysalesReportWeightSlip_ID(ByVal salesReportWeightSlip_ID As Integer) As trans_SalesReportWeightSlipsRow
            Return CType(Me.Rows.Find(New Object() {salesReportWeightSlip_ID}),trans_SalesReportWeightSlipsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As trans_SalesReportWeightSlipsDataTable = CType(MyBase.Clone,trans_SalesReportWeightSlipsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New trans_SalesReportWeightSlipsDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnsalesReportWeightSlip_ID = MyBase.Columns("salesReportWeightSlip_ID")
            Me.columnsalesReport_ID = MyBase.Columns("salesReport_ID")
            Me.columnweightSlipDetail_ID = MyBase.Columns("weightSlipDetail_ID")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnsalesReportWeightSlip_ID = New Global.System.Data.DataColumn("salesReportWeightSlip_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsalesReportWeightSlip_ID)
            Me.columnsalesReport_ID = New Global.System.Data.DataColumn("salesReport_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsalesReport_ID)
            Me.columnweightSlipDetail_ID = New Global.System.Data.DataColumn("weightSlipDetail_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnweightSlipDetail_ID)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnsalesReportWeightSlip_ID}, true))
            Me.columnsalesReportWeightSlip_ID.AutoIncrement = true
            Me.columnsalesReportWeightSlip_ID.AutoIncrementSeed = -1
            Me.columnsalesReportWeightSlip_ID.AutoIncrementStep = -1
            Me.columnsalesReportWeightSlip_ID.AllowDBNull = false
            Me.columnsalesReportWeightSlip_ID.ReadOnly = true
            Me.columnsalesReportWeightSlip_ID.Unique = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Newtrans_SalesReportWeightSlipsRow() As trans_SalesReportWeightSlipsRow
            Return CType(Me.NewRow,trans_SalesReportWeightSlipsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New trans_SalesReportWeightSlipsRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(trans_SalesReportWeightSlipsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.trans_SalesReportWeightSlipsRowChangedEvent) Is Nothing) Then
                RaiseEvent trans_SalesReportWeightSlipsRowChanged(Me, New trans_SalesReportWeightSlipsRowChangeEvent(CType(e.Row,trans_SalesReportWeightSlipsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.trans_SalesReportWeightSlipsRowChangingEvent) Is Nothing) Then
                RaiseEvent trans_SalesReportWeightSlipsRowChanging(Me, New trans_SalesReportWeightSlipsRowChangeEvent(CType(e.Row,trans_SalesReportWeightSlipsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.trans_SalesReportWeightSlipsRowDeletedEvent) Is Nothing) Then
                RaiseEvent trans_SalesReportWeightSlipsRowDeleted(Me, New trans_SalesReportWeightSlipsRowChangeEvent(CType(e.Row,trans_SalesReportWeightSlipsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.trans_SalesReportWeightSlipsRowDeletingEvent) Is Nothing) Then
                RaiseEvent trans_SalesReportWeightSlipsRowDeleting(Me, New trans_SalesReportWeightSlipsRowChangeEvent(CType(e.Row,trans_SalesReportWeightSlipsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Removetrans_SalesReportWeightSlipsRow(ByVal row As trans_SalesReportWeightSlipsRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As MKDBDataSet = New MKDBDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "trans_SalesReportWeightSlipsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class trans_WeightSlipDataTable
        Inherits Global.System.Data.TypedTableBase(Of trans_WeightSlipRow)
        
        Private columnweightSlip_ID As Global.System.Data.DataColumn
        
        Private columnweightSlipDate As Global.System.Data.DataColumn
        
        Private columnfishWeightSlipNum As Global.System.Data.DataColumn
        
        Private columnsellingType As Global.System.Data.DataColumn
        
        Private columnbuyer As Global.System.Data.DataColumn
        
        Private columnunloadingType As Global.System.Data.DataColumn
        
        Private columnunloadingVessel_ID As Global.System.Data.DataColumn
        
        Private columnunloadingForeignVessel As Global.System.Data.DataColumn
        
        Private columncatcherVessel_ID As Global.System.Data.DataColumn
        
        Private columncompanyChecker_ID As Global.System.Data.DataColumn
        
        Private columnbuyersChecker As Global.System.Data.DataColumn
        
        Private columncontractNum As Global.System.Data.DataColumn
        
        Private columnremarks As Global.System.Data.DataColumn
        
        Private columnencodedBy As Global.System.Data.DataColumn
        
        Private columnencodedOn As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "trans_WeightSlip"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property weightSlip_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnweightSlip_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property weightSlipDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnweightSlipDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property fishWeightSlipNumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfishWeightSlipNum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property sellingTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnsellingType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property buyerColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbuyer
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property unloadingTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnunloadingType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property unloadingVessel_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnunloadingVessel_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property unloadingForeignVesselColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnunloadingForeignVessel
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property catcherVessel_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncatcherVessel_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property companyChecker_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncompanyChecker_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property buyersCheckerColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbuyersChecker
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property contractNumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columncontractNum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property remarksColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnremarks
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property encodedByColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnencodedBy
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property encodedOnColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnencodedOn
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As trans_WeightSlipRow
            Get
                Return CType(Me.Rows(index),trans_WeightSlipRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event trans_WeightSlipRowChanging As trans_WeightSlipRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event trans_WeightSlipRowChanged As trans_WeightSlipRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event trans_WeightSlipRowDeleting As trans_WeightSlipRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event trans_WeightSlipRowDeleted As trans_WeightSlipRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub Addtrans_WeightSlipRow(ByVal row As trans_WeightSlipRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function Addtrans_WeightSlipRow(ByVal weightSlipDate As Date, ByVal fishWeightSlipNum As String, ByVal sellingType As String, ByVal buyer As String, ByVal unloadingType As String, ByVal unloadingVessel_ID As Integer, ByVal unloadingForeignVessel As String, ByVal catcherVessel_ID As Integer, ByVal companyChecker_ID As Integer, ByVal buyersChecker As String, ByVal contractNum As String, ByVal remarks As String, ByVal encodedBy As Integer, ByVal encodedOn As Date) As trans_WeightSlipRow
            Dim rowtrans_WeightSlipRow As trans_WeightSlipRow = CType(Me.NewRow,trans_WeightSlipRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, weightSlipDate, fishWeightSlipNum, sellingType, buyer, unloadingType, unloadingVessel_ID, unloadingForeignVessel, catcherVessel_ID, companyChecker_ID, buyersChecker, contractNum, remarks, encodedBy, encodedOn}
            rowtrans_WeightSlipRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowtrans_WeightSlipRow)
            Return rowtrans_WeightSlipRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByweightSlip_ID(ByVal weightSlip_ID As Integer) As trans_WeightSlipRow
            Return CType(Me.Rows.Find(New Object() {weightSlip_ID}),trans_WeightSlipRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As trans_WeightSlipDataTable = CType(MyBase.Clone,trans_WeightSlipDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New trans_WeightSlipDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnweightSlip_ID = MyBase.Columns("weightSlip_ID")
            Me.columnweightSlipDate = MyBase.Columns("weightSlipDate")
            Me.columnfishWeightSlipNum = MyBase.Columns("fishWeightSlipNum")
            Me.columnsellingType = MyBase.Columns("sellingType")
            Me.columnbuyer = MyBase.Columns("buyer")
            Me.columnunloadingType = MyBase.Columns("unloadingType")
            Me.columnunloadingVessel_ID = MyBase.Columns("unloadingVessel_ID")
            Me.columnunloadingForeignVessel = MyBase.Columns("unloadingForeignVessel")
            Me.columncatcherVessel_ID = MyBase.Columns("catcherVessel_ID")
            Me.columncompanyChecker_ID = MyBase.Columns("companyChecker_ID")
            Me.columnbuyersChecker = MyBase.Columns("buyersChecker")
            Me.columncontractNum = MyBase.Columns("contractNum")
            Me.columnremarks = MyBase.Columns("remarks")
            Me.columnencodedBy = MyBase.Columns("encodedBy")
            Me.columnencodedOn = MyBase.Columns("encodedOn")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnweightSlip_ID = New Global.System.Data.DataColumn("weightSlip_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnweightSlip_ID)
            Me.columnweightSlipDate = New Global.System.Data.DataColumn("weightSlipDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnweightSlipDate)
            Me.columnfishWeightSlipNum = New Global.System.Data.DataColumn("fishWeightSlipNum", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfishWeightSlipNum)
            Me.columnsellingType = New Global.System.Data.DataColumn("sellingType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnsellingType)
            Me.columnbuyer = New Global.System.Data.DataColumn("buyer", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbuyer)
            Me.columnunloadingType = New Global.System.Data.DataColumn("unloadingType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnunloadingType)
            Me.columnunloadingVessel_ID = New Global.System.Data.DataColumn("unloadingVessel_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnunloadingVessel_ID)
            Me.columnunloadingForeignVessel = New Global.System.Data.DataColumn("unloadingForeignVessel", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnunloadingForeignVessel)
            Me.columncatcherVessel_ID = New Global.System.Data.DataColumn("catcherVessel_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncatcherVessel_ID)
            Me.columncompanyChecker_ID = New Global.System.Data.DataColumn("companyChecker_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncompanyChecker_ID)
            Me.columnbuyersChecker = New Global.System.Data.DataColumn("buyersChecker", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbuyersChecker)
            Me.columncontractNum = New Global.System.Data.DataColumn("contractNum", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columncontractNum)
            Me.columnremarks = New Global.System.Data.DataColumn("remarks", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnremarks)
            Me.columnencodedBy = New Global.System.Data.DataColumn("encodedBy", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnencodedBy)
            Me.columnencodedOn = New Global.System.Data.DataColumn("encodedOn", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnencodedOn)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnweightSlip_ID}, true))
            Me.columnweightSlip_ID.AutoIncrement = true
            Me.columnweightSlip_ID.AutoIncrementSeed = -1
            Me.columnweightSlip_ID.AutoIncrementStep = -1
            Me.columnweightSlip_ID.AllowDBNull = false
            Me.columnweightSlip_ID.ReadOnly = true
            Me.columnweightSlip_ID.Unique = true
            Me.columnfishWeightSlipNum.MaxLength = 15
            Me.columnsellingType.MaxLength = 20
            Me.columnbuyer.MaxLength = 100
            Me.columnunloadingType.MaxLength = 20
            Me.columnunloadingForeignVessel.MaxLength = 100
            Me.columnbuyersChecker.MaxLength = 100
            Me.columncontractNum.MaxLength = 50
            Me.columnremarks.MaxLength = 300
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Newtrans_WeightSlipRow() As trans_WeightSlipRow
            Return CType(Me.NewRow,trans_WeightSlipRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New trans_WeightSlipRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(trans_WeightSlipRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.trans_WeightSlipRowChangedEvent) Is Nothing) Then
                RaiseEvent trans_WeightSlipRowChanged(Me, New trans_WeightSlipRowChangeEvent(CType(e.Row,trans_WeightSlipRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.trans_WeightSlipRowChangingEvent) Is Nothing) Then
                RaiseEvent trans_WeightSlipRowChanging(Me, New trans_WeightSlipRowChangeEvent(CType(e.Row,trans_WeightSlipRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.trans_WeightSlipRowDeletedEvent) Is Nothing) Then
                RaiseEvent trans_WeightSlipRowDeleted(Me, New trans_WeightSlipRowChangeEvent(CType(e.Row,trans_WeightSlipRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.trans_WeightSlipRowDeletingEvent) Is Nothing) Then
                RaiseEvent trans_WeightSlipRowDeleting(Me, New trans_WeightSlipRowChangeEvent(CType(e.Row,trans_WeightSlipRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Removetrans_WeightSlipRow(ByVal row As trans_WeightSlipRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As MKDBDataSet = New MKDBDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "trans_WeightSlipDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class trans_WeightSlipDetailsDataTable
        Inherits Global.System.Data.TypedTableBase(Of trans_WeightSlipDetailsRow)
        
        Private columnweightSlipDetail_ID As Global.System.Data.DataColumn
        
        Private columnweightSlip_ID As Global.System.Data.DataColumn
        
        Private columnweightSlipDetailDate As Global.System.Data.DataColumn
        
        Private columnweigslipFormNum As Global.System.Data.DataColumn
        
        Private columnbatchNum As Global.System.Data.DataColumn
        
        Private columnlotNum As Global.System.Data.DataColumn
        
        Private columnplateNum As Global.System.Data.DataColumn
        
        Private columnskipjack0_200To0_299 As Global.System.Data.DataColumn
        
        Private columnskipjack0_300To0_499 As Global.System.Data.DataColumn
        
        Private columnskipjack0_500To0_999 As Global.System.Data.DataColumn
        
        Private columnskipjack1_0To1_39 As Global.System.Data.DataColumn
        
        Private columnskipjack1_4To1_79 As Global.System.Data.DataColumn
        
        Private columnskipjack1_8To2_49 As Global.System.Data.DataColumn
        
        Private columnskipjack2_5To3_49 As Global.System.Data.DataColumn
        
        Private columnskipjack3_5AndUP As Global.System.Data.DataColumn
        
        Private columnyelllowfin0_300To0_499 As Global.System.Data.DataColumn
        
        Private columnyellowfin0_500To0_999 As Global.System.Data.DataColumn
        
        Private columnyellowfin1_0To1_49 As Global.System.Data.DataColumn
        
        Private columnyellowfin1_5To2_49 As Global.System.Data.DataColumn
        
        Private columnyellowfin2_5To3_49 As Global.System.Data.DataColumn
        
        Private columnyellowfin3_5To4_99 As Global.System.Data.DataColumn
        
        Private columnyellowfin5_0To9_99 As Global.System.Data.DataColumn
        
        Private columnyellowfin10AndUP As Global.System.Data.DataColumn
        
        Private columnbigeye0_300To0_499 As Global.System.Data.DataColumn
        
        Private columnbigeye0_500To0_999 As Global.System.Data.DataColumn
        
        Private columnbigeye1_0To1_49 As Global.System.Data.DataColumn
        
        Private columnbigeye1_5To2_49 As Global.System.Data.DataColumn
        
        Private columnbigeye2_5To3_49 As Global.System.Data.DataColumn
        
        Private columnbigeye3_5To4_99 As Global.System.Data.DataColumn
        
        Private columnbigeye5_0To9_99 As Global.System.Data.DataColumn
        
        Private columnbigeye10AndUP As Global.System.Data.DataColumn
        
        Private columnbonito0_300To0_499 As Global.System.Data.DataColumn
        
        Private columnbonito0_500AndUP As Global.System.Data.DataColumn
        
        Private columnfishmeal As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "trans_WeightSlipDetails"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property weightSlipDetail_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnweightSlipDetail_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property weightSlip_IDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnweightSlip_ID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property weightSlipDetailDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnweightSlipDetailDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property weigslipFormNumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnweigslipFormNum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property batchNumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbatchNum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property lotNumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnlotNum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property plateNumColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnplateNum
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property skipjack0_200To0_299Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnskipjack0_200To0_299
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property skipjack0_300To0_499Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnskipjack0_300To0_499
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property skipjack0_500To0_999Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnskipjack0_500To0_999
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property skipjack1_0To1_39Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnskipjack1_0To1_39
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property skipjack1_4To1_79Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnskipjack1_4To1_79
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property skipjack1_8To2_49Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnskipjack1_8To2_49
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property skipjack2_5To3_49Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnskipjack2_5To3_49
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property skipjack3_5AndUPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnskipjack3_5AndUP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property yelllowfin0_300To0_499Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnyelllowfin0_300To0_499
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property yellowfin0_500To0_999Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnyellowfin0_500To0_999
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property yellowfin1_0To1_49Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnyellowfin1_0To1_49
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property yellowfin1_5To2_49Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnyellowfin1_5To2_49
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property yellowfin2_5To3_49Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnyellowfin2_5To3_49
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property yellowfin3_5To4_99Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnyellowfin3_5To4_99
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property yellowfin5_0To9_99Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnyellowfin5_0To9_99
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property yellowfin10AndUPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnyellowfin10AndUP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property bigeye0_300To0_499Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnbigeye0_300To0_499
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property bigeye0_500To0_999Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnbigeye0_500To0_999
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property bigeye1_0To1_49Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnbigeye1_0To1_49
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property bigeye1_5To2_49Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnbigeye1_5To2_49
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property bigeye2_5To3_49Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnbigeye2_5To3_49
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property bigeye3_5To4_99Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnbigeye3_5To4_99
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property bigeye5_0To9_99Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnbigeye5_0To9_99
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property bigeye10AndUPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbigeye10AndUP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property bonito0_300To0_499Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnbonito0_300To0_499
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property bonito0_500AndUPColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnbonito0_500AndUP
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property fishmealColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnfishmeal
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As trans_WeightSlipDetailsRow
            Get
                Return CType(Me.Rows(index),trans_WeightSlipDetailsRow)
            End Get
        End Property
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event trans_WeightSlipDetailsRowChanging As trans_WeightSlipDetailsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event trans_WeightSlipDetailsRowChanged As trans_WeightSlipDetailsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event trans_WeightSlipDetailsRowDeleting As trans_WeightSlipDetailsRowChangeEventHandler
        
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Event trans_WeightSlipDetailsRowDeleted As trans_WeightSlipDetailsRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Sub Addtrans_WeightSlipDetailsRow(ByVal row As trans_WeightSlipDetailsRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overloads Function Addtrans_WeightSlipDetailsRow( _
                    ByVal weightSlip_ID As Integer,  _
                    ByVal weightSlipDetailDate As Date,  _
                    ByVal weigslipFormNum As String,  _
                    ByVal batchNum As String,  _
                    ByVal lotNum As String,  _
                    ByVal plateNum As String,  _
                    ByVal skipjack0_200To0_299 As Decimal,  _
                    ByVal skipjack0_300To0_499 As Decimal,  _
                    ByVal skipjack0_500To0_999 As Decimal,  _
                    ByVal skipjack1_0To1_39 As Decimal,  _
                    ByVal skipjack1_4To1_79 As Decimal,  _
                    ByVal skipjack1_8To2_49 As Decimal,  _
                    ByVal skipjack2_5To3_49 As Decimal,  _
                    ByVal skipjack3_5AndUP As Decimal,  _
                    ByVal yelllowfin0_300To0_499 As Decimal,  _
                    ByVal yellowfin0_500To0_999 As Decimal,  _
                    ByVal yellowfin1_0To1_49 As Decimal,  _
                    ByVal yellowfin1_5To2_49 As Decimal,  _
                    ByVal yellowfin2_5To3_49 As Decimal,  _
                    ByVal yellowfin3_5To4_99 As Decimal,  _
                    ByVal yellowfin5_0To9_99 As Decimal,  _
                    ByVal yellowfin10AndUP As Decimal,  _
                    ByVal bigeye0_300To0_499 As Decimal,  _
                    ByVal bigeye0_500To0_999 As Decimal,  _
                    ByVal bigeye1_0To1_49 As Decimal,  _
                    ByVal bigeye1_5To2_49 As Decimal,  _
                    ByVal bigeye2_5To3_49 As Decimal,  _
                    ByVal bigeye3_5To4_99 As Decimal,  _
                    ByVal bigeye5_0To9_99 As Decimal,  _
                    ByVal bigeye10AndUP As Decimal,  _
                    ByVal bonito0_300To0_499 As Decimal,  _
                    ByVal bonito0_500AndUP As Decimal,  _
                    ByVal fishmeal As Decimal) As trans_WeightSlipDetailsRow
            Dim rowtrans_WeightSlipDetailsRow As trans_WeightSlipDetailsRow = CType(Me.NewRow,trans_WeightSlipDetailsRow)
            Dim columnValuesArray() As Object = New Object() {Nothing, weightSlip_ID, weightSlipDetailDate, weigslipFormNum, batchNum, lotNum, plateNum, skipjack0_200To0_299, skipjack0_300To0_499, skipjack0_500To0_999, skipjack1_0To1_39, skipjack1_4To1_79, skipjack1_8To2_49, skipjack2_5To3_49, skipjack3_5AndUP, yelllowfin0_300To0_499, yellowfin0_500To0_999, yellowfin1_0To1_49, yellowfin1_5To2_49, yellowfin2_5To3_49, yellowfin3_5To4_99, yellowfin5_0To9_99, yellowfin10AndUP, bigeye0_300To0_499, bigeye0_500To0_999, bigeye1_0To1_49, bigeye1_5To2_49, bigeye2_5To3_49, bigeye3_5To4_99, bigeye5_0To9_99, bigeye10AndUP, bonito0_300To0_499, bonito0_500AndUP, fishmeal}
            rowtrans_WeightSlipDetailsRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowtrans_WeightSlipDetailsRow)
            Return rowtrans_WeightSlipDetailsRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function FindByweightSlipDetail_ID(ByVal weightSlipDetail_ID As Integer) As trans_WeightSlipDetailsRow
            Return CType(Me.Rows.Find(New Object() {weightSlipDetail_ID}),trans_WeightSlipDetailsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As trans_WeightSlipDetailsDataTable = CType(MyBase.Clone,trans_WeightSlipDetailsDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New trans_WeightSlipDetailsDataTable()
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub InitVars()
            Me.columnweightSlipDetail_ID = MyBase.Columns("weightSlipDetail_ID")
            Me.columnweightSlip_ID = MyBase.Columns("weightSlip_ID")
            Me.columnweightSlipDetailDate = MyBase.Columns("weightSlipDetailDate")
            Me.columnweigslipFormNum = MyBase.Columns("weigslipFormNum")
            Me.columnbatchNum = MyBase.Columns("batchNum")
            Me.columnlotNum = MyBase.Columns("lotNum")
            Me.columnplateNum = MyBase.Columns("plateNum")
            Me.columnskipjack0_200To0_299 = MyBase.Columns("skipjack0_200To0_299")
            Me.columnskipjack0_300To0_499 = MyBase.Columns("skipjack0_300To0_499")
            Me.columnskipjack0_500To0_999 = MyBase.Columns("skipjack0_500To0_999")
            Me.columnskipjack1_0To1_39 = MyBase.Columns("skipjack1_0To1_39")
            Me.columnskipjack1_4To1_79 = MyBase.Columns("skipjack1_4To1_79")
            Me.columnskipjack1_8To2_49 = MyBase.Columns("skipjack1_8To2_49")
            Me.columnskipjack2_5To3_49 = MyBase.Columns("skipjack2_5To3_49")
            Me.columnskipjack3_5AndUP = MyBase.Columns("skipjack3_5AndUP")
            Me.columnyelllowfin0_300To0_499 = MyBase.Columns("yelllowfin0_300To0_499")
            Me.columnyellowfin0_500To0_999 = MyBase.Columns("yellowfin0_500To0_999")
            Me.columnyellowfin1_0To1_49 = MyBase.Columns("yellowfin1_0To1_49")
            Me.columnyellowfin1_5To2_49 = MyBase.Columns("yellowfin1_5To2_49")
            Me.columnyellowfin2_5To3_49 = MyBase.Columns("yellowfin2_5To3_49")
            Me.columnyellowfin3_5To4_99 = MyBase.Columns("yellowfin3_5To4_99")
            Me.columnyellowfin5_0To9_99 = MyBase.Columns("yellowfin5_0To9_99")
            Me.columnyellowfin10AndUP = MyBase.Columns("yellowfin10AndUP")
            Me.columnbigeye0_300To0_499 = MyBase.Columns("bigeye0_300To0_499")
            Me.columnbigeye0_500To0_999 = MyBase.Columns("bigeye0_500To0_999")
            Me.columnbigeye1_0To1_49 = MyBase.Columns("bigeye1_0To1_49")
            Me.columnbigeye1_5To2_49 = MyBase.Columns("bigeye1_5To2_49")
            Me.columnbigeye2_5To3_49 = MyBase.Columns("bigeye2_5To3_49")
            Me.columnbigeye3_5To4_99 = MyBase.Columns("bigeye3_5To4_99")
            Me.columnbigeye5_0To9_99 = MyBase.Columns("bigeye5_0To9_99")
            Me.columnbigeye10AndUP = MyBase.Columns("bigeye10AndUP")
            Me.columnbonito0_300To0_499 = MyBase.Columns("bonito0_300To0_499")
            Me.columnbonito0_500AndUP = MyBase.Columns("bonito0_500AndUP")
            Me.columnfishmeal = MyBase.Columns("fishmeal")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitClass()
            Me.columnweightSlipDetail_ID = New Global.System.Data.DataColumn("weightSlipDetail_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnweightSlipDetail_ID)
            Me.columnweightSlip_ID = New Global.System.Data.DataColumn("weightSlip_ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnweightSlip_ID)
            Me.columnweightSlipDetailDate = New Global.System.Data.DataColumn("weightSlipDetailDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnweightSlipDetailDate)
            Me.columnweigslipFormNum = New Global.System.Data.DataColumn("weigslipFormNum", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnweigslipFormNum)
            Me.columnbatchNum = New Global.System.Data.DataColumn("batchNum", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbatchNum)
            Me.columnlotNum = New Global.System.Data.DataColumn("lotNum", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnlotNum)
            Me.columnplateNum = New Global.System.Data.DataColumn("plateNum", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnplateNum)
            Me.columnskipjack0_200To0_299 = New Global.System.Data.DataColumn("skipjack0_200To0_299", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnskipjack0_200To0_299)
            Me.columnskipjack0_300To0_499 = New Global.System.Data.DataColumn("skipjack0_300To0_499", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnskipjack0_300To0_499)
            Me.columnskipjack0_500To0_999 = New Global.System.Data.DataColumn("skipjack0_500To0_999", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnskipjack0_500To0_999)
            Me.columnskipjack1_0To1_39 = New Global.System.Data.DataColumn("skipjack1_0To1_39", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnskipjack1_0To1_39)
            Me.columnskipjack1_4To1_79 = New Global.System.Data.DataColumn("skipjack1_4To1_79", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnskipjack1_4To1_79)
            Me.columnskipjack1_8To2_49 = New Global.System.Data.DataColumn("skipjack1_8To2_49", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnskipjack1_8To2_49)
            Me.columnskipjack2_5To3_49 = New Global.System.Data.DataColumn("skipjack2_5To3_49", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnskipjack2_5To3_49)
            Me.columnskipjack3_5AndUP = New Global.System.Data.DataColumn("skipjack3_5AndUP", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnskipjack3_5AndUP)
            Me.columnyelllowfin0_300To0_499 = New Global.System.Data.DataColumn("yelllowfin0_300To0_499", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnyelllowfin0_300To0_499)
            Me.columnyellowfin0_500To0_999 = New Global.System.Data.DataColumn("yellowfin0_500To0_999", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnyellowfin0_500To0_999)
            Me.columnyellowfin1_0To1_49 = New Global.System.Data.DataColumn("yellowfin1_0To1_49", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnyellowfin1_0To1_49)
            Me.columnyellowfin1_5To2_49 = New Global.System.Data.DataColumn("yellowfin1_5To2_49", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnyellowfin1_5To2_49)
            Me.columnyellowfin2_5To3_49 = New Global.System.Data.DataColumn("yellowfin2_5To3_49", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnyellowfin2_5To3_49)
            Me.columnyellowfin3_5To4_99 = New Global.System.Data.DataColumn("yellowfin3_5To4_99", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnyellowfin3_5To4_99)
            Me.columnyellowfin5_0To9_99 = New Global.System.Data.DataColumn("yellowfin5_0To9_99", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnyellowfin5_0To9_99)
            Me.columnyellowfin10AndUP = New Global.System.Data.DataColumn("yellowfin10AndUP", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnyellowfin10AndUP)
            Me.columnbigeye0_300To0_499 = New Global.System.Data.DataColumn("bigeye0_300To0_499", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbigeye0_300To0_499)
            Me.columnbigeye0_500To0_999 = New Global.System.Data.DataColumn("bigeye0_500To0_999", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbigeye0_500To0_999)
            Me.columnbigeye1_0To1_49 = New Global.System.Data.DataColumn("bigeye1_0To1_49", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbigeye1_0To1_49)
            Me.columnbigeye1_5To2_49 = New Global.System.Data.DataColumn("bigeye1_5To2_49", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbigeye1_5To2_49)
            Me.columnbigeye2_5To3_49 = New Global.System.Data.DataColumn("bigeye2_5To3_49", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbigeye2_5To3_49)
            Me.columnbigeye3_5To4_99 = New Global.System.Data.DataColumn("bigeye3_5To4_99", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbigeye3_5To4_99)
            Me.columnbigeye5_0To9_99 = New Global.System.Data.DataColumn("bigeye5_0To9_99", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbigeye5_0To9_99)
            Me.columnbigeye10AndUP = New Global.System.Data.DataColumn("bigeye10AndUP", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbigeye10AndUP)
            Me.columnbonito0_300To0_499 = New Global.System.Data.DataColumn("bonito0_300To0_499", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbonito0_300To0_499)
            Me.columnbonito0_500AndUP = New Global.System.Data.DataColumn("bonito0_500AndUP", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnbonito0_500AndUP)
            Me.columnfishmeal = New Global.System.Data.DataColumn("fishmeal", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnfishmeal)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnweightSlipDetail_ID}, true))
            Me.columnweightSlipDetail_ID.AutoIncrement = true
            Me.columnweightSlipDetail_ID.AutoIncrementSeed = -1
            Me.columnweightSlipDetail_ID.AutoIncrementStep = -1
            Me.columnweightSlipDetail_ID.AllowDBNull = false
            Me.columnweightSlipDetail_ID.ReadOnly = true
            Me.columnweightSlipDetail_ID.Unique = true
            Me.columnweigslipFormNum.MaxLength = 20
            Me.columnbatchNum.MaxLength = 20
            Me.columnlotNum.MaxLength = 20
            Me.columnplateNum.MaxLength = 20
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Newtrans_WeightSlipDetailsRow() As trans_WeightSlipDetailsRow
            Return CType(Me.NewRow,trans_WeightSlipDetailsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New trans_WeightSlipDetailsRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(trans_WeightSlipDetailsRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.trans_WeightSlipDetailsRowChangedEvent) Is Nothing) Then
                RaiseEvent trans_WeightSlipDetailsRowChanged(Me, New trans_WeightSlipDetailsRowChangeEvent(CType(e.Row,trans_WeightSlipDetailsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.trans_WeightSlipDetailsRowChangingEvent) Is Nothing) Then
                RaiseEvent trans_WeightSlipDetailsRowChanging(Me, New trans_WeightSlipDetailsRowChangeEvent(CType(e.Row,trans_WeightSlipDetailsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.trans_WeightSlipDetailsRowDeletedEvent) Is Nothing) Then
                RaiseEvent trans_WeightSlipDetailsRowDeleted(Me, New trans_WeightSlipDetailsRowChangeEvent(CType(e.Row,trans_WeightSlipDetailsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.trans_WeightSlipDetailsRowDeletingEvent) Is Nothing) Then
                RaiseEvent trans_WeightSlipDetailsRowDeleting(Me, New trans_WeightSlipDetailsRowChangeEvent(CType(e.Row,trans_WeightSlipDetailsRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Removetrans_WeightSlipDetailsRow(ByVal row As trans_WeightSlipDetailsRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType()
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence()
            Dim ds As MKDBDataSet = New MKDBDataSet()
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny()
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute()
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "trans_WeightSlipDetailsDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream()
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class trans_CatchActivitiesRow
        Inherits Global.System.Data.DataRow
        
        Private tabletrans_CatchActivities As trans_CatchActivitiesDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletrans_CatchActivities = CType(Me.Table,trans_CatchActivitiesDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property catchActivity_ID() As Integer
            Get
                Return CType(Me(Me.tabletrans_CatchActivities.catchActivity_IDColumn),Integer)
            End Get
            Set
                Me(Me.tabletrans_CatchActivities.catchActivity_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property catchDate() As Date
            Get
                Return CType(Me(Me.tabletrans_CatchActivities.catchDateColumn),Date)
            End Get
            Set
                Me(Me.tabletrans_CatchActivities.catchDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property method_ID() As Integer
            Get
                Return CType(Me(Me.tabletrans_CatchActivities.method_IDColumn),Integer)
            End Get
            Set
                Me(Me.tabletrans_CatchActivities.method_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property longitude() As Decimal
            Get
                Return CType(Me(Me.tabletrans_CatchActivities.longitudeColumn),Decimal)
            End Get
            Set
                Me(Me.tabletrans_CatchActivities.longitudeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property latitude() As Decimal
            Get
                Return CType(Me(Me.tabletrans_CatchActivities.latitudeColumn),Decimal)
            End Get
            Set
                Me(Me.tabletrans_CatchActivities.latitudeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property catchReferenceNum() As String
            Get
                Return CType(Me(Me.tabletrans_CatchActivities.catchReferenceNumColumn),String)
            End Get
            Set
                Me(Me.tabletrans_CatchActivities.catchReferenceNumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property approvalStatus() As Integer
            Get
                Return CType(Me(Me.tabletrans_CatchActivities.approvalStatusColumn),Integer)
            End Get
            Set
                Me(Me.tabletrans_CatchActivities.approvalStatusColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class trans_CatchActivityDetailsRow
        Inherits Global.System.Data.DataRow
        
        Private tabletrans_CatchActivityDetails As trans_CatchActivityDetailsDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletrans_CatchActivityDetails = CType(Me.Table,trans_CatchActivityDetailsDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property catchActivityDetail_ID() As Integer
            Get
                Return CType(Me(Me.tabletrans_CatchActivityDetails.catchActivityDetail_IDColumn),Integer)
            End Get
            Set
                Me(Me.tabletrans_CatchActivityDetails.catchActivityDetail_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property catchActivity_ID() As Integer
            Get
                Return CType(Me(Me.tabletrans_CatchActivityDetails.catchActivity_IDColumn),Integer)
            End Get
            Set
                Me(Me.tabletrans_CatchActivityDetails.catchActivity_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property vessel_ID() As Integer
            Get
                Return CType(Me(Me.tabletrans_CatchActivityDetails.vessel_IDColumn),Integer)
            End Get
            Set
                Me(Me.tabletrans_CatchActivityDetails.vessel_IDColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class trans_CatchMethodRow
        Inherits Global.System.Data.DataRow
        
        Private tabletrans_CatchMethod As trans_CatchMethodDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletrans_CatchMethod = CType(Me.Table,trans_CatchMethodDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property catchMethod_ID() As Integer
            Get
                Return CType(Me(Me.tabletrans_CatchMethod.catchMethod_IDColumn),Integer)
            End Get
            Set
                Me(Me.tabletrans_CatchMethod.catchMethod_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property catchMethod() As String
            Get
                Return CType(Me(Me.tabletrans_CatchMethod.catchMethodColumn),String)
            End Get
            Set
                Me(Me.tabletrans_CatchMethod.catchMethodColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property active() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tabletrans_CatchMethod.activeColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'active' in table 'trans_CatchMethod' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletrans_CatchMethod.activeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property modifiedDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tabletrans_CatchMethod.modifiedDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'modifiedDate' in table 'trans_CatchMethod' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletrans_CatchMethod.modifiedDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property modifiedBy() As Date
            Get
                Try 
                    Return CType(Me(Me.tabletrans_CatchMethod.modifiedByColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'modifiedBy' in table 'trans_CatchMethod' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletrans_CatchMethod.modifiedByColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsactiveNull() As Boolean
            Return Me.IsNull(Me.tabletrans_CatchMethod.activeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetactiveNull()
            Me(Me.tabletrans_CatchMethod.activeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsmodifiedDateNull() As Boolean
            Return Me.IsNull(Me.tabletrans_CatchMethod.modifiedDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetmodifiedDateNull()
            Me(Me.tabletrans_CatchMethod.modifiedDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsmodifiedByNull() As Boolean
            Return Me.IsNull(Me.tabletrans_CatchMethod.modifiedByColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetmodifiedByNull()
            Me(Me.tabletrans_CatchMethod.modifiedByColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class trans_SalesReportRow
        Inherits Global.System.Data.DataRow
        
        Private tabletrans_SalesReport As trans_SalesReportDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletrans_SalesReport = CType(Me.Table,trans_SalesReportDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property salesReport_ID() As Integer
            Get
                Return CType(Me(Me.tabletrans_SalesReport.salesReport_IDColumn),Integer)
            End Get
            Set
                Me(Me.tabletrans_SalesReport.salesReport_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property invoiceNum() As String
            Get
                Try 
                    Return CType(Me(Me.tabletrans_SalesReport.invoiceNumColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'invoiceNum' in table 'trans_SalesReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletrans_SalesReport.invoiceNumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property referenceNum() As String
            Get
                Return CType(Me(Me.tabletrans_SalesReport.referenceNumColumn),String)
            End Get
            Set
                Me(Me.tabletrans_SalesReport.referenceNumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property salesDate() As Date
            Get
                Return CType(Me(Me.tabletrans_SalesReport.salesDateColumn),Date)
            End Get
            Set
                Me(Me.tabletrans_SalesReport.salesDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property salesNum() As String
            Get
                Return CType(Me(Me.tabletrans_SalesReport.salesNumColumn),String)
            End Get
            Set
                Me(Me.tabletrans_SalesReport.salesNumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property sellingType() As String
            Get
                Return CType(Me(Me.tabletrans_SalesReport.sellingTypeColumn),String)
            End Get
            Set
                Me(Me.tabletrans_SalesReport.sellingTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property unloadingType() As String
            Get
                Return CType(Me(Me.tabletrans_SalesReport.unloadingTypeColumn),String)
            End Get
            Set
                Me(Me.tabletrans_SalesReport.unloadingTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property unloadingVessel_ID() As String
            Get
                Try 
                    Return CType(Me(Me.tabletrans_SalesReport.unloadingVessel_IDColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'unloadingVessel_ID' in table 'trans_SalesReport' is DBNull."& _ 
                            "", e)
                End Try
            End Get
            Set
                Me(Me.tabletrans_SalesReport.unloadingVessel_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property unloadingForeignVessel() As String
            Get
                Try 
                    Return CType(Me(Me.tabletrans_SalesReport.unloadingForeignVesselColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'unloadingForeignVessel' in table 'trans_SalesReport' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletrans_SalesReport.unloadingForeignVesselColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property buyer() As String
            Get
                Return CType(Me(Me.tabletrans_SalesReport.buyerColumn),String)
            End Get
            Set
                Me(Me.tabletrans_SalesReport.buyerColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property catchtDeliveryNum() As String
            Get
                Return CType(Me(Me.tabletrans_SalesReport.catchtDeliveryNumColumn),String)
            End Get
            Set
                Me(Me.tabletrans_SalesReport.catchtDeliveryNumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property usdRate() As Decimal
            Get
                Return CType(Me(Me.tabletrans_SalesReport.usdRateColumn),Decimal)
            End Get
            Set
                Me(Me.tabletrans_SalesReport.usdRateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property contractNum() As String
            Get
                Return CType(Me(Me.tabletrans_SalesReport.contractNumColumn),String)
            End Get
            Set
                Me(Me.tabletrans_SalesReport.contractNumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property remarks() As String
            Get
                Try 
                    Return CType(Me(Me.tabletrans_SalesReport.remarksColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'remarks' in table 'trans_SalesReport' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletrans_SalesReport.remarksColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property encodedBy() As Integer
            Get
                Return CType(Me(Me.tabletrans_SalesReport.encodedByColumn),Integer)
            End Get
            Set
                Me(Me.tabletrans_SalesReport.encodedByColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property encodedOn() As Date
            Get
                Return CType(Me(Me.tabletrans_SalesReport.encodedOnColumn),Date)
            End Get
            Set
                Me(Me.tabletrans_SalesReport.encodedOnColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property approvalStatus() As Integer
            Get
                Return CType(Me(Me.tabletrans_SalesReport.approvalStatusColumn),Integer)
            End Get
            Set
                Me(Me.tabletrans_SalesReport.approvalStatusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsinvoiceNumNull() As Boolean
            Return Me.IsNull(Me.tabletrans_SalesReport.invoiceNumColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetinvoiceNumNull()
            Me(Me.tabletrans_SalesReport.invoiceNumColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsunloadingVessel_IDNull() As Boolean
            Return Me.IsNull(Me.tabletrans_SalesReport.unloadingVessel_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetunloadingVessel_IDNull()
            Me(Me.tabletrans_SalesReport.unloadingVessel_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsunloadingForeignVesselNull() As Boolean
            Return Me.IsNull(Me.tabletrans_SalesReport.unloadingForeignVesselColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetunloadingForeignVesselNull()
            Me(Me.tabletrans_SalesReport.unloadingForeignVesselColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsremarksNull() As Boolean
            Return Me.IsNull(Me.tabletrans_SalesReport.remarksColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetremarksNull()
            Me(Me.tabletrans_SalesReport.remarksColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class trans_SalesReportCatcherRow
        Inherits Global.System.Data.DataRow
        
        Private tabletrans_SalesReportCatcher As trans_SalesReportCatcherDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletrans_SalesReportCatcher = CType(Me.Table,trans_SalesReportCatcherDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property salesReportCatcher_ID() As Integer
            Get
                Return CType(Me(Me.tabletrans_SalesReportCatcher.salesReportCatcher_IDColumn),Integer)
            End Get
            Set
                Me(Me.tabletrans_SalesReportCatcher.salesReportCatcher_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property salesReport_ID() As Integer
            Get
                Return CType(Me(Me.tabletrans_SalesReportCatcher.salesReport_IDColumn),Integer)
            End Get
            Set
                Me(Me.tabletrans_SalesReportCatcher.salesReport_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property catchActivityDetail_ID() As Integer
            Get
                Return CType(Me(Me.tabletrans_SalesReportCatcher.catchActivityDetail_IDColumn),Integer)
            End Get
            Set
                Me(Me.tabletrans_SalesReportCatcher.catchActivityDetail_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property skipjack0_300To0_499() As Decimal
            Get
                Return CType(Me(Me.tabletrans_SalesReportCatcher.skipjack0_300To0_499Column),Decimal)
            End Get
            Set
                Me(Me.tabletrans_SalesReportCatcher.skipjack0_300To0_499Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property skipjack0_500To0_999() As Decimal
            Get
                Return CType(Me(Me.tabletrans_SalesReportCatcher.skipjack0_500To0_999Column),Decimal)
            End Get
            Set
                Me(Me.tabletrans_SalesReportCatcher.skipjack0_500To0_999Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property skipjack1_0To1_39() As Decimal
            Get
                Return CType(Me(Me.tabletrans_SalesReportCatcher.skipjack1_0To1_39Column),Decimal)
            End Get
            Set
                Me(Me.tabletrans_SalesReportCatcher.skipjack1_0To1_39Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property skipjack1_4To1_79() As Decimal
            Get
                Return CType(Me(Me.tabletrans_SalesReportCatcher.skipjack1_4To1_79Column),Decimal)
            End Get
            Set
                Me(Me.tabletrans_SalesReportCatcher.skipjack1_4To1_79Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property skipjack1_8To2_49() As Decimal
            Get
                Return CType(Me(Me.tabletrans_SalesReportCatcher.skipjack1_8To2_49Column),Decimal)
            End Get
            Set
                Me(Me.tabletrans_SalesReportCatcher.skipjack1_8To2_49Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property skipjack2_5To3_49() As Decimal
            Get
                Return CType(Me(Me.tabletrans_SalesReportCatcher.skipjack2_5To3_49Column),Decimal)
            End Get
            Set
                Me(Me.tabletrans_SalesReportCatcher.skipjack2_5To3_49Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property skipjack3_5AndUP() As Decimal
            Get
                Return CType(Me(Me.tabletrans_SalesReportCatcher.skipjack3_5AndUPColumn),Decimal)
            End Get
            Set
                Me(Me.tabletrans_SalesReportCatcher.skipjack3_5AndUPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property yellowfin0_300To0_499() As Decimal
            Get
                Return CType(Me(Me.tabletrans_SalesReportCatcher.yellowfin0_300To0_499Column),Decimal)
            End Get
            Set
                Me(Me.tabletrans_SalesReportCatcher.yellowfin0_300To0_499Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property yellowfin0_500To0_999() As Decimal
            Get
                Return CType(Me(Me.tabletrans_SalesReportCatcher.yellowfin0_500To0_999Column),Decimal)
            End Get
            Set
                Me(Me.tabletrans_SalesReportCatcher.yellowfin0_500To0_999Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property yellowfin1_0To1_49() As Decimal
            Get
                Return CType(Me(Me.tabletrans_SalesReportCatcher.yellowfin1_0To1_49Column),Decimal)
            End Get
            Set
                Me(Me.tabletrans_SalesReportCatcher.yellowfin1_0To1_49Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property yellowfin1_5To2_49() As Decimal
            Get
                Return CType(Me(Me.tabletrans_SalesReportCatcher.yellowfin1_5To2_49Column),Decimal)
            End Get
            Set
                Me(Me.tabletrans_SalesReportCatcher.yellowfin1_5To2_49Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property yellowfin2_5To3_49() As Decimal
            Get
                Return CType(Me(Me.tabletrans_SalesReportCatcher.yellowfin2_5To3_49Column),Decimal)
            End Get
            Set
                Me(Me.tabletrans_SalesReportCatcher.yellowfin2_5To3_49Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property yellowfin3_5To4_99() As Decimal
            Get
                Return CType(Me(Me.tabletrans_SalesReportCatcher.yellowfin3_5To4_99Column),Decimal)
            End Get
            Set
                Me(Me.tabletrans_SalesReportCatcher.yellowfin3_5To4_99Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property yellowfin5_0To9_99() As Decimal
            Get
                Return CType(Me(Me.tabletrans_SalesReportCatcher.yellowfin5_0To9_99Column),Decimal)
            End Get
            Set
                Me(Me.tabletrans_SalesReportCatcher.yellowfin5_0To9_99Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property yellowfin10AndUpGood() As Decimal
            Get
                Return CType(Me(Me.tabletrans_SalesReportCatcher.yellowfin10AndUpGoodColumn),Decimal)
            End Get
            Set
                Me(Me.tabletrans_SalesReportCatcher.yellowfin10AndUpGoodColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property yellowfin10AndUpDeformed() As Decimal
            Get
                Return CType(Me(Me.tabletrans_SalesReportCatcher.yellowfin10AndUpDeformedColumn),Decimal)
            End Get
            Set
                Me(Me.tabletrans_SalesReportCatcher.yellowfin10AndUpDeformedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property bigeye0_500To0_999() As Decimal
            Get
                Return CType(Me(Me.tabletrans_SalesReportCatcher.bigeye0_500To0_999Column),Decimal)
            End Get
            Set
                Me(Me.tabletrans_SalesReportCatcher.bigeye0_500To0_999Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property bigeye1_0To1_49() As Decimal
            Get
                Return CType(Me(Me.tabletrans_SalesReportCatcher.bigeye1_0To1_49Column),Decimal)
            End Get
            Set
                Me(Me.tabletrans_SalesReportCatcher.bigeye1_0To1_49Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property bigeye1_5To2_49() As Decimal
            Get
                Return CType(Me(Me.tabletrans_SalesReportCatcher.bigeye1_5To2_49Column),Decimal)
            End Get
            Set
                Me(Me.tabletrans_SalesReportCatcher.bigeye1_5To2_49Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property bigeye2_5To3_49() As Decimal
            Get
                Return CType(Me(Me.tabletrans_SalesReportCatcher.bigeye2_5To3_49Column),Decimal)
            End Get
            Set
                Me(Me.tabletrans_SalesReportCatcher.bigeye2_5To3_49Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property bigeye3_5To4_99() As Decimal
            Get
                Return CType(Me(Me.tabletrans_SalesReportCatcher.bigeye3_5To4_99Column),Decimal)
            End Get
            Set
                Me(Me.tabletrans_SalesReportCatcher.bigeye3_5To4_99Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property bigeye5_0To9_99() As Decimal
            Get
                Return CType(Me(Me.tabletrans_SalesReportCatcher.bigeye5_0To9_99Column),Decimal)
            End Get
            Set
                Me(Me.tabletrans_SalesReportCatcher.bigeye5_0To9_99Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property bigeye10AndUP() As Decimal
            Get
                Return CType(Me(Me.tabletrans_SalesReportCatcher.bigeye10AndUPColumn),Decimal)
            End Get
            Set
                Me(Me.tabletrans_SalesReportCatcher.bigeye10AndUPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property bonito() As Decimal
            Get
                Return CType(Me(Me.tabletrans_SalesReportCatcher.bonitoColumn),Decimal)
            End Get
            Set
                Me(Me.tabletrans_SalesReportCatcher.bonitoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property fishmeal() As Decimal
            Get
                Return CType(Me(Me.tabletrans_SalesReportCatcher.fishmealColumn),Decimal)
            End Get
            Set
                Me(Me.tabletrans_SalesReportCatcher.fishmealColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class trans_SalesReportPriceRow
        Inherits Global.System.Data.DataRow
        
        Private tabletrans_SalesReportPrice As trans_SalesReportPriceDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletrans_SalesReportPrice = CType(Me.Table,trans_SalesReportPriceDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property salesReportPrice_ID() As Integer
            Get
                Return CType(Me(Me.tabletrans_SalesReportPrice.salesReportPrice_IDColumn),Integer)
            End Get
            Set
                Me(Me.tabletrans_SalesReportPrice.salesReportPrice_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property salesReport_ID() As Integer
            Get
                Return CType(Me(Me.tabletrans_SalesReportPrice.salesReport_IDColumn),Integer)
            End Get
            Set
                Me(Me.tabletrans_SalesReportPrice.salesReport_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property skipjack0_300To0_499() As Decimal
            Get
                Return CType(Me(Me.tabletrans_SalesReportPrice.skipjack0_300To0_499Column),Decimal)
            End Get
            Set
                Me(Me.tabletrans_SalesReportPrice.skipjack0_300To0_499Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property skipjack0_500To0_999() As Decimal
            Get
                Return CType(Me(Me.tabletrans_SalesReportPrice.skipjack0_500To0_999Column),Decimal)
            End Get
            Set
                Me(Me.tabletrans_SalesReportPrice.skipjack0_500To0_999Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property _skipjack1_0To1_39() As Decimal
            Get
                Return CType(Me(Me.tabletrans_SalesReportPrice._skipjack1_0To1_39Column),Decimal)
            End Get
            Set
                Me(Me.tabletrans_SalesReportPrice._skipjack1_0To1_39Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property skipjack1_4To1_79() As Decimal
            Get
                Return CType(Me(Me.tabletrans_SalesReportPrice.skipjack1_4To1_79Column),Decimal)
            End Get
            Set
                Me(Me.tabletrans_SalesReportPrice.skipjack1_4To1_79Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property skipjack1_8To2_49() As Decimal
            Get
                Return CType(Me(Me.tabletrans_SalesReportPrice.skipjack1_8To2_49Column),Decimal)
            End Get
            Set
                Me(Me.tabletrans_SalesReportPrice.skipjack1_8To2_49Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property skipjack2_5To3_49() As Decimal
            Get
                Return CType(Me(Me.tabletrans_SalesReportPrice.skipjack2_5To3_49Column),Decimal)
            End Get
            Set
                Me(Me.tabletrans_SalesReportPrice.skipjack2_5To3_49Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property skipjack3_5AndUP() As Decimal
            Get
                Return CType(Me(Me.tabletrans_SalesReportPrice.skipjack3_5AndUPColumn),Decimal)
            End Get
            Set
                Me(Me.tabletrans_SalesReportPrice.skipjack3_5AndUPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property yellowfin0_300To0_499() As Decimal
            Get
                Return CType(Me(Me.tabletrans_SalesReportPrice.yellowfin0_300To0_499Column),Decimal)
            End Get
            Set
                Me(Me.tabletrans_SalesReportPrice.yellowfin0_300To0_499Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property yellowfin0_500To0_999() As Decimal
            Get
                Return CType(Me(Me.tabletrans_SalesReportPrice.yellowfin0_500To0_999Column),Decimal)
            End Get
            Set
                Me(Me.tabletrans_SalesReportPrice.yellowfin0_500To0_999Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property yellowfin1_0To1_49() As Decimal
            Get
                Return CType(Me(Me.tabletrans_SalesReportPrice.yellowfin1_0To1_49Column),Decimal)
            End Get
            Set
                Me(Me.tabletrans_SalesReportPrice.yellowfin1_0To1_49Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property yellowfin1_5To2_49() As Decimal
            Get
                Return CType(Me(Me.tabletrans_SalesReportPrice.yellowfin1_5To2_49Column),Decimal)
            End Get
            Set
                Me(Me.tabletrans_SalesReportPrice.yellowfin1_5To2_49Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property yellowfin2_5To3_49() As Decimal
            Get
                Return CType(Me(Me.tabletrans_SalesReportPrice.yellowfin2_5To3_49Column),Decimal)
            End Get
            Set
                Me(Me.tabletrans_SalesReportPrice.yellowfin2_5To3_49Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property yellowfin3_5To4_99() As Decimal
            Get
                Return CType(Me(Me.tabletrans_SalesReportPrice.yellowfin3_5To4_99Column),Decimal)
            End Get
            Set
                Me(Me.tabletrans_SalesReportPrice.yellowfin3_5To4_99Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property yellowfin5_0To9_99() As Decimal
            Get
                Return CType(Me(Me.tabletrans_SalesReportPrice.yellowfin5_0To9_99Column),Decimal)
            End Get
            Set
                Me(Me.tabletrans_SalesReportPrice.yellowfin5_0To9_99Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property yellowfin10AndUpGood() As Decimal
            Get
                Return CType(Me(Me.tabletrans_SalesReportPrice.yellowfin10AndUpGoodColumn),Decimal)
            End Get
            Set
                Me(Me.tabletrans_SalesReportPrice.yellowfin10AndUpGoodColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property yellowfin10AndUpDeformed() As Decimal
            Get
                Return CType(Me(Me.tabletrans_SalesReportPrice.yellowfin10AndUpDeformedColumn),Decimal)
            End Get
            Set
                Me(Me.tabletrans_SalesReportPrice.yellowfin10AndUpDeformedColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property bigeye0_500To0_999() As Decimal
            Get
                Return CType(Me(Me.tabletrans_SalesReportPrice.bigeye0_500To0_999Column),Decimal)
            End Get
            Set
                Me(Me.tabletrans_SalesReportPrice.bigeye0_500To0_999Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property bigeye1_0To1_49() As Decimal
            Get
                Return CType(Me(Me.tabletrans_SalesReportPrice.bigeye1_0To1_49Column),Decimal)
            End Get
            Set
                Me(Me.tabletrans_SalesReportPrice.bigeye1_0To1_49Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property bigeye1_5To2_49() As Decimal
            Get
                Return CType(Me(Me.tabletrans_SalesReportPrice.bigeye1_5To2_49Column),Decimal)
            End Get
            Set
                Me(Me.tabletrans_SalesReportPrice.bigeye1_5To2_49Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property bigeye2_5To3_49() As Decimal
            Get
                Return CType(Me(Me.tabletrans_SalesReportPrice.bigeye2_5To3_49Column),Decimal)
            End Get
            Set
                Me(Me.tabletrans_SalesReportPrice.bigeye2_5To3_49Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property bigeye3_5To4_99() As Decimal
            Get
                Return CType(Me(Me.tabletrans_SalesReportPrice.bigeye3_5To4_99Column),Decimal)
            End Get
            Set
                Me(Me.tabletrans_SalesReportPrice.bigeye3_5To4_99Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property bigeye5_0To9_99() As Decimal
            Get
                Return CType(Me(Me.tabletrans_SalesReportPrice.bigeye5_0To9_99Column),Decimal)
            End Get
            Set
                Me(Me.tabletrans_SalesReportPrice.bigeye5_0To9_99Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property bigeye10AndUP() As Decimal
            Get
                Return CType(Me(Me.tabletrans_SalesReportPrice.bigeye10AndUPColumn),Decimal)
            End Get
            Set
                Me(Me.tabletrans_SalesReportPrice.bigeye10AndUPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property bonito() As Decimal
            Get
                Return CType(Me(Me.tabletrans_SalesReportPrice.bonitoColumn),Decimal)
            End Get
            Set
                Me(Me.tabletrans_SalesReportPrice.bonitoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property fishmeal() As Decimal
            Get
                Return CType(Me(Me.tabletrans_SalesReportPrice.fishmealColumn),Decimal)
            End Get
            Set
                Me(Me.tabletrans_SalesReportPrice.fishmealColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class trans_SalesReportSummaryRow
        Inherits Global.System.Data.DataRow
        
        Private tabletrans_SalesReportSummary As trans_SalesReportSummaryDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletrans_SalesReportSummary = CType(Me.Table,trans_SalesReportSummaryDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property salesReportSummary_ID() As Integer
            Get
                Return CType(Me(Me.tabletrans_SalesReportSummary.salesReportSummary_IDColumn),Integer)
            End Get
            Set
                Me(Me.tabletrans_SalesReportSummary.salesReportSummary_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property salesReport_ID() As Integer
            Get
                Return CType(Me(Me.tabletrans_SalesReportSummary.salesReport_IDColumn),Integer)
            End Get
            Set
                Me(Me.tabletrans_SalesReportSummary.salesReport_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property vessel_ID() As Integer
            Get
                Return CType(Me(Me.tabletrans_SalesReportSummary.vessel_IDColumn),Integer)
            End Get
            Set
                Me(Me.tabletrans_SalesReportSummary.vessel_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property catchersPartialQty() As Decimal
            Get
                Return CType(Me(Me.tabletrans_SalesReportSummary.catchersPartialQtyColumn),Decimal)
            End Get
            Set
                Me(Me.tabletrans_SalesReportSummary.catchersPartialQtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property catchersPartialUnloadedQty() As Decimal
            Get
                Return CType(Me(Me.tabletrans_SalesReportSummary.catchersPartialUnloadedQtyColumn),Decimal)
            End Get
            Set
                Me(Me.tabletrans_SalesReportSummary.catchersPartialUnloadedQtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property catchersActualUnloadedQty() As Decimal
            Get
                Return CType(Me(Me.tabletrans_SalesReportSummary.catchersActualUnloadedQtyColumn),Decimal)
            End Get
            Set
                Me(Me.tabletrans_SalesReportSummary.catchersActualUnloadedQtyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property actualQtyInKilos() As Decimal
            Get
                Return CType(Me(Me.tabletrans_SalesReportSummary.actualQtyInKilosColumn),Decimal)
            End Get
            Set
                Me(Me.tabletrans_SalesReportSummary.actualQtyInKilosColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property fishmealInKilos() As Decimal
            Get
                Return CType(Me(Me.tabletrans_SalesReportSummary.fishmealInKilosColumn),Decimal)
            End Get
            Set
                Me(Me.tabletrans_SalesReportSummary.fishmealInKilosColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property spoilageInKilos() As Decimal
            Get
                Return CType(Me(Me.tabletrans_SalesReportSummary.spoilageInKilosColumn),Decimal)
            End Get
            Set
                Me(Me.tabletrans_SalesReportSummary.spoilageInKilosColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property actualQtyInAmount() As Decimal
            Get
                Return CType(Me(Me.tabletrans_SalesReportSummary.actualQtyInAmountColumn),Decimal)
            End Get
            Set
                Me(Me.tabletrans_SalesReportSummary.actualQtyInAmountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property fishmealInAmount() As Decimal
            Get
                Return CType(Me(Me.tabletrans_SalesReportSummary.fishmealInAmountColumn),Decimal)
            End Get
            Set
                Me(Me.tabletrans_SalesReportSummary.fishmealInAmountColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property spoilageInAmount() As Decimal
            Get
                Return CType(Me(Me.tabletrans_SalesReportSummary.spoilageInAmountColumn),Decimal)
            End Get
            Set
                Me(Me.tabletrans_SalesReportSummary.spoilageInAmountColumn) = value
            End Set
        End Property
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class trans_SalesReportWeightSlipsRow
        Inherits Global.System.Data.DataRow
        
        Private tabletrans_SalesReportWeightSlips As trans_SalesReportWeightSlipsDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletrans_SalesReportWeightSlips = CType(Me.Table,trans_SalesReportWeightSlipsDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property salesReportWeightSlip_ID() As Integer
            Get
                Return CType(Me(Me.tabletrans_SalesReportWeightSlips.salesReportWeightSlip_IDColumn),Integer)
            End Get
            Set
                Me(Me.tabletrans_SalesReportWeightSlips.salesReportWeightSlip_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property salesReport_ID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletrans_SalesReportWeightSlips.salesReport_IDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'salesReport_ID' in table 'trans_SalesReportWeightSlips' is "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletrans_SalesReportWeightSlips.salesReport_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property weightSlipDetail_ID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletrans_SalesReportWeightSlips.weightSlipDetail_IDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'weightSlipDetail_ID' in table 'trans_SalesReportWeightSlips"& _ 
                            "' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletrans_SalesReportWeightSlips.weightSlipDetail_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IssalesReport_IDNull() As Boolean
            Return Me.IsNull(Me.tabletrans_SalesReportWeightSlips.salesReport_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetsalesReport_IDNull()
            Me(Me.tabletrans_SalesReportWeightSlips.salesReport_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsweightSlipDetail_IDNull() As Boolean
            Return Me.IsNull(Me.tabletrans_SalesReportWeightSlips.weightSlipDetail_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetweightSlipDetail_IDNull()
            Me(Me.tabletrans_SalesReportWeightSlips.weightSlipDetail_IDColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class trans_WeightSlipRow
        Inherits Global.System.Data.DataRow
        
        Private tabletrans_WeightSlip As trans_WeightSlipDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletrans_WeightSlip = CType(Me.Table,trans_WeightSlipDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property weightSlip_ID() As Integer
            Get
                Return CType(Me(Me.tabletrans_WeightSlip.weightSlip_IDColumn),Integer)
            End Get
            Set
                Me(Me.tabletrans_WeightSlip.weightSlip_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property weightSlipDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tabletrans_WeightSlip.weightSlipDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'weightSlipDate' in table 'trans_WeightSlip' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletrans_WeightSlip.weightSlipDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property fishWeightSlipNum() As String
            Get
                Try 
                    Return CType(Me(Me.tabletrans_WeightSlip.fishWeightSlipNumColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'fishWeightSlipNum' in table 'trans_WeightSlip' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletrans_WeightSlip.fishWeightSlipNumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property sellingType() As String
            Get
                Try 
                    Return CType(Me(Me.tabletrans_WeightSlip.sellingTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'sellingType' in table 'trans_WeightSlip' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletrans_WeightSlip.sellingTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property buyer() As String
            Get
                Try 
                    Return CType(Me(Me.tabletrans_WeightSlip.buyerColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'buyer' in table 'trans_WeightSlip' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletrans_WeightSlip.buyerColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property unloadingType() As String
            Get
                Try 
                    Return CType(Me(Me.tabletrans_WeightSlip.unloadingTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'unloadingType' in table 'trans_WeightSlip' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletrans_WeightSlip.unloadingTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property unloadingVessel_ID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletrans_WeightSlip.unloadingVessel_IDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'unloadingVessel_ID' in table 'trans_WeightSlip' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletrans_WeightSlip.unloadingVessel_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property unloadingForeignVessel() As String
            Get
                Try 
                    Return CType(Me(Me.tabletrans_WeightSlip.unloadingForeignVesselColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'unloadingForeignVessel' in table 'trans_WeightSlip' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tabletrans_WeightSlip.unloadingForeignVesselColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property catcherVessel_ID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletrans_WeightSlip.catcherVessel_IDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'catcherVessel_ID' in table 'trans_WeightSlip' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletrans_WeightSlip.catcherVessel_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property companyChecker_ID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletrans_WeightSlip.companyChecker_IDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'companyChecker_ID' in table 'trans_WeightSlip' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletrans_WeightSlip.companyChecker_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property buyersChecker() As String
            Get
                Try 
                    Return CType(Me(Me.tabletrans_WeightSlip.buyersCheckerColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'buyersChecker' in table 'trans_WeightSlip' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletrans_WeightSlip.buyersCheckerColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property contractNum() As String
            Get
                Try 
                    Return CType(Me(Me.tabletrans_WeightSlip.contractNumColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'contractNum' in table 'trans_WeightSlip' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletrans_WeightSlip.contractNumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property remarks() As String
            Get
                Try 
                    Return CType(Me(Me.tabletrans_WeightSlip.remarksColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'remarks' in table 'trans_WeightSlip' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletrans_WeightSlip.remarksColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property encodedBy() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletrans_WeightSlip.encodedByColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'encodedBy' in table 'trans_WeightSlip' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletrans_WeightSlip.encodedByColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property encodedOn() As Date
            Get
                Try 
                    Return CType(Me(Me.tabletrans_WeightSlip.encodedOnColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'encodedOn' in table 'trans_WeightSlip' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletrans_WeightSlip.encodedOnColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsweightSlipDateNull() As Boolean
            Return Me.IsNull(Me.tabletrans_WeightSlip.weightSlipDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetweightSlipDateNull()
            Me(Me.tabletrans_WeightSlip.weightSlipDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsfishWeightSlipNumNull() As Boolean
            Return Me.IsNull(Me.tabletrans_WeightSlip.fishWeightSlipNumColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetfishWeightSlipNumNull()
            Me(Me.tabletrans_WeightSlip.fishWeightSlipNumColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IssellingTypeNull() As Boolean
            Return Me.IsNull(Me.tabletrans_WeightSlip.sellingTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetsellingTypeNull()
            Me(Me.tabletrans_WeightSlip.sellingTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsbuyerNull() As Boolean
            Return Me.IsNull(Me.tabletrans_WeightSlip.buyerColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetbuyerNull()
            Me(Me.tabletrans_WeightSlip.buyerColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsunloadingTypeNull() As Boolean
            Return Me.IsNull(Me.tabletrans_WeightSlip.unloadingTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetunloadingTypeNull()
            Me(Me.tabletrans_WeightSlip.unloadingTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsunloadingVessel_IDNull() As Boolean
            Return Me.IsNull(Me.tabletrans_WeightSlip.unloadingVessel_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetunloadingVessel_IDNull()
            Me(Me.tabletrans_WeightSlip.unloadingVessel_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsunloadingForeignVesselNull() As Boolean
            Return Me.IsNull(Me.tabletrans_WeightSlip.unloadingForeignVesselColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetunloadingForeignVesselNull()
            Me(Me.tabletrans_WeightSlip.unloadingForeignVesselColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IscatcherVessel_IDNull() As Boolean
            Return Me.IsNull(Me.tabletrans_WeightSlip.catcherVessel_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetcatcherVessel_IDNull()
            Me(Me.tabletrans_WeightSlip.catcherVessel_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IscompanyChecker_IDNull() As Boolean
            Return Me.IsNull(Me.tabletrans_WeightSlip.companyChecker_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetcompanyChecker_IDNull()
            Me(Me.tabletrans_WeightSlip.companyChecker_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsbuyersCheckerNull() As Boolean
            Return Me.IsNull(Me.tabletrans_WeightSlip.buyersCheckerColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetbuyersCheckerNull()
            Me(Me.tabletrans_WeightSlip.buyersCheckerColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IscontractNumNull() As Boolean
            Return Me.IsNull(Me.tabletrans_WeightSlip.contractNumColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetcontractNumNull()
            Me(Me.tabletrans_WeightSlip.contractNumColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsremarksNull() As Boolean
            Return Me.IsNull(Me.tabletrans_WeightSlip.remarksColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetremarksNull()
            Me(Me.tabletrans_WeightSlip.remarksColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsencodedByNull() As Boolean
            Return Me.IsNull(Me.tabletrans_WeightSlip.encodedByColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetencodedByNull()
            Me(Me.tabletrans_WeightSlip.encodedByColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsencodedOnNull() As Boolean
            Return Me.IsNull(Me.tabletrans_WeightSlip.encodedOnColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetencodedOnNull()
            Me(Me.tabletrans_WeightSlip.encodedOnColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    Partial Public Class trans_WeightSlipDetailsRow
        Inherits Global.System.Data.DataRow
        
        Private tabletrans_WeightSlipDetails As trans_WeightSlipDetailsDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tabletrans_WeightSlipDetails = CType(Me.Table,trans_WeightSlipDetailsDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property weightSlipDetail_ID() As Integer
            Get
                Return CType(Me(Me.tabletrans_WeightSlipDetails.weightSlipDetail_IDColumn),Integer)
            End Get
            Set
                Me(Me.tabletrans_WeightSlipDetails.weightSlipDetail_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property weightSlip_ID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tabletrans_WeightSlipDetails.weightSlip_IDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'weightSlip_ID' in table 'trans_WeightSlipDetails' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tabletrans_WeightSlipDetails.weightSlip_IDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property weightSlipDetailDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tabletrans_WeightSlipDetails.weightSlipDetailDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'weightSlipDetailDate' in table 'trans_WeightSlipDetails' is"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletrans_WeightSlipDetails.weightSlipDetailDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property weigslipFormNum() As String
            Get
                Try 
                    Return CType(Me(Me.tabletrans_WeightSlipDetails.weigslipFormNumColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'weigslipFormNum' in table 'trans_WeightSlipDetails' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tabletrans_WeightSlipDetails.weigslipFormNumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property batchNum() As String
            Get
                Try 
                    Return CType(Me(Me.tabletrans_WeightSlipDetails.batchNumColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'batchNum' in table 'trans_WeightSlipDetails' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletrans_WeightSlipDetails.batchNumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property lotNum() As String
            Get
                Try 
                    Return CType(Me(Me.tabletrans_WeightSlipDetails.lotNumColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'lotNum' in table 'trans_WeightSlipDetails' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletrans_WeightSlipDetails.lotNumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property plateNum() As String
            Get
                Try 
                    Return CType(Me(Me.tabletrans_WeightSlipDetails.plateNumColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'plateNum' in table 'trans_WeightSlipDetails' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletrans_WeightSlipDetails.plateNumColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property skipjack0_200To0_299() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabletrans_WeightSlipDetails.skipjack0_200To0_299Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'skipjack0_200To0_299' in table 'trans_WeightSlipDetails' is"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletrans_WeightSlipDetails.skipjack0_200To0_299Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property skipjack0_300To0_499() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabletrans_WeightSlipDetails.skipjack0_300To0_499Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'skipjack0_300To0_499' in table 'trans_WeightSlipDetails' is"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletrans_WeightSlipDetails.skipjack0_300To0_499Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property skipjack0_500To0_999() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabletrans_WeightSlipDetails.skipjack0_500To0_999Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'skipjack0_500To0_999' in table 'trans_WeightSlipDetails' is"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletrans_WeightSlipDetails.skipjack0_500To0_999Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property skipjack1_0To1_39() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabletrans_WeightSlipDetails.skipjack1_0To1_39Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'skipjack1_0To1_39' in table 'trans_WeightSlipDetails' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tabletrans_WeightSlipDetails.skipjack1_0To1_39Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property skipjack1_4To1_79() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabletrans_WeightSlipDetails.skipjack1_4To1_79Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'skipjack1_4To1_79' in table 'trans_WeightSlipDetails' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tabletrans_WeightSlipDetails.skipjack1_4To1_79Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property skipjack1_8To2_49() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabletrans_WeightSlipDetails.skipjack1_8To2_49Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'skipjack1_8To2_49' in table 'trans_WeightSlipDetails' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tabletrans_WeightSlipDetails.skipjack1_8To2_49Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property skipjack2_5To3_49() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabletrans_WeightSlipDetails.skipjack2_5To3_49Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'skipjack2_5To3_49' in table 'trans_WeightSlipDetails' is DB"& _ 
                            "Null.", e)
                End Try
            End Get
            Set
                Me(Me.tabletrans_WeightSlipDetails.skipjack2_5To3_49Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property skipjack3_5AndUP() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabletrans_WeightSlipDetails.skipjack3_5AndUPColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'skipjack3_5AndUP' in table 'trans_WeightSlipDetails' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletrans_WeightSlipDetails.skipjack3_5AndUPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property yelllowfin0_300To0_499() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabletrans_WeightSlipDetails.yelllowfin0_300To0_499Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'yelllowfin0_300To0_499' in table 'trans_WeightSlipDetails' "& _ 
                            "is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletrans_WeightSlipDetails.yelllowfin0_300To0_499Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property yellowfin0_500To0_999() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabletrans_WeightSlipDetails.yellowfin0_500To0_999Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'yellowfin0_500To0_999' in table 'trans_WeightSlipDetails' i"& _ 
                            "s DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletrans_WeightSlipDetails.yellowfin0_500To0_999Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property yellowfin1_0To1_49() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabletrans_WeightSlipDetails.yellowfin1_0To1_49Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'yellowfin1_0To1_49' in table 'trans_WeightSlipDetails' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletrans_WeightSlipDetails.yellowfin1_0To1_49Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property yellowfin1_5To2_49() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabletrans_WeightSlipDetails.yellowfin1_5To2_49Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'yellowfin1_5To2_49' in table 'trans_WeightSlipDetails' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletrans_WeightSlipDetails.yellowfin1_5To2_49Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property yellowfin2_5To3_49() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabletrans_WeightSlipDetails.yellowfin2_5To3_49Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'yellowfin2_5To3_49' in table 'trans_WeightSlipDetails' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletrans_WeightSlipDetails.yellowfin2_5To3_49Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property yellowfin3_5To4_99() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabletrans_WeightSlipDetails.yellowfin3_5To4_99Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'yellowfin3_5To4_99' in table 'trans_WeightSlipDetails' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletrans_WeightSlipDetails.yellowfin3_5To4_99Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property yellowfin5_0To9_99() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabletrans_WeightSlipDetails.yellowfin5_0To9_99Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'yellowfin5_0To9_99' in table 'trans_WeightSlipDetails' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletrans_WeightSlipDetails.yellowfin5_0To9_99Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property yellowfin10AndUP() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabletrans_WeightSlipDetails.yellowfin10AndUPColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'yellowfin10AndUP' in table 'trans_WeightSlipDetails' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletrans_WeightSlipDetails.yellowfin10AndUPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property bigeye0_300To0_499() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabletrans_WeightSlipDetails.bigeye0_300To0_499Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'bigeye0_300To0_499' in table 'trans_WeightSlipDetails' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletrans_WeightSlipDetails.bigeye0_300To0_499Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property bigeye0_500To0_999() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabletrans_WeightSlipDetails.bigeye0_500To0_999Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'bigeye0_500To0_999' in table 'trans_WeightSlipDetails' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletrans_WeightSlipDetails.bigeye0_500To0_999Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property bigeye1_0To1_49() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabletrans_WeightSlipDetails.bigeye1_0To1_49Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'bigeye1_0To1_49' in table 'trans_WeightSlipDetails' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tabletrans_WeightSlipDetails.bigeye1_0To1_49Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property bigeye1_5To2_49() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabletrans_WeightSlipDetails.bigeye1_5To2_49Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'bigeye1_5To2_49' in table 'trans_WeightSlipDetails' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tabletrans_WeightSlipDetails.bigeye1_5To2_49Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property bigeye2_5To3_49() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabletrans_WeightSlipDetails.bigeye2_5To3_49Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'bigeye2_5To3_49' in table 'trans_WeightSlipDetails' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tabletrans_WeightSlipDetails.bigeye2_5To3_49Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property bigeye3_5To4_99() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabletrans_WeightSlipDetails.bigeye3_5To4_99Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'bigeye3_5To4_99' in table 'trans_WeightSlipDetails' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tabletrans_WeightSlipDetails.bigeye3_5To4_99Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property bigeye5_0To9_99() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabletrans_WeightSlipDetails.bigeye5_0To9_99Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'bigeye5_0To9_99' in table 'trans_WeightSlipDetails' is DBNu"& _ 
                            "ll.", e)
                End Try
            End Get
            Set
                Me(Me.tabletrans_WeightSlipDetails.bigeye5_0To9_99Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property bigeye10AndUP() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabletrans_WeightSlipDetails.bigeye10AndUPColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'bigeye10AndUP' in table 'trans_WeightSlipDetails' is DBNull"& _ 
                            ".", e)
                End Try
            End Get
            Set
                Me(Me.tabletrans_WeightSlipDetails.bigeye10AndUPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property bonito0_300To0_499() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabletrans_WeightSlipDetails.bonito0_300To0_499Column),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'bonito0_300To0_499' in table 'trans_WeightSlipDetails' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletrans_WeightSlipDetails.bonito0_300To0_499Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property bonito0_500AndUP() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabletrans_WeightSlipDetails.bonito0_500AndUPColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'bonito0_500AndUP' in table 'trans_WeightSlipDetails' is DBN"& _ 
                            "ull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletrans_WeightSlipDetails.bonito0_500AndUPColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property fishmeal() As Decimal
            Get
                Try 
                    Return CType(Me(Me.tabletrans_WeightSlipDetails.fishmealColumn),Decimal)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'fishmeal' in table 'trans_WeightSlipDetails' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tabletrans_WeightSlipDetails.fishmealColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsweightSlip_IDNull() As Boolean
            Return Me.IsNull(Me.tabletrans_WeightSlipDetails.weightSlip_IDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetweightSlip_IDNull()
            Me(Me.tabletrans_WeightSlipDetails.weightSlip_IDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsweightSlipDetailDateNull() As Boolean
            Return Me.IsNull(Me.tabletrans_WeightSlipDetails.weightSlipDetailDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetweightSlipDetailDateNull()
            Me(Me.tabletrans_WeightSlipDetails.weightSlipDetailDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsweigslipFormNumNull() As Boolean
            Return Me.IsNull(Me.tabletrans_WeightSlipDetails.weigslipFormNumColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetweigslipFormNumNull()
            Me(Me.tabletrans_WeightSlipDetails.weigslipFormNumColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsbatchNumNull() As Boolean
            Return Me.IsNull(Me.tabletrans_WeightSlipDetails.batchNumColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetbatchNumNull()
            Me(Me.tabletrans_WeightSlipDetails.batchNumColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IslotNumNull() As Boolean
            Return Me.IsNull(Me.tabletrans_WeightSlipDetails.lotNumColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetlotNumNull()
            Me(Me.tabletrans_WeightSlipDetails.lotNumColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsplateNumNull() As Boolean
            Return Me.IsNull(Me.tabletrans_WeightSlipDetails.plateNumColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetplateNumNull()
            Me(Me.tabletrans_WeightSlipDetails.plateNumColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isskipjack0_200To0_299Null() As Boolean
            Return Me.IsNull(Me.tabletrans_WeightSlipDetails.skipjack0_200To0_299Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setskipjack0_200To0_299Null()
            Me(Me.tabletrans_WeightSlipDetails.skipjack0_200To0_299Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isskipjack0_300To0_499Null() As Boolean
            Return Me.IsNull(Me.tabletrans_WeightSlipDetails.skipjack0_300To0_499Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setskipjack0_300To0_499Null()
            Me(Me.tabletrans_WeightSlipDetails.skipjack0_300To0_499Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isskipjack0_500To0_999Null() As Boolean
            Return Me.IsNull(Me.tabletrans_WeightSlipDetails.skipjack0_500To0_999Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setskipjack0_500To0_999Null()
            Me(Me.tabletrans_WeightSlipDetails.skipjack0_500To0_999Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isskipjack1_0To1_39Null() As Boolean
            Return Me.IsNull(Me.tabletrans_WeightSlipDetails.skipjack1_0To1_39Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setskipjack1_0To1_39Null()
            Me(Me.tabletrans_WeightSlipDetails.skipjack1_0To1_39Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isskipjack1_4To1_79Null() As Boolean
            Return Me.IsNull(Me.tabletrans_WeightSlipDetails.skipjack1_4To1_79Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setskipjack1_4To1_79Null()
            Me(Me.tabletrans_WeightSlipDetails.skipjack1_4To1_79Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isskipjack1_8To2_49Null() As Boolean
            Return Me.IsNull(Me.tabletrans_WeightSlipDetails.skipjack1_8To2_49Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setskipjack1_8To2_49Null()
            Me(Me.tabletrans_WeightSlipDetails.skipjack1_8To2_49Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isskipjack2_5To3_49Null() As Boolean
            Return Me.IsNull(Me.tabletrans_WeightSlipDetails.skipjack2_5To3_49Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setskipjack2_5To3_49Null()
            Me(Me.tabletrans_WeightSlipDetails.skipjack2_5To3_49Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isskipjack3_5AndUPNull() As Boolean
            Return Me.IsNull(Me.tabletrans_WeightSlipDetails.skipjack3_5AndUPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setskipjack3_5AndUPNull()
            Me(Me.tabletrans_WeightSlipDetails.skipjack3_5AndUPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isyelllowfin0_300To0_499Null() As Boolean
            Return Me.IsNull(Me.tabletrans_WeightSlipDetails.yelllowfin0_300To0_499Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setyelllowfin0_300To0_499Null()
            Me(Me.tabletrans_WeightSlipDetails.yelllowfin0_300To0_499Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isyellowfin0_500To0_999Null() As Boolean
            Return Me.IsNull(Me.tabletrans_WeightSlipDetails.yellowfin0_500To0_999Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setyellowfin0_500To0_999Null()
            Me(Me.tabletrans_WeightSlipDetails.yellowfin0_500To0_999Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isyellowfin1_0To1_49Null() As Boolean
            Return Me.IsNull(Me.tabletrans_WeightSlipDetails.yellowfin1_0To1_49Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setyellowfin1_0To1_49Null()
            Me(Me.tabletrans_WeightSlipDetails.yellowfin1_0To1_49Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isyellowfin1_5To2_49Null() As Boolean
            Return Me.IsNull(Me.tabletrans_WeightSlipDetails.yellowfin1_5To2_49Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setyellowfin1_5To2_49Null()
            Me(Me.tabletrans_WeightSlipDetails.yellowfin1_5To2_49Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isyellowfin2_5To3_49Null() As Boolean
            Return Me.IsNull(Me.tabletrans_WeightSlipDetails.yellowfin2_5To3_49Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setyellowfin2_5To3_49Null()
            Me(Me.tabletrans_WeightSlipDetails.yellowfin2_5To3_49Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isyellowfin3_5To4_99Null() As Boolean
            Return Me.IsNull(Me.tabletrans_WeightSlipDetails.yellowfin3_5To4_99Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setyellowfin3_5To4_99Null()
            Me(Me.tabletrans_WeightSlipDetails.yellowfin3_5To4_99Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isyellowfin5_0To9_99Null() As Boolean
            Return Me.IsNull(Me.tabletrans_WeightSlipDetails.yellowfin5_0To9_99Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setyellowfin5_0To9_99Null()
            Me(Me.tabletrans_WeightSlipDetails.yellowfin5_0To9_99Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isyellowfin10AndUPNull() As Boolean
            Return Me.IsNull(Me.tabletrans_WeightSlipDetails.yellowfin10AndUPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setyellowfin10AndUPNull()
            Me(Me.tabletrans_WeightSlipDetails.yellowfin10AndUPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isbigeye0_300To0_499Null() As Boolean
            Return Me.IsNull(Me.tabletrans_WeightSlipDetails.bigeye0_300To0_499Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setbigeye0_300To0_499Null()
            Me(Me.tabletrans_WeightSlipDetails.bigeye0_300To0_499Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isbigeye0_500To0_999Null() As Boolean
            Return Me.IsNull(Me.tabletrans_WeightSlipDetails.bigeye0_500To0_999Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setbigeye0_500To0_999Null()
            Me(Me.tabletrans_WeightSlipDetails.bigeye0_500To0_999Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isbigeye1_0To1_49Null() As Boolean
            Return Me.IsNull(Me.tabletrans_WeightSlipDetails.bigeye1_0To1_49Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setbigeye1_0To1_49Null()
            Me(Me.tabletrans_WeightSlipDetails.bigeye1_0To1_49Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isbigeye1_5To2_49Null() As Boolean
            Return Me.IsNull(Me.tabletrans_WeightSlipDetails.bigeye1_5To2_49Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setbigeye1_5To2_49Null()
            Me(Me.tabletrans_WeightSlipDetails.bigeye1_5To2_49Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isbigeye2_5To3_49Null() As Boolean
            Return Me.IsNull(Me.tabletrans_WeightSlipDetails.bigeye2_5To3_49Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setbigeye2_5To3_49Null()
            Me(Me.tabletrans_WeightSlipDetails.bigeye2_5To3_49Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isbigeye3_5To4_99Null() As Boolean
            Return Me.IsNull(Me.tabletrans_WeightSlipDetails.bigeye3_5To4_99Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setbigeye3_5To4_99Null()
            Me(Me.tabletrans_WeightSlipDetails.bigeye3_5To4_99Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isbigeye5_0To9_99Null() As Boolean
            Return Me.IsNull(Me.tabletrans_WeightSlipDetails.bigeye5_0To9_99Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setbigeye5_0To9_99Null()
            Me(Me.tabletrans_WeightSlipDetails.bigeye5_0To9_99Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isbigeye10AndUPNull() As Boolean
            Return Me.IsNull(Me.tabletrans_WeightSlipDetails.bigeye10AndUPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setbigeye10AndUPNull()
            Me(Me.tabletrans_WeightSlipDetails.bigeye10AndUPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isbonito0_300To0_499Null() As Boolean
            Return Me.IsNull(Me.tabletrans_WeightSlipDetails.bonito0_300To0_499Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setbonito0_300To0_499Null()
            Me(Me.tabletrans_WeightSlipDetails.bonito0_300To0_499Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function Isbonito0_500AndUPNull() As Boolean
            Return Me.IsNull(Me.tabletrans_WeightSlipDetails.bonito0_500AndUPColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub Setbonito0_500AndUPNull()
            Me(Me.tabletrans_WeightSlipDetails.bonito0_500AndUPColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Function IsfishmealNull() As Boolean
            Return Me.IsNull(Me.tabletrans_WeightSlipDetails.fishmealColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub SetfishmealNull()
            Me(Me.tabletrans_WeightSlipDetails.fishmealColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class trans_CatchActivitiesRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As trans_CatchActivitiesRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As trans_CatchActivitiesRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As trans_CatchActivitiesRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class trans_CatchActivityDetailsRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As trans_CatchActivityDetailsRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As trans_CatchActivityDetailsRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As trans_CatchActivityDetailsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class trans_CatchMethodRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As trans_CatchMethodRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As trans_CatchMethodRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As trans_CatchMethodRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class trans_SalesReportRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As trans_SalesReportRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As trans_SalesReportRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As trans_SalesReportRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class trans_SalesReportCatcherRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As trans_SalesReportCatcherRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As trans_SalesReportCatcherRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As trans_SalesReportCatcherRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class trans_SalesReportPriceRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As trans_SalesReportPriceRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As trans_SalesReportPriceRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As trans_SalesReportPriceRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class trans_SalesReportSummaryRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As trans_SalesReportSummaryRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As trans_SalesReportSummaryRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As trans_SalesReportSummaryRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class trans_SalesReportWeightSlipsRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As trans_SalesReportWeightSlipsRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As trans_SalesReportWeightSlipsRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As trans_SalesReportWeightSlipsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class trans_WeightSlipRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As trans_WeightSlipRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As trans_WeightSlipRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As trans_WeightSlipRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
    Public Class trans_WeightSlipDetailsRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As trans_WeightSlipDetailsRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New(ByVal row As trans_WeightSlipDetailsRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Row() As trans_WeightSlipDetailsRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace MKDBDataSetTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class trans_CatchActivitiesTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "trans_CatchActivities"
            tableMapping.ColumnMappings.Add("catchActivity_ID", "catchActivity_ID")
            tableMapping.ColumnMappings.Add("catchDate", "catchDate")
            tableMapping.ColumnMappings.Add("method_ID", "method_ID")
            tableMapping.ColumnMappings.Add("longitude", "longitude")
            tableMapping.ColumnMappings.Add("latitude", "latitude")
            tableMapping.ColumnMappings.Add("catchReferenceNum", "catchReferenceNum")
            tableMapping.ColumnMappings.Add("approvalStatus", "approvalStatus")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[trans_CatchActivities] WHERE (([catchActivity_ID] = @Original_"& _ 
                "catchActivity_ID) AND ([catchDate] = @Original_catchDate) AND ([method_ID] = @Or"& _ 
                "iginal_method_ID) AND ([longitude] = @Original_longitude) AND ([latitude] = @Ori"& _ 
                "ginal_latitude) AND ([catchReferenceNum] = @Original_catchReferenceNum) AND ([ap"& _ 
                "provalStatus] = @Original_approvalStatus))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_catchActivity_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "catchActivity_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_catchDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "catchDate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_method_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "method_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_longitude", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 9, 6, "longitude", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_latitude", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 9, 6, "latitude", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_catchReferenceNum", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "catchReferenceNum", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_approvalStatus", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "approvalStatus", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[trans_CatchActivities] ([catchDate], [method_ID], [longitude],"& _ 
                " [latitude], [catchReferenceNum], [approvalStatus]) VALUES (@catchDate, @method_"& _ 
                "ID, @longitude, @latitude, @catchReferenceNum, @approvalStatus);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT catchAc"& _ 
                "tivity_ID, catchDate, method_ID, longitude, latitude, catchReferenceNum, approva"& _ 
                "lStatus FROM trans_CatchActivities WHERE (catchActivity_ID = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@catchDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "catchDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@method_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "method_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@longitude", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 9, 6, "longitude", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@latitude", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 9, 6, "latitude", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@catchReferenceNum", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "catchReferenceNum", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@approvalStatus", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "approvalStatus", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[trans_CatchActivities] SET [catchDate] = @catchDate, [method_ID] = "& _ 
                "@method_ID, [longitude] = @longitude, [latitude] = @latitude, [catchReferenceNum"& _ 
                "] = @catchReferenceNum, [approvalStatus] = @approvalStatus WHERE (([catchActivit"& _ 
                "y_ID] = @Original_catchActivity_ID) AND ([catchDate] = @Original_catchDate) AND "& _ 
                "([method_ID] = @Original_method_ID) AND ([longitude] = @Original_longitude) AND "& _ 
                "([latitude] = @Original_latitude) AND ([catchReferenceNum] = @Original_catchRefe"& _ 
                "renceNum) AND ([approvalStatus] = @Original_approvalStatus));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT catchActiv"& _ 
                "ity_ID, catchDate, method_ID, longitude, latitude, catchReferenceNum, approvalSt"& _ 
                "atus FROM trans_CatchActivities WHERE (catchActivity_ID = @catchActivity_ID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@catchDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "catchDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@method_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "method_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@longitude", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 9, 6, "longitude", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@latitude", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 9, 6, "latitude", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@catchReferenceNum", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "catchReferenceNum", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@approvalStatus", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "approvalStatus", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_catchActivity_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "catchActivity_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_catchDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "catchDate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_method_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "method_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_longitude", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 9, 6, "longitude", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_latitude", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 9, 6, "latitude", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_catchReferenceNum", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "catchReferenceNum", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_approvalStatus", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "approvalStatus", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@catchActivity_ID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "catchActivity_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.MarketingSalesSystem.Settings.Default.MKDBConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT catchActivity_ID, catchDate, method_ID, longitude, latitude, catchReferenc"& _ 
                "eNum, approvalStatus FROM dbo.trans_CatchActivities"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MKDBDataSet.trans_CatchActivitiesDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As MKDBDataSet.trans_CatchActivitiesDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As MKDBDataSet.trans_CatchActivitiesDataTable = New MKDBDataSet.trans_CatchActivitiesDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As MKDBDataSet.trans_CatchActivitiesDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As MKDBDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "trans_CatchActivities")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_catchActivity_ID As Integer, ByVal Original_catchDate As Date, ByVal Original_method_ID As Integer, ByVal Original_longitude As Decimal, ByVal Original_latitude As Decimal, ByVal Original_catchReferenceNum As String, ByVal Original_approvalStatus As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_catchActivity_ID,Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_catchDate,Date)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_method_ID,Integer)
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_longitude,Decimal)
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_latitude,Decimal)
            If (Original_catchReferenceNum Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_catchReferenceNum")
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_catchReferenceNum,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_approvalStatus,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal catchDate As Date, ByVal method_ID As Integer, ByVal longitude As Decimal, ByVal latitude As Decimal, ByVal catchReferenceNum As String, ByVal approvalStatus As Integer) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(catchDate,Date)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(method_ID,Integer)
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(longitude,Decimal)
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(latitude,Decimal)
            If (catchReferenceNum Is Nothing) Then
                Throw New Global.System.ArgumentNullException("catchReferenceNum")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(catchReferenceNum,String)
            End If
            Me.Adapter.InsertCommand.Parameters(5).Value = CType(approvalStatus,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal catchDate As Date, ByVal method_ID As Integer, ByVal longitude As Decimal, ByVal latitude As Decimal, ByVal catchReferenceNum As String, ByVal approvalStatus As Integer, ByVal Original_catchActivity_ID As Integer, ByVal Original_catchDate As Date, ByVal Original_method_ID As Integer, ByVal Original_longitude As Decimal, ByVal Original_latitude As Decimal, ByVal Original_catchReferenceNum As String, ByVal Original_approvalStatus As Integer, ByVal catchActivity_ID As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(catchDate,Date)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(method_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(longitude,Decimal)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(latitude,Decimal)
            If (catchReferenceNum Is Nothing) Then
                Throw New Global.System.ArgumentNullException("catchReferenceNum")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(catchReferenceNum,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(approvalStatus,Integer)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_catchActivity_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_catchDate,Date)
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(Original_method_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_longitude,Decimal)
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Original_latitude,Decimal)
            If (Original_catchReferenceNum Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_catchReferenceNum")
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_catchReferenceNum,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_approvalStatus,Integer)
            Me.Adapter.UpdateCommand.Parameters(13).Value = CType(catchActivity_ID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal catchDate As Date, ByVal method_ID As Integer, ByVal longitude As Decimal, ByVal latitude As Decimal, ByVal catchReferenceNum As String, ByVal approvalStatus As Integer, ByVal Original_catchActivity_ID As Integer, ByVal Original_catchDate As Date, ByVal Original_method_ID As Integer, ByVal Original_longitude As Decimal, ByVal Original_latitude As Decimal, ByVal Original_catchReferenceNum As String, ByVal Original_approvalStatus As Integer) As Integer
            Return Me.Update(catchDate, method_ID, longitude, latitude, catchReferenceNum, approvalStatus, Original_catchActivity_ID, Original_catchDate, Original_method_ID, Original_longitude, Original_latitude, Original_catchReferenceNum, Original_approvalStatus, Original_catchActivity_ID)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class trans_CatchActivityDetailsTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "trans_CatchActivityDetails"
            tableMapping.ColumnMappings.Add("catchActivityDetail_ID", "catchActivityDetail_ID")
            tableMapping.ColumnMappings.Add("catchActivity_ID", "catchActivity_ID")
            tableMapping.ColumnMappings.Add("vessel_ID", "vessel_ID")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[trans_CatchActivityDetails] WHERE (([catchActivityDetail_ID] ="& _ 
                " @Original_catchActivityDetail_ID) AND ([catchActivity_ID] = @Original_catchActi"& _ 
                "vity_ID) AND ([vessel_ID] = @Original_vessel_ID))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_catchActivityDetail_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "catchActivityDetail_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_catchActivity_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "catchActivity_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_vessel_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "vessel_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[trans_CatchActivityDetails] ([catchActivity_ID], [vessel_ID]) "& _ 
                "VALUES (@catchActivity_ID, @vessel_ID);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT catchActivityDetail_ID, catchAct"& _ 
                "ivity_ID, vessel_ID FROM trans_CatchActivityDetails WHERE (catchActivityDetail_I"& _ 
                "D = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@catchActivity_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "catchActivity_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@vessel_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "vessel_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[trans_CatchActivityDetails] SET [catchActivity_ID] = @catchActivity"& _ 
                "_ID, [vessel_ID] = @vessel_ID WHERE (([catchActivityDetail_ID] = @Original_catch"& _ 
                "ActivityDetail_ID) AND ([catchActivity_ID] = @Original_catchActivity_ID) AND ([v"& _ 
                "essel_ID] = @Original_vessel_ID));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT catchActivityDetail_ID, catchActivity"& _ 
                "_ID, vessel_ID FROM trans_CatchActivityDetails WHERE (catchActivityDetail_ID = @"& _ 
                "catchActivityDetail_ID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@catchActivity_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "catchActivity_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@vessel_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "vessel_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_catchActivityDetail_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "catchActivityDetail_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_catchActivity_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "catchActivity_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_vessel_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "vessel_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@catchActivityDetail_ID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "catchActivityDetail_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.MarketingSalesSystem.Settings.Default.MKDBConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT catchActivityDetail_ID, catchActivity_ID, vessel_ID FROM dbo.trans_CatchAc"& _ 
                "tivityDetails"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MKDBDataSet.trans_CatchActivityDetailsDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As MKDBDataSet.trans_CatchActivityDetailsDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As MKDBDataSet.trans_CatchActivityDetailsDataTable = New MKDBDataSet.trans_CatchActivityDetailsDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As MKDBDataSet.trans_CatchActivityDetailsDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As MKDBDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "trans_CatchActivityDetails")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_catchActivityDetail_ID As Integer, ByVal Original_catchActivity_ID As Integer, ByVal Original_vessel_ID As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_catchActivityDetail_ID,Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_catchActivity_ID,Integer)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_vessel_ID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal catchActivity_ID As Integer, ByVal vessel_ID As Integer) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(catchActivity_ID,Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(vessel_ID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal catchActivity_ID As Integer, ByVal vessel_ID As Integer, ByVal Original_catchActivityDetail_ID As Integer, ByVal Original_catchActivity_ID As Integer, ByVal Original_vessel_ID As Integer, ByVal catchActivityDetail_ID As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(catchActivity_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(vessel_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_catchActivityDetail_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Original_catchActivity_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_vessel_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(catchActivityDetail_ID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal catchActivity_ID As Integer, ByVal vessel_ID As Integer, ByVal Original_catchActivityDetail_ID As Integer, ByVal Original_catchActivity_ID As Integer, ByVal Original_vessel_ID As Integer) As Integer
            Return Me.Update(catchActivity_ID, vessel_ID, Original_catchActivityDetail_ID, Original_catchActivity_ID, Original_vessel_ID, Original_catchActivityDetail_ID)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class trans_CatchMethodTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "trans_CatchMethod"
            tableMapping.ColumnMappings.Add("catchMethod_ID", "catchMethod_ID")
            tableMapping.ColumnMappings.Add("catchMethod", "catchMethod")
            tableMapping.ColumnMappings.Add("active", "active")
            tableMapping.ColumnMappings.Add("modifiedDate", "modifiedDate")
            tableMapping.ColumnMappings.Add("modifiedBy", "modifiedBy")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[trans_CatchMethod] WHERE (([catchMethod_ID] = @Original_catchM"& _ 
                "ethod_ID) AND ([catchMethod] = @Original_catchMethod) AND ((@IsNull_active = 1 A"& _ 
                "ND [active] IS NULL) OR ([active] = @Original_active)) AND ((@IsNull_modifiedDat"& _ 
                "e = 1 AND [modifiedDate] IS NULL) OR ([modifiedDate] = @Original_modifiedDate)) "& _ 
                "AND ((@IsNull_modifiedBy = 1 AND [modifiedBy] IS NULL) OR ([modifiedBy] = @Origi"& _ 
                "nal_modifiedBy)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_catchMethod_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "catchMethod_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_catchMethod", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "catchMethod", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_active", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "active", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_active", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "active", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_modifiedDate", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "modifiedDate", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_modifiedDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "modifiedDate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_modifiedBy", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "modifiedBy", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_modifiedBy", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "modifiedBy", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[trans_CatchMethod] ([catchMethod], [active], [modifiedDate], ["& _ 
                "modifiedBy]) VALUES (@catchMethod, @active, @modifiedDate, @modifiedBy);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT"& _ 
                " catchMethod_ID, catchMethod, active, modifiedDate, modifiedBy FROM trans_CatchM"& _ 
                "ethod WHERE (catchMethod_ID = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@catchMethod", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "catchMethod", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@active", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "active", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@modifiedDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "modifiedDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@modifiedBy", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "modifiedBy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[trans_CatchMethod] SET [catchMethod] = @catchMethod, [active] = @ac"& _ 
                "tive, [modifiedDate] = @modifiedDate, [modifiedBy] = @modifiedBy WHERE (([catchM"& _ 
                "ethod_ID] = @Original_catchMethod_ID) AND ([catchMethod] = @Original_catchMethod"& _ 
                ") AND ((@IsNull_active = 1 AND [active] IS NULL) OR ([active] = @Original_active"& _ 
                ")) AND ((@IsNull_modifiedDate = 1 AND [modifiedDate] IS NULL) OR ([modifiedDate]"& _ 
                " = @Original_modifiedDate)) AND ((@IsNull_modifiedBy = 1 AND [modifiedBy] IS NUL"& _ 
                "L) OR ([modifiedBy] = @Original_modifiedBy)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT catchMethod_ID, catchMeth"& _ 
                "od, active, modifiedDate, modifiedBy FROM trans_CatchMethod WHERE (catchMethod_I"& _ 
                "D = @catchMethod_ID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@catchMethod", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "catchMethod", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@active", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "active", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@modifiedDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "modifiedDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@modifiedBy", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "modifiedBy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_catchMethod_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "catchMethod_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_catchMethod", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "catchMethod", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_active", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "active", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_active", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "active", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_modifiedDate", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "modifiedDate", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_modifiedDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "modifiedDate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_modifiedBy", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "modifiedBy", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_modifiedBy", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "modifiedBy", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@catchMethod_ID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "catchMethod_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.MarketingSalesSystem.Settings.Default.MKDBConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT catchMethod_ID, catchMethod, active, modifiedDate, modifiedBy FROM dbo.tra"& _ 
                "ns_CatchMethod"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MKDBDataSet.trans_CatchMethodDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As MKDBDataSet.trans_CatchMethodDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As MKDBDataSet.trans_CatchMethodDataTable = New MKDBDataSet.trans_CatchMethodDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As MKDBDataSet.trans_CatchMethodDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As MKDBDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "trans_CatchMethod")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_catchMethod_ID As Integer, ByVal Original_catchMethod As String, ByVal Original_active As Global.System.Nullable(Of Boolean), ByVal Original_modifiedDate As Global.System.Nullable(Of Date), ByVal Original_modifiedBy As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_catchMethod_ID,Integer)
            If (Original_catchMethod Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_catchMethod")
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_catchMethod,String)
            End If
            If (Original_active.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_active.Value,Boolean)
            Else
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (Original_modifiedDate.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_modifiedDate.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (Original_modifiedBy.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_modifiedBy.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal catchMethod As String, ByVal active As Global.System.Nullable(Of Boolean), ByVal modifiedDate As Global.System.Nullable(Of Date), ByVal modifiedBy As Global.System.Nullable(Of Date)) As Integer
            If (catchMethod Is Nothing) Then
                Throw New Global.System.ArgumentNullException("catchMethod")
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(catchMethod,String)
            End If
            If (active.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(active.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (modifiedDate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(modifiedDate.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (modifiedBy.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(modifiedBy.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal catchMethod As String, ByVal active As Global.System.Nullable(Of Boolean), ByVal modifiedDate As Global.System.Nullable(Of Date), ByVal modifiedBy As Global.System.Nullable(Of Date), ByVal Original_catchMethod_ID As Integer, ByVal Original_catchMethod As String, ByVal Original_active As Global.System.Nullable(Of Boolean), ByVal Original_modifiedDate As Global.System.Nullable(Of Date), ByVal Original_modifiedBy As Global.System.Nullable(Of Date), ByVal catchMethod_ID As Integer) As Integer
            If (catchMethod Is Nothing) Then
                Throw New Global.System.ArgumentNullException("catchMethod")
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(catchMethod,String)
            End If
            If (active.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(active.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (modifiedDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(modifiedDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (modifiedBy.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(modifiedBy.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_catchMethod_ID,Integer)
            If (Original_catchMethod Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_catchMethod")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Original_catchMethod,String)
            End If
            If (Original_active.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Original_active.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (Original_modifiedDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Original_modifiedDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (Original_modifiedBy.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_modifiedBy.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(12).Value = CType(catchMethod_ID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal catchMethod As String, ByVal active As Global.System.Nullable(Of Boolean), ByVal modifiedDate As Global.System.Nullable(Of Date), ByVal modifiedBy As Global.System.Nullable(Of Date), ByVal Original_catchMethod_ID As Integer, ByVal Original_catchMethod As String, ByVal Original_active As Global.System.Nullable(Of Boolean), ByVal Original_modifiedDate As Global.System.Nullable(Of Date), ByVal Original_modifiedBy As Global.System.Nullable(Of Date)) As Integer
            Return Me.Update(catchMethod, active, modifiedDate, modifiedBy, Original_catchMethod_ID, Original_catchMethod, Original_active, Original_modifiedDate, Original_modifiedBy, Original_catchMethod_ID)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class trans_SalesReportTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "trans_SalesReport"
            tableMapping.ColumnMappings.Add("salesReport_ID", "salesReport_ID")
            tableMapping.ColumnMappings.Add("invoiceNum", "invoiceNum")
            tableMapping.ColumnMappings.Add("referenceNum", "referenceNum")
            tableMapping.ColumnMappings.Add("salesDate", "salesDate")
            tableMapping.ColumnMappings.Add("salesNum", "salesNum")
            tableMapping.ColumnMappings.Add("sellingType", "sellingType")
            tableMapping.ColumnMappings.Add("unloadingType", "unloadingType")
            tableMapping.ColumnMappings.Add("unloadingVessel_ID", "unloadingVessel_ID")
            tableMapping.ColumnMappings.Add("unloadingForeignVessel", "unloadingForeignVessel")
            tableMapping.ColumnMappings.Add("buyer", "buyer")
            tableMapping.ColumnMappings.Add("catchtDeliveryNum", "catchtDeliveryNum")
            tableMapping.ColumnMappings.Add("usdRate", "usdRate")
            tableMapping.ColumnMappings.Add("contractNum", "contractNum")
            tableMapping.ColumnMappings.Add("remarks", "remarks")
            tableMapping.ColumnMappings.Add("encodedBy", "encodedBy")
            tableMapping.ColumnMappings.Add("encodedOn", "encodedOn")
            tableMapping.ColumnMappings.Add("approvalStatus", "approvalStatus")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[trans_SalesReport] WHERE (([salesReport_ID] = @Original_salesR"& _ 
                "eport_ID) AND ((@IsNull_invoiceNum = 1 AND [invoiceNum] IS NULL) OR ([invoiceNum"& _ 
                "] = @Original_invoiceNum)) AND ([referenceNum] = @Original_referenceNum) AND ([s"& _ 
                "alesDate] = @Original_salesDate) AND ([salesNum] = @Original_salesNum) AND ([sel"& _ 
                "lingType] = @Original_sellingType) AND ([unloadingType] = @Original_unloadingTyp"& _ 
                "e) AND ((@IsNull_unloadingVessel_ID = 1 AND [unloadingVessel_ID] IS NULL) OR ([u"& _ 
                "nloadingVessel_ID] = @Original_unloadingVessel_ID)) AND ((@IsNull_unloadingForei"& _ 
                "gnVessel = 1 AND [unloadingForeignVessel] IS NULL) OR ([unloadingForeignVessel] "& _ 
                "= @Original_unloadingForeignVessel)) AND ([buyer] = @Original_buyer) AND ([catch"& _ 
                "tDeliveryNum] = @Original_catchtDeliveryNum) AND ([usdRate] = @Original_usdRate)"& _ 
                " AND ([contractNum] = @Original_contractNum) AND ((@IsNull_remarks = 1 AND [rema"& _ 
                "rks] IS NULL) OR ([remarks] = @Original_remarks)) AND ([encodedBy] = @Original_e"& _ 
                "ncodedBy) AND ([encodedOn] = @Original_encodedOn) AND ([approvalStatus] = @Origi"& _ 
                "nal_approvalStatus))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_salesReport_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "salesReport_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_invoiceNum", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "invoiceNum", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_invoiceNum", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "invoiceNum", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_referenceNum", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "referenceNum", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_salesDate", Global.System.Data.SqlDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "salesDate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_salesNum", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "salesNum", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sellingType", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sellingType", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_unloadingType", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "unloadingType", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_unloadingVessel_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "unloadingVessel_ID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_unloadingVessel_ID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "unloadingVessel_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_unloadingForeignVessel", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "unloadingForeignVessel", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_unloadingForeignVessel", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "unloadingForeignVessel", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_buyer", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "buyer", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_catchtDeliveryNum", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "catchtDeliveryNum", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_usdRate", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "usdRate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_contractNum", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "contractNum", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_remarks", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "remarks", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_remarks", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "remarks", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_encodedBy", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "encodedBy", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_encodedOn", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "encodedOn", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_approvalStatus", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "approvalStatus", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[trans_SalesReport] ([invoiceNum], [referenceNum], [salesDate],"& _ 
                " [salesNum], [sellingType], [unloadingType], [unloadingVessel_ID], [unloadingFor"& _ 
                "eignVessel], [buyer], [catchtDeliveryNum], [usdRate], [contractNum], [remarks], "& _ 
                "[encodedBy], [encodedOn], [approvalStatus]) VALUES (@invoiceNum, @referenceNum, "& _ 
                "@salesDate, @salesNum, @sellingType, @unloadingType, @unloadingVessel_ID, @unloa"& _ 
                "dingForeignVessel, @buyer, @catchtDeliveryNum, @usdRate, @contractNum, @remarks,"& _ 
                " @encodedBy, @encodedOn, @approvalStatus);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT salesReport_ID, invoiceNum, r"& _ 
                "eferenceNum, salesDate, salesNum, sellingType, unloadingType, unloadingVessel_ID"& _ 
                ", unloadingForeignVessel, buyer, catchtDeliveryNum, usdRate, contractNum, remark"& _ 
                "s, encodedBy, encodedOn, approvalStatus FROM trans_SalesReport WHERE (salesRepor"& _ 
                "t_ID = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@invoiceNum", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "invoiceNum", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@referenceNum", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "referenceNum", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@salesDate", Global.System.Data.SqlDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "salesDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@salesNum", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "salesNum", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sellingType", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sellingType", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@unloadingType", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "unloadingType", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@unloadingVessel_ID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "unloadingVessel_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@unloadingForeignVessel", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "unloadingForeignVessel", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@buyer", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "buyer", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@catchtDeliveryNum", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "catchtDeliveryNum", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@usdRate", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "usdRate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@contractNum", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "contractNum", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@remarks", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "remarks", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@encodedBy", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "encodedBy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@encodedOn", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "encodedOn", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@approvalStatus", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "approvalStatus", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[trans_SalesReport] SET [invoiceNum] = @invoiceNum, [referenceNum] ="& _ 
                " @referenceNum, [salesDate] = @salesDate, [salesNum] = @salesNum, [sellingType] "& _ 
                "= @sellingType, [unloadingType] = @unloadingType, [unloadingVessel_ID] = @unload"& _ 
                "ingVessel_ID, [unloadingForeignVessel] = @unloadingForeignVessel, [buyer] = @buy"& _ 
                "er, [catchtDeliveryNum] = @catchtDeliveryNum, [usdRate] = @usdRate, [contractNum"& _ 
                "] = @contractNum, [remarks] = @remarks, [encodedBy] = @encodedBy, [encodedOn] = "& _ 
                "@encodedOn, [approvalStatus] = @approvalStatus WHERE (([salesReport_ID] = @Origi"& _ 
                "nal_salesReport_ID) AND ((@IsNull_invoiceNum = 1 AND [invoiceNum] IS NULL) OR (["& _ 
                "invoiceNum] = @Original_invoiceNum)) AND ([referenceNum] = @Original_referenceNu"& _ 
                "m) AND ([salesDate] = @Original_salesDate) AND ([salesNum] = @Original_salesNum)"& _ 
                " AND ([sellingType] = @Original_sellingType) AND ([unloadingType] = @Original_un"& _ 
                "loadingType) AND ((@IsNull_unloadingVessel_ID = 1 AND [unloadingVessel_ID] IS NU"& _ 
                "LL) OR ([unloadingVessel_ID] = @Original_unloadingVessel_ID)) AND ((@IsNull_unlo"& _ 
                "adingForeignVessel = 1 AND [unloadingForeignVessel] IS NULL) OR ([unloadingForei"& _ 
                "gnVessel] = @Original_unloadingForeignVessel)) AND ([buyer] = @Original_buyer) A"& _ 
                "ND ([catchtDeliveryNum] = @Original_catchtDeliveryNum) AND ([usdRate] = @Origina"& _ 
                "l_usdRate) AND ([contractNum] = @Original_contractNum) AND ((@IsNull_remarks = 1"& _ 
                " AND [remarks] IS NULL) OR ([remarks] = @Original_remarks)) AND ([encodedBy] = @"& _ 
                "Original_encodedBy) AND ([encodedOn] = @Original_encodedOn) AND ([approvalStatus"& _ 
                "] = @Original_approvalStatus));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT salesReport_ID, invoiceNum, referenceNum"& _ 
                ", salesDate, salesNum, sellingType, unloadingType, unloadingVessel_ID, unloading"& _ 
                "ForeignVessel, buyer, catchtDeliveryNum, usdRate, contractNum, remarks, encodedB"& _ 
                "y, encodedOn, approvalStatus FROM trans_SalesReport WHERE (salesReport_ID = @sal"& _ 
                "esReport_ID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@invoiceNum", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "invoiceNum", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@referenceNum", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "referenceNum", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@salesDate", Global.System.Data.SqlDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "salesDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@salesNum", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "salesNum", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sellingType", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sellingType", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@unloadingType", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "unloadingType", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@unloadingVessel_ID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "unloadingVessel_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@unloadingForeignVessel", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "unloadingForeignVessel", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@buyer", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "buyer", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@catchtDeliveryNum", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "catchtDeliveryNum", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@usdRate", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "usdRate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@contractNum", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "contractNum", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@remarks", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "remarks", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@encodedBy", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "encodedBy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@encodedOn", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "encodedOn", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@approvalStatus", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "approvalStatus", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_salesReport_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "salesReport_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_invoiceNum", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "invoiceNum", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_invoiceNum", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "invoiceNum", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_referenceNum", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "referenceNum", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_salesDate", Global.System.Data.SqlDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "salesDate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_salesNum", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "salesNum", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sellingType", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sellingType", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_unloadingType", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "unloadingType", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_unloadingVessel_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "unloadingVessel_ID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_unloadingVessel_ID", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "unloadingVessel_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_unloadingForeignVessel", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "unloadingForeignVessel", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_unloadingForeignVessel", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "unloadingForeignVessel", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_buyer", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "buyer", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_catchtDeliveryNum", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "catchtDeliveryNum", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_usdRate", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "usdRate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_contractNum", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "contractNum", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_remarks", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "remarks", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_remarks", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "remarks", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_encodedBy", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "encodedBy", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_encodedOn", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "encodedOn", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_approvalStatus", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "approvalStatus", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@salesReport_ID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "salesReport_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.MarketingSalesSystem.Settings.Default.MKDBConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT salesReport_ID, invoiceNum, referenceNum, salesDate, salesNum, sellingType" & _
                ", unloadingType, unloadingVessel_ID, unloadingForeignVessel, buyer, catchtDelive" & _
                "ryNum, usdRate, contractNum, remarks, encodedBy, encodedOn, approvalStatus FROM " & _
                "dbo.trans_SalesReport Where salesReport_ID = (@salesReport_ID)"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@salesReport_ID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "salesReport_ID", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"), _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"), _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, True)> _
        Public Overridable Overloads Function Fill(ByVal dataTable As MKDBDataSet.trans_SalesReportDataTable, ByVal salesReport_ID As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (salesReport_ID.HasValue = True) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(salesReport_ID.Value, Integer)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = True) Then
                dataTable.Clear()
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As MKDBDataSet.trans_SalesReportDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As MKDBDataSet.trans_SalesReportDataTable = New MKDBDataSet.trans_SalesReportDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As MKDBDataSet.trans_SalesReportDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As MKDBDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "trans_SalesReport")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete( _
                    ByVal Original_salesReport_ID As Integer,  _
                    ByVal Original_invoiceNum As String,  _
                    ByVal Original_referenceNum As String,  _
                    ByVal Original_salesDate As Date,  _
                    ByVal Original_salesNum As String,  _
                    ByVal Original_sellingType As String,  _
                    ByVal Original_unloadingType As String,  _
                    ByVal Original_unloadingVessel_ID As String,  _
                    ByVal Original_unloadingForeignVessel As String,  _
                    ByVal Original_buyer As String,  _
                    ByVal Original_catchtDeliveryNum As String,  _
                    ByVal Original_usdRate As Decimal,  _
                    ByVal Original_contractNum As String,  _
                    ByVal Original_remarks As String,  _
                    ByVal Original_encodedBy As Integer,  _
                    ByVal Original_encodedOn As Date,  _
                    ByVal Original_approvalStatus As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_salesReport_ID,Integer)
            If (Original_invoiceNum Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_invoiceNum,String)
            End If
            If (Original_referenceNum Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_referenceNum")
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_referenceNum,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_salesDate,Date)
            If (Original_salesNum Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_salesNum")
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_salesNum,String)
            End If
            If (Original_sellingType Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_sellingType")
            Else
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_sellingType,String)
            End If
            If (Original_unloadingType Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_unloadingType")
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_unloadingType,String)
            End If
            If (Original_unloadingVessel_ID Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_unloadingVessel_ID,String)
            End If
            If (Original_unloadingForeignVessel Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_unloadingForeignVessel,String)
            End If
            If (Original_buyer Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_buyer")
            Else
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_buyer,String)
            End If
            If (Original_catchtDeliveryNum Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_catchtDeliveryNum")
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(Original_catchtDeliveryNum,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_usdRate,Decimal)
            If (Original_contractNum Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_contractNum")
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(Original_contractNum,String)
            End If
            If (Original_remarks Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(Original_remarks,String)
            End If
            Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_encodedBy,Integer)
            Me.Adapter.DeleteCommand.Parameters(19).Value = CType(Original_encodedOn,Date)
            Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_approvalStatus,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal invoiceNum As String,  _
                    ByVal referenceNum As String,  _
                    ByVal salesDate As Date,  _
                    ByVal salesNum As String,  _
                    ByVal sellingType As String,  _
                    ByVal unloadingType As String,  _
                    ByVal unloadingVessel_ID As String,  _
                    ByVal unloadingForeignVessel As String,  _
                    ByVal buyer As String,  _
                    ByVal catchtDeliveryNum As String,  _
                    ByVal usdRate As Decimal,  _
                    ByVal contractNum As String,  _
                    ByVal remarks As String,  _
                    ByVal encodedBy As Integer,  _
                    ByVal encodedOn As Date,  _
                    ByVal approvalStatus As Integer) As Integer
            If (invoiceNum Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(invoiceNum,String)
            End If
            If (referenceNum Is Nothing) Then
                Throw New Global.System.ArgumentNullException("referenceNum")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(referenceNum,String)
            End If
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(salesDate,Date)
            If (salesNum Is Nothing) Then
                Throw New Global.System.ArgumentNullException("salesNum")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(salesNum,String)
            End If
            If (sellingType Is Nothing) Then
                Throw New Global.System.ArgumentNullException("sellingType")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(sellingType,String)
            End If
            If (unloadingType Is Nothing) Then
                Throw New Global.System.ArgumentNullException("unloadingType")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(unloadingType,String)
            End If
            If (unloadingVessel_ID Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(unloadingVessel_ID,String)
            End If
            If (unloadingForeignVessel Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(unloadingForeignVessel,String)
            End If
            If (buyer Is Nothing) Then
                Throw New Global.System.ArgumentNullException("buyer")
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(buyer,String)
            End If
            If (catchtDeliveryNum Is Nothing) Then
                Throw New Global.System.ArgumentNullException("catchtDeliveryNum")
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(catchtDeliveryNum,String)
            End If
            Me.Adapter.InsertCommand.Parameters(10).Value = CType(usdRate,Decimal)
            If (contractNum Is Nothing) Then
                Throw New Global.System.ArgumentNullException("contractNum")
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(contractNum,String)
            End If
            If (remarks Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(remarks,String)
            End If
            Me.Adapter.InsertCommand.Parameters(13).Value = CType(encodedBy,Integer)
            Me.Adapter.InsertCommand.Parameters(14).Value = CType(encodedOn,Date)
            Me.Adapter.InsertCommand.Parameters(15).Value = CType(approvalStatus,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal invoiceNum As String,  _
                    ByVal referenceNum As String,  _
                    ByVal salesDate As Date,  _
                    ByVal salesNum As String,  _
                    ByVal sellingType As String,  _
                    ByVal unloadingType As String,  _
                    ByVal unloadingVessel_ID As String,  _
                    ByVal unloadingForeignVessel As String,  _
                    ByVal buyer As String,  _
                    ByVal catchtDeliveryNum As String,  _
                    ByVal usdRate As Decimal,  _
                    ByVal contractNum As String,  _
                    ByVal remarks As String,  _
                    ByVal encodedBy As Integer,  _
                    ByVal encodedOn As Date,  _
                    ByVal approvalStatus As Integer,  _
                    ByVal Original_salesReport_ID As Integer,  _
                    ByVal Original_invoiceNum As String,  _
                    ByVal Original_referenceNum As String,  _
                    ByVal Original_salesDate As Date,  _
                    ByVal Original_salesNum As String,  _
                    ByVal Original_sellingType As String,  _
                    ByVal Original_unloadingType As String,  _
                    ByVal Original_unloadingVessel_ID As String,  _
                    ByVal Original_unloadingForeignVessel As String,  _
                    ByVal Original_buyer As String,  _
                    ByVal Original_catchtDeliveryNum As String,  _
                    ByVal Original_usdRate As Decimal,  _
                    ByVal Original_contractNum As String,  _
                    ByVal Original_remarks As String,  _
                    ByVal Original_encodedBy As Integer,  _
                    ByVal Original_encodedOn As Date,  _
                    ByVal Original_approvalStatus As Integer,  _
                    ByVal salesReport_ID As Integer) As Integer
            If (invoiceNum Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(invoiceNum,String)
            End If
            If (referenceNum Is Nothing) Then
                Throw New Global.System.ArgumentNullException("referenceNum")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(referenceNum,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(salesDate,Date)
            If (salesNum Is Nothing) Then
                Throw New Global.System.ArgumentNullException("salesNum")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(salesNum,String)
            End If
            If (sellingType Is Nothing) Then
                Throw New Global.System.ArgumentNullException("sellingType")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(sellingType,String)
            End If
            If (unloadingType Is Nothing) Then
                Throw New Global.System.ArgumentNullException("unloadingType")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(unloadingType,String)
            End If
            If (unloadingVessel_ID Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(unloadingVessel_ID,String)
            End If
            If (unloadingForeignVessel Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(unloadingForeignVessel,String)
            End If
            If (buyer Is Nothing) Then
                Throw New Global.System.ArgumentNullException("buyer")
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(buyer,String)
            End If
            If (catchtDeliveryNum Is Nothing) Then
                Throw New Global.System.ArgumentNullException("catchtDeliveryNum")
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(catchtDeliveryNum,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(usdRate,Decimal)
            If (contractNum Is Nothing) Then
                Throw New Global.System.ArgumentNullException("contractNum")
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(contractNum,String)
            End If
            If (remarks Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(remarks,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(13).Value = CType(encodedBy,Integer)
            Me.Adapter.UpdateCommand.Parameters(14).Value = CType(encodedOn,Date)
            Me.Adapter.UpdateCommand.Parameters(15).Value = CType(approvalStatus,Integer)
            Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_salesReport_ID,Integer)
            If (Original_invoiceNum Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_invoiceNum,String)
            End If
            If (Original_referenceNum Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_referenceNum")
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_referenceNum,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Original_salesDate,Date)
            If (Original_salesNum Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_salesNum")
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Original_salesNum,String)
            End If
            If (Original_sellingType Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_sellingType")
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(Original_sellingType,String)
            End If
            If (Original_unloadingType Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_unloadingType")
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(Original_unloadingType,String)
            End If
            If (Original_unloadingVessel_ID Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(25).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(Original_unloadingVessel_ID,String)
            End If
            If (Original_unloadingForeignVessel Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(27).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(Original_unloadingForeignVessel,String)
            End If
            If (Original_buyer Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_buyer")
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(Original_buyer,String)
            End If
            If (Original_catchtDeliveryNum Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_catchtDeliveryNum")
            Else
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(Original_catchtDeliveryNum,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(30).Value = CType(Original_usdRate,Decimal)
            If (Original_contractNum Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Original_contractNum")
            Else
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(Original_contractNum,String)
            End If
            If (Original_remarks Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(33).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(Original_remarks,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(34).Value = CType(Original_encodedBy,Integer)
            Me.Adapter.UpdateCommand.Parameters(35).Value = CType(Original_encodedOn,Date)
            Me.Adapter.UpdateCommand.Parameters(36).Value = CType(Original_approvalStatus,Integer)
            Me.Adapter.UpdateCommand.Parameters(37).Value = CType(salesReport_ID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal invoiceNum As String,  _
                    ByVal referenceNum As String,  _
                    ByVal salesDate As Date,  _
                    ByVal salesNum As String,  _
                    ByVal sellingType As String,  _
                    ByVal unloadingType As String,  _
                    ByVal unloadingVessel_ID As String,  _
                    ByVal unloadingForeignVessel As String,  _
                    ByVal buyer As String,  _
                    ByVal catchtDeliveryNum As String,  _
                    ByVal usdRate As Decimal,  _
                    ByVal contractNum As String,  _
                    ByVal remarks As String,  _
                    ByVal encodedBy As Integer,  _
                    ByVal encodedOn As Date,  _
                    ByVal approvalStatus As Integer,  _
                    ByVal Original_salesReport_ID As Integer,  _
                    ByVal Original_invoiceNum As String,  _
                    ByVal Original_referenceNum As String,  _
                    ByVal Original_salesDate As Date,  _
                    ByVal Original_salesNum As String,  _
                    ByVal Original_sellingType As String,  _
                    ByVal Original_unloadingType As String,  _
                    ByVal Original_unloadingVessel_ID As String,  _
                    ByVal Original_unloadingForeignVessel As String,  _
                    ByVal Original_buyer As String,  _
                    ByVal Original_catchtDeliveryNum As String,  _
                    ByVal Original_usdRate As Decimal,  _
                    ByVal Original_contractNum As String,  _
                    ByVal Original_remarks As String,  _
                    ByVal Original_encodedBy As Integer,  _
                    ByVal Original_encodedOn As Date,  _
                    ByVal Original_approvalStatus As Integer) As Integer
            Return Me.Update(invoiceNum, referenceNum, salesDate, salesNum, sellingType, unloadingType, unloadingVessel_ID, unloadingForeignVessel, buyer, catchtDeliveryNum, usdRate, contractNum, remarks, encodedBy, encodedOn, approvalStatus, Original_salesReport_ID, Original_invoiceNum, Original_referenceNum, Original_salesDate, Original_salesNum, Original_sellingType, Original_unloadingType, Original_unloadingVessel_ID, Original_unloadingForeignVessel, Original_buyer, Original_catchtDeliveryNum, Original_usdRate, Original_contractNum, Original_remarks, Original_encodedBy, Original_encodedOn, Original_approvalStatus, Original_salesReport_ID)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class trans_SalesReportCatcherTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "trans_SalesReportCatcher"
            tableMapping.ColumnMappings.Add("salesReportCatcher_ID", "salesReportCatcher_ID")
            tableMapping.ColumnMappings.Add("salesReport_ID", "salesReport_ID")
            tableMapping.ColumnMappings.Add("catchActivityDetail_ID", "catchActivityDetail_ID")
            tableMapping.ColumnMappings.Add("skipjack0_300To0_499", "skipjack0_300To0_499")
            tableMapping.ColumnMappings.Add("skipjack0_500To0_999", "skipjack0_500To0_999")
            tableMapping.ColumnMappings.Add("skipjack1_0To1_39", "skipjack1_0To1_39")
            tableMapping.ColumnMappings.Add("skipjack1_4To1_79", "skipjack1_4To1_79")
            tableMapping.ColumnMappings.Add("skipjack1_8To2_49", "skipjack1_8To2_49")
            tableMapping.ColumnMappings.Add("skipjack2_5To3_49", "skipjack2_5To3_49")
            tableMapping.ColumnMappings.Add("skipjack3_5AndUP", "skipjack3_5AndUP")
            tableMapping.ColumnMappings.Add("yellowfin0_300To0_499", "yellowfin0_300To0_499")
            tableMapping.ColumnMappings.Add("yellowfin0_500To0_999", "yellowfin0_500To0_999")
            tableMapping.ColumnMappings.Add("yellowfin1_0To1_49", "yellowfin1_0To1_49")
            tableMapping.ColumnMappings.Add("yellowfin1_5To2_49", "yellowfin1_5To2_49")
            tableMapping.ColumnMappings.Add("yellowfin2_5To3_49", "yellowfin2_5To3_49")
            tableMapping.ColumnMappings.Add("yellowfin3_5To4_99", "yellowfin3_5To4_99")
            tableMapping.ColumnMappings.Add("yellowfin5_0To9_99", "yellowfin5_0To9_99")
            tableMapping.ColumnMappings.Add("yellowfin10AndUpGood", "yellowfin10AndUpGood")
            tableMapping.ColumnMappings.Add("yellowfin10AndUpDeformed", "yellowfin10AndUpDeformed")
            tableMapping.ColumnMappings.Add("bigeye0_500To0_999", "bigeye0_500To0_999")
            tableMapping.ColumnMappings.Add("bigeye1_0To1_49", "bigeye1_0To1_49")
            tableMapping.ColumnMappings.Add("bigeye1_5To2_49", "bigeye1_5To2_49")
            tableMapping.ColumnMappings.Add("bigeye2_5To3_49", "bigeye2_5To3_49")
            tableMapping.ColumnMappings.Add("bigeye3_5To4_99", "bigeye3_5To4_99")
            tableMapping.ColumnMappings.Add("bigeye5_0To9_99", "bigeye5_0To9_99")
            tableMapping.ColumnMappings.Add("bigeye10AndUP", "bigeye10AndUP")
            tableMapping.ColumnMappings.Add("bonito", "bonito")
            tableMapping.ColumnMappings.Add("fishmeal", "fishmeal")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[trans_SalesReportCatcher] WHERE (([salesReportCatcher_ID] = @O"& _ 
                "riginal_salesReportCatcher_ID) AND ([salesReport_ID] = @Original_salesReport_ID)"& _ 
                " AND ([catchActivityDetail_ID] = @Original_catchActivityDetail_ID) AND ([skipjac"& _ 
                "k0_300To0_499] = @Original_skipjack0_300To0_499) AND ([skipjack0_500To0_999] = @"& _ 
                "Original_skipjack0_500To0_999) AND ([skipjack1_0To1_39] = @Original_skipjack1_0T"& _ 
                "o1_39) AND ([skipjack1_4To1_79] = @Original_skipjack1_4To1_79) AND ([skipjack1_8"& _ 
                "To2_49] = @Original_skipjack1_8To2_49) AND ([skipjack2_5To3_49] = @Original_skip"& _ 
                "jack2_5To3_49) AND ([skipjack3_5AndUP] = @Original_skipjack3_5AndUP) AND ([yello"& _ 
                "wfin0_300To0_499] = @Original_yellowfin0_300To0_499) AND ([yellowfin0_500To0_999"& _ 
                "] = @Original_yellowfin0_500To0_999) AND ([yellowfin1_0To1_49] = @Original_yello"& _ 
                "wfin1_0To1_49) AND ([yellowfin1_5To2_49] = @Original_yellowfin1_5To2_49) AND ([y"& _ 
                "ellowfin2_5To3_49] = @Original_yellowfin2_5To3_49) AND ([yellowfin3_5To4_99] = @"& _ 
                "Original_yellowfin3_5To4_99) AND ([yellowfin5_0To9_99] = @Original_yellowfin5_0T"& _ 
                "o9_99) AND ([yellowfin10AndUpGood] = @Original_yellowfin10AndUpGood) AND ([yello"& _ 
                "wfin10AndUpDeformed] = @Original_yellowfin10AndUpDeformed) AND ([bigeye0_500To0_"& _ 
                "999] = @Original_bigeye0_500To0_999) AND ([bigeye1_0To1_49] = @Original_bigeye1_"& _ 
                "0To1_49) AND ([bigeye1_5To2_49] = @Original_bigeye1_5To2_49) AND ([bigeye2_5To3_"& _ 
                "49] = @Original_bigeye2_5To3_49) AND ([bigeye3_5To4_99] = @Original_bigeye3_5To4"& _ 
                "_99) AND ([bigeye5_0To9_99] = @Original_bigeye5_0To9_99) AND ([bigeye10AndUP] = "& _ 
                "@Original_bigeye10AndUP) AND ([bonito] = @Original_bonito) AND ([fishmeal] = @Or"& _ 
                "iginal_fishmeal))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_salesReportCatcher_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "salesReportCatcher_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_salesReport_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "salesReport_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_catchActivityDetail_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "catchActivityDetail_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_skipjack0_300To0_499", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "skipjack0_300To0_499", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_skipjack0_500To0_999", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "skipjack0_500To0_999", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_skipjack1_0To1_39", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "skipjack1_0To1_39", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_skipjack1_4To1_79", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "skipjack1_4To1_79", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_skipjack1_8To2_49", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "skipjack1_8To2_49", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_skipjack2_5To3_49", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "skipjack2_5To3_49", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_skipjack3_5AndUP", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "skipjack3_5AndUP", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_yellowfin0_300To0_499", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "yellowfin0_300To0_499", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_yellowfin0_500To0_999", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "yellowfin0_500To0_999", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_yellowfin1_0To1_49", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "yellowfin1_0To1_49", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_yellowfin1_5To2_49", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "yellowfin1_5To2_49", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_yellowfin2_5To3_49", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "yellowfin2_5To3_49", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_yellowfin3_5To4_99", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "yellowfin3_5To4_99", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_yellowfin5_0To9_99", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "yellowfin5_0To9_99", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_yellowfin10AndUpGood", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "yellowfin10AndUpGood", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_yellowfin10AndUpDeformed", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "yellowfin10AndUpDeformed", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_bigeye0_500To0_999", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "bigeye0_500To0_999", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_bigeye1_0To1_49", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "bigeye1_0To1_49", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_bigeye1_5To2_49", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "bigeye1_5To2_49", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_bigeye2_5To3_49", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "bigeye2_5To3_49", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_bigeye3_5To4_99", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "bigeye3_5To4_99", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_bigeye5_0To9_99", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "bigeye5_0To9_99", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_bigeye10AndUP", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "bigeye10AndUP", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_bonito", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "bonito", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_fishmeal", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "fishmeal", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[trans_SalesReportCatcher] ([salesReport_ID], [catchActivityDet"& _ 
                "ail_ID], [skipjack0_300To0_499], [skipjack0_500To0_999], [skipjack1_0To1_39], [s"& _ 
                "kipjack1_4To1_79], [skipjack1_8To2_49], [skipjack2_5To3_49], [skipjack3_5AndUP],"& _ 
                " [yellowfin0_300To0_499], [yellowfin0_500To0_999], [yellowfin1_0To1_49], [yellow"& _ 
                "fin1_5To2_49], [yellowfin2_5To3_49], [yellowfin3_5To4_99], [yellowfin5_0To9_99],"& _ 
                " [yellowfin10AndUpGood], [yellowfin10AndUpDeformed], [bigeye0_500To0_999], [bige"& _ 
                "ye1_0To1_49], [bigeye1_5To2_49], [bigeye2_5To3_49], [bigeye3_5To4_99], [bigeye5_"& _ 
                "0To9_99], [bigeye10AndUP], [bonito], [fishmeal]) VALUES (@salesReport_ID, @catch"& _ 
                "ActivityDetail_ID, @skipjack0_300To0_499, @skipjack0_500To0_999, @skipjack1_0To1"& _ 
                "_39, @skipjack1_4To1_79, @skipjack1_8To2_49, @skipjack2_5To3_49, @skipjack3_5And"& _ 
                "UP, @yellowfin0_300To0_499, @yellowfin0_500To0_999, @yellowfin1_0To1_49, @yellow"& _ 
                "fin1_5To2_49, @yellowfin2_5To3_49, @yellowfin3_5To4_99, @yellowfin5_0To9_99, @ye"& _ 
                "llowfin10AndUpGood, @yellowfin10AndUpDeformed, @bigeye0_500To0_999, @bigeye1_0To"& _ 
                "1_49, @bigeye1_5To2_49, @bigeye2_5To3_49, @bigeye3_5To4_99, @bigeye5_0To9_99, @b"& _ 
                "igeye10AndUP, @bonito, @fishmeal);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT salesReportCatcher_ID, salesReport_ID"& _ 
                ", catchActivityDetail_ID, skipjack0_300To0_499, skipjack0_500To0_999, skipjack1_"& _ 
                "0To1_39, skipjack1_4To1_79, skipjack1_8To2_49, skipjack2_5To3_49, skipjack3_5And"& _ 
                "UP, yellowfin0_300To0_499, yellowfin0_500To0_999, yellowfin1_0To1_49, yellowfin1"& _ 
                "_5To2_49, yellowfin2_5To3_49, yellowfin3_5To4_99, yellowfin5_0To9_99, yellowfin1"& _ 
                "0AndUpGood, yellowfin10AndUpDeformed, bigeye0_500To0_999, bigeye1_0To1_49, bigey"& _ 
                "e1_5To2_49, bigeye2_5To3_49, bigeye3_5To4_99, bigeye5_0To9_99, bigeye10AndUP, bo"& _ 
                "nito, fishmeal FROM trans_SalesReportCatcher WHERE (salesReportCatcher_ID = SCOP"& _ 
                "E_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@salesReport_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "salesReport_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@catchActivityDetail_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "catchActivityDetail_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@skipjack0_300To0_499", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "skipjack0_300To0_499", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@skipjack0_500To0_999", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "skipjack0_500To0_999", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@skipjack1_0To1_39", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "skipjack1_0To1_39", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@skipjack1_4To1_79", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "skipjack1_4To1_79", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@skipjack1_8To2_49", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "skipjack1_8To2_49", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@skipjack2_5To3_49", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "skipjack2_5To3_49", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@skipjack3_5AndUP", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "skipjack3_5AndUP", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@yellowfin0_300To0_499", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "yellowfin0_300To0_499", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@yellowfin0_500To0_999", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "yellowfin0_500To0_999", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@yellowfin1_0To1_49", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "yellowfin1_0To1_49", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@yellowfin1_5To2_49", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "yellowfin1_5To2_49", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@yellowfin2_5To3_49", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "yellowfin2_5To3_49", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@yellowfin3_5To4_99", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "yellowfin3_5To4_99", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@yellowfin5_0To9_99", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "yellowfin5_0To9_99", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@yellowfin10AndUpGood", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "yellowfin10AndUpGood", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@yellowfin10AndUpDeformed", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "yellowfin10AndUpDeformed", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@bigeye0_500To0_999", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "bigeye0_500To0_999", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@bigeye1_0To1_49", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "bigeye1_0To1_49", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@bigeye1_5To2_49", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "bigeye1_5To2_49", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@bigeye2_5To3_49", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "bigeye2_5To3_49", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@bigeye3_5To4_99", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "bigeye3_5To4_99", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@bigeye5_0To9_99", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "bigeye5_0To9_99", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@bigeye10AndUP", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "bigeye10AndUP", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@bonito", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "bonito", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@fishmeal", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "fishmeal", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[trans_SalesReportCatcher] SET [salesReport_ID] = @salesReport_ID, ["& _ 
                "catchActivityDetail_ID] = @catchActivityDetail_ID, [skipjack0_300To0_499] = @ski"& _ 
                "pjack0_300To0_499, [skipjack0_500To0_999] = @skipjack0_500To0_999, [skipjack1_0T"& _ 
                "o1_39] = @skipjack1_0To1_39, [skipjack1_4To1_79] = @skipjack1_4To1_79, [skipjack"& _ 
                "1_8To2_49] = @skipjack1_8To2_49, [skipjack2_5To3_49] = @skipjack2_5To3_49, [skip"& _ 
                "jack3_5AndUP] = @skipjack3_5AndUP, [yellowfin0_300To0_499] = @yellowfin0_300To0_"& _ 
                "499, [yellowfin0_500To0_999] = @yellowfin0_500To0_999, [yellowfin1_0To1_49] = @y"& _ 
                "ellowfin1_0To1_49, [yellowfin1_5To2_49] = @yellowfin1_5To2_49, [yellowfin2_5To3_"& _ 
                "49] = @yellowfin2_5To3_49, [yellowfin3_5To4_99] = @yellowfin3_5To4_99, [yellowfi"& _ 
                "n5_0To9_99] = @yellowfin5_0To9_99, [yellowfin10AndUpGood] = @yellowfin10AndUpGoo"& _ 
                "d, [yellowfin10AndUpDeformed] = @yellowfin10AndUpDeformed, [bigeye0_500To0_999] "& _ 
                "= @bigeye0_500To0_999, [bigeye1_0To1_49] = @bigeye1_0To1_49, [bigeye1_5To2_49] ="& _ 
                " @bigeye1_5To2_49, [bigeye2_5To3_49] = @bigeye2_5To3_49, [bigeye3_5To4_99] = @bi"& _ 
                "geye3_5To4_99, [bigeye5_0To9_99] = @bigeye5_0To9_99, [bigeye10AndUP] = @bigeye10"& _ 
                "AndUP, [bonito] = @bonito, [fishmeal] = @fishmeal WHERE (([salesReportCatcher_ID"& _ 
                "] = @Original_salesReportCatcher_ID) AND ([salesReport_ID] = @Original_salesRepo"& _ 
                "rt_ID) AND ([catchActivityDetail_ID] = @Original_catchActivityDetail_ID) AND ([s"& _ 
                "kipjack0_300To0_499] = @Original_skipjack0_300To0_499) AND ([skipjack0_500To0_99"& _ 
                "9] = @Original_skipjack0_500To0_999) AND ([skipjack1_0To1_39] = @Original_skipja"& _ 
                "ck1_0To1_39) AND ([skipjack1_4To1_79] = @Original_skipjack1_4To1_79) AND ([skipj"& _ 
                "ack1_8To2_49] = @Original_skipjack1_8To2_49) AND ([skipjack2_5To3_49] = @Origina"& _ 
                "l_skipjack2_5To3_49) AND ([skipjack3_5AndUP] = @Original_skipjack3_5AndUP) AND ("& _ 
                "[yellowfin0_300To0_499] = @Original_yellowfin0_300To0_499) AND ([yellowfin0_500T"& _ 
                "o0_999] = @Original_yellowfin0_500To0_999) AND ([yellowfin1_0To1_49] = @Original"& _ 
                "_yellowfin1_0To1_49) AND ([yellowfin1_5To2_49] = @Original_yellowfin1_5To2_49) A"& _ 
                "ND ([yellowfin2_5To3_49] = @Original_yellowfin2_5To3_49) AND ([yellowfin3_5To4_9"& _ 
                "9] = @Original_yellowfin3_5To4_99) AND ([yellowfin5_0To9_99] = @Original_yellowf"& _ 
                "in5_0To9_99) AND ([yellowfin10AndUpGood] = @Original_yellowfin10AndUpGood) AND ("& _ 
                "[yellowfin10AndUpDeformed] = @Original_yellowfin10AndUpDeformed) AND ([bigeye0_5"& _ 
                "00To0_999] = @Original_bigeye0_500To0_999) AND ([bigeye1_0To1_49] = @Original_bi"& _ 
                "geye1_0To1_49) AND ([bigeye1_5To2_49] = @Original_bigeye1_5To2_49) AND ([bigeye2"& _ 
                "_5To3_49] = @Original_bigeye2_5To3_49) AND ([bigeye3_5To4_99] = @Original_bigeye"& _ 
                "3_5To4_99) AND ([bigeye5_0To9_99] = @Original_bigeye5_0To9_99) AND ([bigeye10And"& _ 
                "UP] = @Original_bigeye10AndUP) AND ([bonito] = @Original_bonito) AND ([fishmeal]"& _ 
                " = @Original_fishmeal));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT salesReportCatcher_ID, salesReport_ID, catchAct"& _ 
                "ivityDetail_ID, skipjack0_300To0_499, skipjack0_500To0_999, skipjack1_0To1_39, s"& _ 
                "kipjack1_4To1_79, skipjack1_8To2_49, skipjack2_5To3_49, skipjack3_5AndUP, yellow"& _ 
                "fin0_300To0_499, yellowfin0_500To0_999, yellowfin1_0To1_49, yellowfin1_5To2_49, "& _ 
                "yellowfin2_5To3_49, yellowfin3_5To4_99, yellowfin5_0To9_99, yellowfin10AndUpGood"& _ 
                ", yellowfin10AndUpDeformed, bigeye0_500To0_999, bigeye1_0To1_49, bigeye1_5To2_49"& _ 
                ", bigeye2_5To3_49, bigeye3_5To4_99, bigeye5_0To9_99, bigeye10AndUP, bonito, fish"& _ 
                "meal FROM trans_SalesReportCatcher WHERE (salesReportCatcher_ID = @salesReportCa"& _ 
                "tcher_ID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@salesReport_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "salesReport_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@catchActivityDetail_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "catchActivityDetail_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@skipjack0_300To0_499", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "skipjack0_300To0_499", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@skipjack0_500To0_999", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "skipjack0_500To0_999", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@skipjack1_0To1_39", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "skipjack1_0To1_39", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@skipjack1_4To1_79", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "skipjack1_4To1_79", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@skipjack1_8To2_49", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "skipjack1_8To2_49", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@skipjack2_5To3_49", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "skipjack2_5To3_49", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@skipjack3_5AndUP", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "skipjack3_5AndUP", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@yellowfin0_300To0_499", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "yellowfin0_300To0_499", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@yellowfin0_500To0_999", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "yellowfin0_500To0_999", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@yellowfin1_0To1_49", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "yellowfin1_0To1_49", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@yellowfin1_5To2_49", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "yellowfin1_5To2_49", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@yellowfin2_5To3_49", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "yellowfin2_5To3_49", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@yellowfin3_5To4_99", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "yellowfin3_5To4_99", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@yellowfin5_0To9_99", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "yellowfin5_0To9_99", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@yellowfin10AndUpGood", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "yellowfin10AndUpGood", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@yellowfin10AndUpDeformed", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "yellowfin10AndUpDeformed", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@bigeye0_500To0_999", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "bigeye0_500To0_999", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@bigeye1_0To1_49", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "bigeye1_0To1_49", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@bigeye1_5To2_49", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "bigeye1_5To2_49", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@bigeye2_5To3_49", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "bigeye2_5To3_49", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@bigeye3_5To4_99", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "bigeye3_5To4_99", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@bigeye5_0To9_99", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "bigeye5_0To9_99", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@bigeye10AndUP", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "bigeye10AndUP", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@bonito", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "bonito", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@fishmeal", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "fishmeal", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_salesReportCatcher_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "salesReportCatcher_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_salesReport_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "salesReport_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_catchActivityDetail_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "catchActivityDetail_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_skipjack0_300To0_499", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "skipjack0_300To0_499", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_skipjack0_500To0_999", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "skipjack0_500To0_999", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_skipjack1_0To1_39", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "skipjack1_0To1_39", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_skipjack1_4To1_79", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "skipjack1_4To1_79", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_skipjack1_8To2_49", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "skipjack1_8To2_49", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_skipjack2_5To3_49", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "skipjack2_5To3_49", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_skipjack3_5AndUP", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "skipjack3_5AndUP", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_yellowfin0_300To0_499", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "yellowfin0_300To0_499", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_yellowfin0_500To0_999", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "yellowfin0_500To0_999", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_yellowfin1_0To1_49", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "yellowfin1_0To1_49", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_yellowfin1_5To2_49", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "yellowfin1_5To2_49", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_yellowfin2_5To3_49", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "yellowfin2_5To3_49", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_yellowfin3_5To4_99", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "yellowfin3_5To4_99", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_yellowfin5_0To9_99", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "yellowfin5_0To9_99", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_yellowfin10AndUpGood", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "yellowfin10AndUpGood", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_yellowfin10AndUpDeformed", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "yellowfin10AndUpDeformed", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_bigeye0_500To0_999", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "bigeye0_500To0_999", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_bigeye1_0To1_49", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "bigeye1_0To1_49", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_bigeye1_5To2_49", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "bigeye1_5To2_49", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_bigeye2_5To3_49", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "bigeye2_5To3_49", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_bigeye3_5To4_99", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "bigeye3_5To4_99", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_bigeye5_0To9_99", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "bigeye5_0To9_99", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_bigeye10AndUP", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "bigeye10AndUP", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_bonito", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "bonito", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_fishmeal", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "fishmeal", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@salesReportCatcher_ID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "salesReportCatcher_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.MarketingSalesSystem.Settings.Default.MKDBConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT salesReportCatcher_ID, salesReport_ID, catchActivityDetail_ID, skipjack0_3"& _ 
                "00To0_499, skipjack0_500To0_999, skipjack1_0To1_39, skipjack1_4To1_79, skipjack1"& _ 
                "_8To2_49, skipjack2_5To3_49, skipjack3_5AndUP, yellowfin0_300To0_499, yellowfin0"& _ 
                "_500To0_999, yellowfin1_0To1_49, yellowfin1_5To2_49, yellowfin2_5To3_49, yellowf"& _ 
                "in3_5To4_99, yellowfin5_0To9_99, yellowfin10AndUpGood, yellowfin10AndUpDeformed,"& _ 
                " bigeye0_500To0_999, bigeye1_0To1_49, bigeye1_5To2_49, bigeye2_5To3_49, bigeye3_"& _ 
                "5To4_99, bigeye5_0To9_99, bigeye10AndUP, bonito, fishmeal FROM dbo.trans_SalesRe"& _ 
                "portCatcher"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MKDBDataSet.trans_SalesReportCatcherDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As MKDBDataSet.trans_SalesReportCatcherDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As MKDBDataSet.trans_SalesReportCatcherDataTable = New MKDBDataSet.trans_SalesReportCatcherDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As MKDBDataSet.trans_SalesReportCatcherDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As MKDBDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "trans_SalesReportCatcher")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete( _
                    ByVal Original_salesReportCatcher_ID As Integer,  _
                    ByVal Original_salesReport_ID As Integer,  _
                    ByVal Original_catchActivityDetail_ID As Integer,  _
                    ByVal Original_skipjack0_300To0_499 As Decimal,  _
                    ByVal Original_skipjack0_500To0_999 As Decimal,  _
                    ByVal Original_skipjack1_0To1_39 As Decimal,  _
                    ByVal Original_skipjack1_4To1_79 As Decimal,  _
                    ByVal Original_skipjack1_8To2_49 As Decimal,  _
                    ByVal Original_skipjack2_5To3_49 As Decimal,  _
                    ByVal Original_skipjack3_5AndUP As Decimal,  _
                    ByVal Original_yellowfin0_300To0_499 As Decimal,  _
                    ByVal Original_yellowfin0_500To0_999 As Decimal,  _
                    ByVal Original_yellowfin1_0To1_49 As Decimal,  _
                    ByVal Original_yellowfin1_5To2_49 As Decimal,  _
                    ByVal Original_yellowfin2_5To3_49 As Decimal,  _
                    ByVal Original_yellowfin3_5To4_99 As Decimal,  _
                    ByVal Original_yellowfin5_0To9_99 As Decimal,  _
                    ByVal Original_yellowfin10AndUpGood As Decimal,  _
                    ByVal Original_yellowfin10AndUpDeformed As Decimal,  _
                    ByVal Original_bigeye0_500To0_999 As Decimal,  _
                    ByVal Original_bigeye1_0To1_49 As Decimal,  _
                    ByVal Original_bigeye1_5To2_49 As Decimal,  _
                    ByVal Original_bigeye2_5To3_49 As Decimal,  _
                    ByVal Original_bigeye3_5To4_99 As Decimal,  _
                    ByVal Original_bigeye5_0To9_99 As Decimal,  _
                    ByVal Original_bigeye10AndUP As Decimal,  _
                    ByVal Original_bonito As Decimal,  _
                    ByVal Original_fishmeal As Decimal) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_salesReportCatcher_ID,Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_salesReport_ID,Integer)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_catchActivityDetail_ID,Integer)
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_skipjack0_300To0_499,Decimal)
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_skipjack0_500To0_999,Decimal)
            Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_skipjack1_0To1_39,Decimal)
            Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_skipjack1_4To1_79,Decimal)
            Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_skipjack1_8To2_49,Decimal)
            Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_skipjack2_5To3_49,Decimal)
            Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_skipjack3_5AndUP,Decimal)
            Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_yellowfin0_300To0_499,Decimal)
            Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_yellowfin0_500To0_999,Decimal)
            Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_yellowfin1_0To1_49,Decimal)
            Me.Adapter.DeleteCommand.Parameters(13).Value = CType(Original_yellowfin1_5To2_49,Decimal)
            Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_yellowfin2_5To3_49,Decimal)
            Me.Adapter.DeleteCommand.Parameters(15).Value = CType(Original_yellowfin3_5To4_99,Decimal)
            Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_yellowfin5_0To9_99,Decimal)
            Me.Adapter.DeleteCommand.Parameters(17).Value = CType(Original_yellowfin10AndUpGood,Decimal)
            Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_yellowfin10AndUpDeformed,Decimal)
            Me.Adapter.DeleteCommand.Parameters(19).Value = CType(Original_bigeye0_500To0_999,Decimal)
            Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_bigeye1_0To1_49,Decimal)
            Me.Adapter.DeleteCommand.Parameters(21).Value = CType(Original_bigeye1_5To2_49,Decimal)
            Me.Adapter.DeleteCommand.Parameters(22).Value = CType(Original_bigeye2_5To3_49,Decimal)
            Me.Adapter.DeleteCommand.Parameters(23).Value = CType(Original_bigeye3_5To4_99,Decimal)
            Me.Adapter.DeleteCommand.Parameters(24).Value = CType(Original_bigeye5_0To9_99,Decimal)
            Me.Adapter.DeleteCommand.Parameters(25).Value = CType(Original_bigeye10AndUP,Decimal)
            Me.Adapter.DeleteCommand.Parameters(26).Value = CType(Original_bonito,Decimal)
            Me.Adapter.DeleteCommand.Parameters(27).Value = CType(Original_fishmeal,Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal salesReport_ID As Integer,  _
                    ByVal catchActivityDetail_ID As Integer,  _
                    ByVal skipjack0_300To0_499 As Decimal,  _
                    ByVal skipjack0_500To0_999 As Decimal,  _
                    ByVal skipjack1_0To1_39 As Decimal,  _
                    ByVal skipjack1_4To1_79 As Decimal,  _
                    ByVal skipjack1_8To2_49 As Decimal,  _
                    ByVal skipjack2_5To3_49 As Decimal,  _
                    ByVal skipjack3_5AndUP As Decimal,  _
                    ByVal yellowfin0_300To0_499 As Decimal,  _
                    ByVal yellowfin0_500To0_999 As Decimal,  _
                    ByVal yellowfin1_0To1_49 As Decimal,  _
                    ByVal yellowfin1_5To2_49 As Decimal,  _
                    ByVal yellowfin2_5To3_49 As Decimal,  _
                    ByVal yellowfin3_5To4_99 As Decimal,  _
                    ByVal yellowfin5_0To9_99 As Decimal,  _
                    ByVal yellowfin10AndUpGood As Decimal,  _
                    ByVal yellowfin10AndUpDeformed As Decimal,  _
                    ByVal bigeye0_500To0_999 As Decimal,  _
                    ByVal bigeye1_0To1_49 As Decimal,  _
                    ByVal bigeye1_5To2_49 As Decimal,  _
                    ByVal bigeye2_5To3_49 As Decimal,  _
                    ByVal bigeye3_5To4_99 As Decimal,  _
                    ByVal bigeye5_0To9_99 As Decimal,  _
                    ByVal bigeye10AndUP As Decimal,  _
                    ByVal bonito As Decimal,  _
                    ByVal fishmeal As Decimal) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(salesReport_ID,Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(catchActivityDetail_ID,Integer)
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(skipjack0_300To0_499,Decimal)
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(skipjack0_500To0_999,Decimal)
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(skipjack1_0To1_39,Decimal)
            Me.Adapter.InsertCommand.Parameters(5).Value = CType(skipjack1_4To1_79,Decimal)
            Me.Adapter.InsertCommand.Parameters(6).Value = CType(skipjack1_8To2_49,Decimal)
            Me.Adapter.InsertCommand.Parameters(7).Value = CType(skipjack2_5To3_49,Decimal)
            Me.Adapter.InsertCommand.Parameters(8).Value = CType(skipjack3_5AndUP,Decimal)
            Me.Adapter.InsertCommand.Parameters(9).Value = CType(yellowfin0_300To0_499,Decimal)
            Me.Adapter.InsertCommand.Parameters(10).Value = CType(yellowfin0_500To0_999,Decimal)
            Me.Adapter.InsertCommand.Parameters(11).Value = CType(yellowfin1_0To1_49,Decimal)
            Me.Adapter.InsertCommand.Parameters(12).Value = CType(yellowfin1_5To2_49,Decimal)
            Me.Adapter.InsertCommand.Parameters(13).Value = CType(yellowfin2_5To3_49,Decimal)
            Me.Adapter.InsertCommand.Parameters(14).Value = CType(yellowfin3_5To4_99,Decimal)
            Me.Adapter.InsertCommand.Parameters(15).Value = CType(yellowfin5_0To9_99,Decimal)
            Me.Adapter.InsertCommand.Parameters(16).Value = CType(yellowfin10AndUpGood,Decimal)
            Me.Adapter.InsertCommand.Parameters(17).Value = CType(yellowfin10AndUpDeformed,Decimal)
            Me.Adapter.InsertCommand.Parameters(18).Value = CType(bigeye0_500To0_999,Decimal)
            Me.Adapter.InsertCommand.Parameters(19).Value = CType(bigeye1_0To1_49,Decimal)
            Me.Adapter.InsertCommand.Parameters(20).Value = CType(bigeye1_5To2_49,Decimal)
            Me.Adapter.InsertCommand.Parameters(21).Value = CType(bigeye2_5To3_49,Decimal)
            Me.Adapter.InsertCommand.Parameters(22).Value = CType(bigeye3_5To4_99,Decimal)
            Me.Adapter.InsertCommand.Parameters(23).Value = CType(bigeye5_0To9_99,Decimal)
            Me.Adapter.InsertCommand.Parameters(24).Value = CType(bigeye10AndUP,Decimal)
            Me.Adapter.InsertCommand.Parameters(25).Value = CType(bonito,Decimal)
            Me.Adapter.InsertCommand.Parameters(26).Value = CType(fishmeal,Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal salesReport_ID As Integer,  _
                    ByVal catchActivityDetail_ID As Integer,  _
                    ByVal skipjack0_300To0_499 As Decimal,  _
                    ByVal skipjack0_500To0_999 As Decimal,  _
                    ByVal skipjack1_0To1_39 As Decimal,  _
                    ByVal skipjack1_4To1_79 As Decimal,  _
                    ByVal skipjack1_8To2_49 As Decimal,  _
                    ByVal skipjack2_5To3_49 As Decimal,  _
                    ByVal skipjack3_5AndUP As Decimal,  _
                    ByVal yellowfin0_300To0_499 As Decimal,  _
                    ByVal yellowfin0_500To0_999 As Decimal,  _
                    ByVal yellowfin1_0To1_49 As Decimal,  _
                    ByVal yellowfin1_5To2_49 As Decimal,  _
                    ByVal yellowfin2_5To3_49 As Decimal,  _
                    ByVal yellowfin3_5To4_99 As Decimal,  _
                    ByVal yellowfin5_0To9_99 As Decimal,  _
                    ByVal yellowfin10AndUpGood As Decimal,  _
                    ByVal yellowfin10AndUpDeformed As Decimal,  _
                    ByVal bigeye0_500To0_999 As Decimal,  _
                    ByVal bigeye1_0To1_49 As Decimal,  _
                    ByVal bigeye1_5To2_49 As Decimal,  _
                    ByVal bigeye2_5To3_49 As Decimal,  _
                    ByVal bigeye3_5To4_99 As Decimal,  _
                    ByVal bigeye5_0To9_99 As Decimal,  _
                    ByVal bigeye10AndUP As Decimal,  _
                    ByVal bonito As Decimal,  _
                    ByVal fishmeal As Decimal,  _
                    ByVal Original_salesReportCatcher_ID As Integer,  _
                    ByVal Original_salesReport_ID As Integer,  _
                    ByVal Original_catchActivityDetail_ID As Integer,  _
                    ByVal Original_skipjack0_300To0_499 As Decimal,  _
                    ByVal Original_skipjack0_500To0_999 As Decimal,  _
                    ByVal Original_skipjack1_0To1_39 As Decimal,  _
                    ByVal Original_skipjack1_4To1_79 As Decimal,  _
                    ByVal Original_skipjack1_8To2_49 As Decimal,  _
                    ByVal Original_skipjack2_5To3_49 As Decimal,  _
                    ByVal Original_skipjack3_5AndUP As Decimal,  _
                    ByVal Original_yellowfin0_300To0_499 As Decimal,  _
                    ByVal Original_yellowfin0_500To0_999 As Decimal,  _
                    ByVal Original_yellowfin1_0To1_49 As Decimal,  _
                    ByVal Original_yellowfin1_5To2_49 As Decimal,  _
                    ByVal Original_yellowfin2_5To3_49 As Decimal,  _
                    ByVal Original_yellowfin3_5To4_99 As Decimal,  _
                    ByVal Original_yellowfin5_0To9_99 As Decimal,  _
                    ByVal Original_yellowfin10AndUpGood As Decimal,  _
                    ByVal Original_yellowfin10AndUpDeformed As Decimal,  _
                    ByVal Original_bigeye0_500To0_999 As Decimal,  _
                    ByVal Original_bigeye1_0To1_49 As Decimal,  _
                    ByVal Original_bigeye1_5To2_49 As Decimal,  _
                    ByVal Original_bigeye2_5To3_49 As Decimal,  _
                    ByVal Original_bigeye3_5To4_99 As Decimal,  _
                    ByVal Original_bigeye5_0To9_99 As Decimal,  _
                    ByVal Original_bigeye10AndUP As Decimal,  _
                    ByVal Original_bonito As Decimal,  _
                    ByVal Original_fishmeal As Decimal,  _
                    ByVal salesReportCatcher_ID As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(salesReport_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(catchActivityDetail_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(skipjack0_300To0_499,Decimal)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(skipjack0_500To0_999,Decimal)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(skipjack1_0To1_39,Decimal)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(skipjack1_4To1_79,Decimal)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(skipjack1_8To2_49,Decimal)
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(skipjack2_5To3_49,Decimal)
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(skipjack3_5AndUP,Decimal)
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(yellowfin0_300To0_499,Decimal)
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(yellowfin0_500To0_999,Decimal)
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(yellowfin1_0To1_49,Decimal)
            Me.Adapter.UpdateCommand.Parameters(12).Value = CType(yellowfin1_5To2_49,Decimal)
            Me.Adapter.UpdateCommand.Parameters(13).Value = CType(yellowfin2_5To3_49,Decimal)
            Me.Adapter.UpdateCommand.Parameters(14).Value = CType(yellowfin3_5To4_99,Decimal)
            Me.Adapter.UpdateCommand.Parameters(15).Value = CType(yellowfin5_0To9_99,Decimal)
            Me.Adapter.UpdateCommand.Parameters(16).Value = CType(yellowfin10AndUpGood,Decimal)
            Me.Adapter.UpdateCommand.Parameters(17).Value = CType(yellowfin10AndUpDeformed,Decimal)
            Me.Adapter.UpdateCommand.Parameters(18).Value = CType(bigeye0_500To0_999,Decimal)
            Me.Adapter.UpdateCommand.Parameters(19).Value = CType(bigeye1_0To1_49,Decimal)
            Me.Adapter.UpdateCommand.Parameters(20).Value = CType(bigeye1_5To2_49,Decimal)
            Me.Adapter.UpdateCommand.Parameters(21).Value = CType(bigeye2_5To3_49,Decimal)
            Me.Adapter.UpdateCommand.Parameters(22).Value = CType(bigeye3_5To4_99,Decimal)
            Me.Adapter.UpdateCommand.Parameters(23).Value = CType(bigeye5_0To9_99,Decimal)
            Me.Adapter.UpdateCommand.Parameters(24).Value = CType(bigeye10AndUP,Decimal)
            Me.Adapter.UpdateCommand.Parameters(25).Value = CType(bonito,Decimal)
            Me.Adapter.UpdateCommand.Parameters(26).Value = CType(fishmeal,Decimal)
            Me.Adapter.UpdateCommand.Parameters(27).Value = CType(Original_salesReportCatcher_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(28).Value = CType(Original_salesReport_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(29).Value = CType(Original_catchActivityDetail_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(30).Value = CType(Original_skipjack0_300To0_499,Decimal)
            Me.Adapter.UpdateCommand.Parameters(31).Value = CType(Original_skipjack0_500To0_999,Decimal)
            Me.Adapter.UpdateCommand.Parameters(32).Value = CType(Original_skipjack1_0To1_39,Decimal)
            Me.Adapter.UpdateCommand.Parameters(33).Value = CType(Original_skipjack1_4To1_79,Decimal)
            Me.Adapter.UpdateCommand.Parameters(34).Value = CType(Original_skipjack1_8To2_49,Decimal)
            Me.Adapter.UpdateCommand.Parameters(35).Value = CType(Original_skipjack2_5To3_49,Decimal)
            Me.Adapter.UpdateCommand.Parameters(36).Value = CType(Original_skipjack3_5AndUP,Decimal)
            Me.Adapter.UpdateCommand.Parameters(37).Value = CType(Original_yellowfin0_300To0_499,Decimal)
            Me.Adapter.UpdateCommand.Parameters(38).Value = CType(Original_yellowfin0_500To0_999,Decimal)
            Me.Adapter.UpdateCommand.Parameters(39).Value = CType(Original_yellowfin1_0To1_49,Decimal)
            Me.Adapter.UpdateCommand.Parameters(40).Value = CType(Original_yellowfin1_5To2_49,Decimal)
            Me.Adapter.UpdateCommand.Parameters(41).Value = CType(Original_yellowfin2_5To3_49,Decimal)
            Me.Adapter.UpdateCommand.Parameters(42).Value = CType(Original_yellowfin3_5To4_99,Decimal)
            Me.Adapter.UpdateCommand.Parameters(43).Value = CType(Original_yellowfin5_0To9_99,Decimal)
            Me.Adapter.UpdateCommand.Parameters(44).Value = CType(Original_yellowfin10AndUpGood,Decimal)
            Me.Adapter.UpdateCommand.Parameters(45).Value = CType(Original_yellowfin10AndUpDeformed,Decimal)
            Me.Adapter.UpdateCommand.Parameters(46).Value = CType(Original_bigeye0_500To0_999,Decimal)
            Me.Adapter.UpdateCommand.Parameters(47).Value = CType(Original_bigeye1_0To1_49,Decimal)
            Me.Adapter.UpdateCommand.Parameters(48).Value = CType(Original_bigeye1_5To2_49,Decimal)
            Me.Adapter.UpdateCommand.Parameters(49).Value = CType(Original_bigeye2_5To3_49,Decimal)
            Me.Adapter.UpdateCommand.Parameters(50).Value = CType(Original_bigeye3_5To4_99,Decimal)
            Me.Adapter.UpdateCommand.Parameters(51).Value = CType(Original_bigeye5_0To9_99,Decimal)
            Me.Adapter.UpdateCommand.Parameters(52).Value = CType(Original_bigeye10AndUP,Decimal)
            Me.Adapter.UpdateCommand.Parameters(53).Value = CType(Original_bonito,Decimal)
            Me.Adapter.UpdateCommand.Parameters(54).Value = CType(Original_fishmeal,Decimal)
            Me.Adapter.UpdateCommand.Parameters(55).Value = CType(salesReportCatcher_ID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal salesReport_ID As Integer,  _
                    ByVal catchActivityDetail_ID As Integer,  _
                    ByVal skipjack0_300To0_499 As Decimal,  _
                    ByVal skipjack0_500To0_999 As Decimal,  _
                    ByVal skipjack1_0To1_39 As Decimal,  _
                    ByVal skipjack1_4To1_79 As Decimal,  _
                    ByVal skipjack1_8To2_49 As Decimal,  _
                    ByVal skipjack2_5To3_49 As Decimal,  _
                    ByVal skipjack3_5AndUP As Decimal,  _
                    ByVal yellowfin0_300To0_499 As Decimal,  _
                    ByVal yellowfin0_500To0_999 As Decimal,  _
                    ByVal yellowfin1_0To1_49 As Decimal,  _
                    ByVal yellowfin1_5To2_49 As Decimal,  _
                    ByVal yellowfin2_5To3_49 As Decimal,  _
                    ByVal yellowfin3_5To4_99 As Decimal,  _
                    ByVal yellowfin5_0To9_99 As Decimal,  _
                    ByVal yellowfin10AndUpGood As Decimal,  _
                    ByVal yellowfin10AndUpDeformed As Decimal,  _
                    ByVal bigeye0_500To0_999 As Decimal,  _
                    ByVal bigeye1_0To1_49 As Decimal,  _
                    ByVal bigeye1_5To2_49 As Decimal,  _
                    ByVal bigeye2_5To3_49 As Decimal,  _
                    ByVal bigeye3_5To4_99 As Decimal,  _
                    ByVal bigeye5_0To9_99 As Decimal,  _
                    ByVal bigeye10AndUP As Decimal,  _
                    ByVal bonito As Decimal,  _
                    ByVal fishmeal As Decimal,  _
                    ByVal Original_salesReportCatcher_ID As Integer,  _
                    ByVal Original_salesReport_ID As Integer,  _
                    ByVal Original_catchActivityDetail_ID As Integer,  _
                    ByVal Original_skipjack0_300To0_499 As Decimal,  _
                    ByVal Original_skipjack0_500To0_999 As Decimal,  _
                    ByVal Original_skipjack1_0To1_39 As Decimal,  _
                    ByVal Original_skipjack1_4To1_79 As Decimal,  _
                    ByVal Original_skipjack1_8To2_49 As Decimal,  _
                    ByVal Original_skipjack2_5To3_49 As Decimal,  _
                    ByVal Original_skipjack3_5AndUP As Decimal,  _
                    ByVal Original_yellowfin0_300To0_499 As Decimal,  _
                    ByVal Original_yellowfin0_500To0_999 As Decimal,  _
                    ByVal Original_yellowfin1_0To1_49 As Decimal,  _
                    ByVal Original_yellowfin1_5To2_49 As Decimal,  _
                    ByVal Original_yellowfin2_5To3_49 As Decimal,  _
                    ByVal Original_yellowfin3_5To4_99 As Decimal,  _
                    ByVal Original_yellowfin5_0To9_99 As Decimal,  _
                    ByVal Original_yellowfin10AndUpGood As Decimal,  _
                    ByVal Original_yellowfin10AndUpDeformed As Decimal,  _
                    ByVal Original_bigeye0_500To0_999 As Decimal,  _
                    ByVal Original_bigeye1_0To1_49 As Decimal,  _
                    ByVal Original_bigeye1_5To2_49 As Decimal,  _
                    ByVal Original_bigeye2_5To3_49 As Decimal,  _
                    ByVal Original_bigeye3_5To4_99 As Decimal,  _
                    ByVal Original_bigeye5_0To9_99 As Decimal,  _
                    ByVal Original_bigeye10AndUP As Decimal,  _
                    ByVal Original_bonito As Decimal,  _
                    ByVal Original_fishmeal As Decimal) As Integer
            Return Me.Update(salesReport_ID, catchActivityDetail_ID, skipjack0_300To0_499, skipjack0_500To0_999, skipjack1_0To1_39, skipjack1_4To1_79, skipjack1_8To2_49, skipjack2_5To3_49, skipjack3_5AndUP, yellowfin0_300To0_499, yellowfin0_500To0_999, yellowfin1_0To1_49, yellowfin1_5To2_49, yellowfin2_5To3_49, yellowfin3_5To4_99, yellowfin5_0To9_99, yellowfin10AndUpGood, yellowfin10AndUpDeformed, bigeye0_500To0_999, bigeye1_0To1_49, bigeye1_5To2_49, bigeye2_5To3_49, bigeye3_5To4_99, bigeye5_0To9_99, bigeye10AndUP, bonito, fishmeal, Original_salesReportCatcher_ID, Original_salesReport_ID, Original_catchActivityDetail_ID, Original_skipjack0_300To0_499, Original_skipjack0_500To0_999, Original_skipjack1_0To1_39, Original_skipjack1_4To1_79, Original_skipjack1_8To2_49, Original_skipjack2_5To3_49, Original_skipjack3_5AndUP, Original_yellowfin0_300To0_499, Original_yellowfin0_500To0_999, Original_yellowfin1_0To1_49, Original_yellowfin1_5To2_49, Original_yellowfin2_5To3_49, Original_yellowfin3_5To4_99, Original_yellowfin5_0To9_99, Original_yellowfin10AndUpGood, Original_yellowfin10AndUpDeformed, Original_bigeye0_500To0_999, Original_bigeye1_0To1_49, Original_bigeye1_5To2_49, Original_bigeye2_5To3_49, Original_bigeye3_5To4_99, Original_bigeye5_0To9_99, Original_bigeye10AndUP, Original_bonito, Original_fishmeal, Original_salesReportCatcher_ID)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class trans_SalesReportPriceTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "trans_SalesReportPrice"
            tableMapping.ColumnMappings.Add("salesReportPrice_ID", "salesReportPrice_ID")
            tableMapping.ColumnMappings.Add("salesReport_ID", "salesReport_ID")
            tableMapping.ColumnMappings.Add("skipjack0_300To0_499", "skipjack0_300To0_499")
            tableMapping.ColumnMappings.Add("skipjack0_500To0_999", "skipjack0_500To0_999")
            tableMapping.ColumnMappings.Add("skipjack1_0To1-39", "skipjack1_0To1-39")
            tableMapping.ColumnMappings.Add("skipjack1_4To1_79", "skipjack1_4To1_79")
            tableMapping.ColumnMappings.Add("skipjack1_8To2_49", "skipjack1_8To2_49")
            tableMapping.ColumnMappings.Add("skipjack2_5To3_49", "skipjack2_5To3_49")
            tableMapping.ColumnMappings.Add("skipjack3_5AndUP", "skipjack3_5AndUP")
            tableMapping.ColumnMappings.Add("yellowfin0_300To0_499", "yellowfin0_300To0_499")
            tableMapping.ColumnMappings.Add("yellowfin0_500To0_999", "yellowfin0_500To0_999")
            tableMapping.ColumnMappings.Add("yellowfin1_0To1_49", "yellowfin1_0To1_49")
            tableMapping.ColumnMappings.Add("yellowfin1_5To2_49", "yellowfin1_5To2_49")
            tableMapping.ColumnMappings.Add("yellowfin2_5To3_49", "yellowfin2_5To3_49")
            tableMapping.ColumnMappings.Add("yellowfin3_5To4_99", "yellowfin3_5To4_99")
            tableMapping.ColumnMappings.Add("yellowfin5_0To9_99", "yellowfin5_0To9_99")
            tableMapping.ColumnMappings.Add("yellowfin10AndUpGood", "yellowfin10AndUpGood")
            tableMapping.ColumnMappings.Add("yellowfin10AndUpDeformed", "yellowfin10AndUpDeformed")
            tableMapping.ColumnMappings.Add("bigeye0_500To0_999", "bigeye0_500To0_999")
            tableMapping.ColumnMappings.Add("bigeye1_0To1_49", "bigeye1_0To1_49")
            tableMapping.ColumnMappings.Add("bigeye1_5To2_49", "bigeye1_5To2_49")
            tableMapping.ColumnMappings.Add("bigeye2_5To3_49", "bigeye2_5To3_49")
            tableMapping.ColumnMappings.Add("bigeye3_5To4_99", "bigeye3_5To4_99")
            tableMapping.ColumnMappings.Add("bigeye5_0To9_99", "bigeye5_0To9_99")
            tableMapping.ColumnMappings.Add("bigeye10AndUP", "bigeye10AndUP")
            tableMapping.ColumnMappings.Add("bonito", "bonito")
            tableMapping.ColumnMappings.Add("fishmeal", "fishmeal")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [trans_SalesReportPrice] WHERE (([salesReportPrice_ID] = @Original_sa" & _
                "lesReportPrice_ID) AND ([salesReport_ID] = @Original_salesReport_ID) AND ([skipj" & _
                "ack0_300To0_499] = @Original_skipjack0_300To0_499) AND ([skipjack0_500To0_999] =" & _
                " @Original_skipjack0_500To0_999) AND ([skipjack1_0To1-39] = @p2) AND ([skipjack1" & _
                "_4To1_79] = @Original_skipjack1_4To1_79) AND ([skipjack1_8To2_49] = @Original_sk" & _
                "ipjack1_8To2_49) AND ([skipjack2_5To3_49] = @Original_skipjack2_5To3_49) AND ([s" & _
                "kipjack3_5AndUP] = @Original_skipjack3_5AndUP) AND ([yellowfin0_300To0_499] = @O" & _
                "riginal_yellowfin0_300To0_499) AND ([yellowfin0_500To0_999] = @Original_yellowfi" & _
                "n0_500To0_999) AND ([yellowfin1_0To1_49] = @Original_yellowfin1_0To1_49) AND ([y" & _
                "ellowfin1_5To2_49] = @Original_yellowfin1_5To2_49) AND ([yellowfin2_5To3_49] = @" & _
                "Original_yellowfin2_5To3_49) AND ([yellowfin3_5To4_99] = @Original_yellowfin3_5T" & _
                "o4_99) AND ([yellowfin5_0To9_99] = @Original_yellowfin5_0To9_99) AND ([yellowfin" & _
                "10AndUpGood] = @Original_yellowfin10AndUpGood) AND ([yellowfin10AndUpDeformed] =" & _
                " @Original_yellowfin10AndUpDeformed) AND ([bigeye0_500To0_999] = @Original_bigey" & _
                "e0_500To0_999) AND ([bigeye1_0To1_49] = @Original_bigeye1_0To1_49) AND ([bigeye1" & _
                "_5To2_49] = @Original_bigeye1_5To2_49) AND ([bigeye2_5To3_49] = @Original_bigeye" & _
                "2_5To3_49) AND ([bigeye3_5To4_99] = @Original_bigeye3_5To4_99) AND ([bigeye5_0To" & _
                "9_99] = @Original_bigeye5_0To9_99) AND ([bigeye10AndUP] = @Original_bigeye10AndU" & _
                "P) AND ([bonito] = @Original_bonito) AND ([fishmeal] = @Original_fishmeal))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_salesReportPrice_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "salesReportPrice_ID", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_salesReport_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "salesReport_ID", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_skipjack0_300To0_499", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "skipjack0_300To0_499", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_skipjack0_500To0_999", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "skipjack0_500To0_999", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p2", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "skipjack1_0To1-39", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_skipjack1_4To1_79", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "skipjack1_4To1_79", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_skipjack1_8To2_49", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "skipjack1_8To2_49", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_skipjack2_5To3_49", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "skipjack2_5To3_49", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_skipjack3_5AndUP", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "skipjack3_5AndUP", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_yellowfin0_300To0_499", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "yellowfin0_300To0_499", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_yellowfin0_500To0_999", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "yellowfin0_500To0_999", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_yellowfin1_0To1_49", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "yellowfin1_0To1_49", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_yellowfin1_5To2_49", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "yellowfin1_5To2_49", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_yellowfin2_5To3_49", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "yellowfin2_5To3_49", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_yellowfin3_5To4_99", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "yellowfin3_5To4_99", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_yellowfin5_0To9_99", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "yellowfin5_0To9_99", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_yellowfin10AndUpGood", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "yellowfin10AndUpGood", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_yellowfin10AndUpDeformed", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "yellowfin10AndUpDeformed", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_bigeye0_500To0_999", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "bigeye0_500To0_999", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_bigeye1_0To1_49", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "bigeye1_0To1_49", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_bigeye1_5To2_49", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "bigeye1_5To2_49", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_bigeye2_5To3_49", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "bigeye2_5To3_49", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_bigeye3_5To4_99", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "bigeye3_5To4_99", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_bigeye5_0To9_99", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "bigeye5_0To9_99", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_bigeye10AndUP", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "bigeye10AndUP", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_bonito", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "bonito", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_fishmeal", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "fishmeal", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [trans_SalesReportPrice] ([salesReport_ID], [skipjack0_300To0_499], [" & _
                "skipjack0_500To0_999], [skipjack1_0To1-39], [skipjack1_4To1_79], [skipjack1_8To2" & _
                "_49], [skipjack2_5To3_49], [skipjack3_5AndUP], [yellowfin0_300To0_499], [yellowf" & _
                "in0_500To0_999], [yellowfin1_0To1_49], [yellowfin1_5To2_49], [yellowfin2_5To3_49" & _
                "], [yellowfin3_5To4_99], [yellowfin5_0To9_99], [yellowfin10AndUpGood], [yellowfi" & _
                "n10AndUpDeformed], [bigeye0_500To0_999], [bigeye1_0To1_49], [bigeye1_5To2_49], [" & _
                "bigeye2_5To3_49], [bigeye3_5To4_99], [bigeye5_0To9_99], [bigeye10AndUP], [bonito" & _
                "], [fishmeal]) VALUES (@salesReport_ID, @skipjack0_300To0_499, @skipjack0_500To0" & _
                "_999, @p1, @skipjack1_4To1_79, @skipjack1_8To2_49, @skipjack2_5To3_49, @skipjack" & _
                "3_5AndUP, @yellowfin0_300To0_499, @yellowfin0_500To0_999, @yellowfin1_0To1_49, @" & _
                "yellowfin1_5To2_49, @yellowfin2_5To3_49, @yellowfin3_5To4_99, @yellowfin5_0To9_9" & _
                "9, @yellowfin10AndUpGood, @yellowfin10AndUpDeformed, @bigeye0_500To0_999, @bigey" & _
                "e1_0To1_49, @bigeye1_5To2_49, @bigeye2_5To3_49, @bigeye3_5To4_99, @bigeye5_0To9_" & _
                "99, @bigeye10AndUP, @bonito, @fishmeal);" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT salesReportPrice_ID, salesRepor" & _
                "t_ID, skipjack0_300To0_499, skipjack0_500To0_999, [skipjack1_0To1-39], skipjack1" & _
                "_4To1_79, skipjack1_8To2_49, skipjack2_5To3_49, skipjack3_5AndUP, yellowfin0_300" & _
                "To0_499, yellowfin0_500To0_999, yellowfin1_0To1_49, yellowfin1_5To2_49, yellowfi" & _
                "n2_5To3_49, yellowfin3_5To4_99, yellowfin5_0To9_99, yellowfin10AndUpGood, yellow" & _
                "fin10AndUpDeformed, bigeye0_500To0_999, bigeye1_0To1_49, bigeye1_5To2_49, bigeye" & _
                "2_5To3_49, bigeye3_5To4_99, bigeye5_0To9_99, bigeye10AndUP, bonito, fishmeal FRO" & _
                "M trans_SalesReportPrice WHERE (salesReportPrice_ID = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@salesReport_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "salesReport_ID", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@skipjack0_300To0_499", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "skipjack0_300To0_499", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@skipjack0_500To0_999", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "skipjack0_500To0_999", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p1", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "skipjack1_0To1-39", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@skipjack1_4To1_79", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "skipjack1_4To1_79", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@skipjack1_8To2_49", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "skipjack1_8To2_49", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@skipjack2_5To3_49", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "skipjack2_5To3_49", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@skipjack3_5AndUP", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "skipjack3_5AndUP", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@yellowfin0_300To0_499", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "yellowfin0_300To0_499", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@yellowfin0_500To0_999", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "yellowfin0_500To0_999", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@yellowfin1_0To1_49", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "yellowfin1_0To1_49", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@yellowfin1_5To2_49", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "yellowfin1_5To2_49", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@yellowfin2_5To3_49", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "yellowfin2_5To3_49", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@yellowfin3_5To4_99", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "yellowfin3_5To4_99", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@yellowfin5_0To9_99", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "yellowfin5_0To9_99", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@yellowfin10AndUpGood", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "yellowfin10AndUpGood", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@yellowfin10AndUpDeformed", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "yellowfin10AndUpDeformed", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@bigeye0_500To0_999", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "bigeye0_500To0_999", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@bigeye1_0To1_49", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "bigeye1_0To1_49", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@bigeye1_5To2_49", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "bigeye1_5To2_49", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@bigeye2_5To3_49", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "bigeye2_5To3_49", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@bigeye3_5To4_99", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "bigeye3_5To4_99", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@bigeye5_0To9_99", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "bigeye5_0To9_99", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@bigeye10AndUP", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "bigeye10AndUP", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@bonito", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "bonito", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@fishmeal", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "fishmeal", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [trans_SalesReportPrice] SET [salesReport_ID] = @salesReport_ID, [skipjack" & _
                "0_300To0_499] = @skipjack0_300To0_499, [skipjack0_500To0_999] = @skipjack0_500To" & _
                "0_999, [skipjack1_0To1-39] = @p1, [skipjack1_4To1_79] = @skipjack1_4To1_79, [ski" & _
                "pjack1_8To2_49] = @skipjack1_8To2_49, [skipjack2_5To3_49] = @skipjack2_5To3_49, " & _
                "[skipjack3_5AndUP] = @skipjack3_5AndUP, [yellowfin0_300To0_499] = @yellowfin0_30" & _
                "0To0_499, [yellowfin0_500To0_999] = @yellowfin0_500To0_999, [yellowfin1_0To1_49]" & _
                " = @yellowfin1_0To1_49, [yellowfin1_5To2_49] = @yellowfin1_5To2_49, [yellowfin2_" & _
                "5To3_49] = @yellowfin2_5To3_49, [yellowfin3_5To4_99] = @yellowfin3_5To4_99, [yel" & _
                "lowfin5_0To9_99] = @yellowfin5_0To9_99, [yellowfin10AndUpGood] = @yellowfin10And" & _
                "UpGood, [yellowfin10AndUpDeformed] = @yellowfin10AndUpDeformed, [bigeye0_500To0_" & _
                "999] = @bigeye0_500To0_999, [bigeye1_0To1_49] = @bigeye1_0To1_49, [bigeye1_5To2_" & _
                "49] = @bigeye1_5To2_49, [bigeye2_5To3_49] = @bigeye2_5To3_49, [bigeye3_5To4_99] " & _
                "= @bigeye3_5To4_99, [bigeye5_0To9_99] = @bigeye5_0To9_99, [bigeye10AndUP] = @big" & _
                "eye10AndUP, [bonito] = @bonito, [fishmeal] = @fishmeal WHERE (([salesReportPrice" & _
                "_ID] = @Original_salesReportPrice_ID) AND ([salesReport_ID] = @Original_salesRep" & _
                "ort_ID) AND ([skipjack0_300To0_499] = @Original_skipjack0_300To0_499) AND ([skip" & _
                "jack0_500To0_999] = @Original_skipjack0_500To0_999) AND ([skipjack1_0To1-39] = @" & _
                "p2) AND ([skipjack1_4To1_79] = @Original_skipjack1_4To1_79) AND ([skipjack1_8To2" & _
                "_49] = @Original_skipjack1_8To2_49) AND ([skipjack2_5To3_49] = @Original_skipjac" & _
                "k2_5To3_49) AND ([skipjack3_5AndUP] = @Original_skipjack3_5AndUP) AND ([yellowfi" & _
                "n0_300To0_499] = @Original_yellowfin0_300To0_499) AND ([yellowfin0_500To0_999] =" & _
                " @Original_yellowfin0_500To0_999) AND ([yellowfin1_0To1_49] = @Original_yellowfi" & _
                "n1_0To1_49) AND ([yellowfin1_5To2_49] = @Original_yellowfin1_5To2_49) AND ([yell" & _
                "owfin2_5To3_49] = @Original_yellowfin2_5To3_49) AND ([yellowfin3_5To4_99] = @Ori" & _
                "ginal_yellowfin3_5To4_99) AND ([yellowfin5_0To9_99] = @Original_yellowfin5_0To9_" & _
                "99) AND ([yellowfin10AndUpGood] = @Original_yellowfin10AndUpGood) AND ([yellowfi" & _
                "n10AndUpDeformed] = @Original_yellowfin10AndUpDeformed) AND ([bigeye0_500To0_999" & _
                "] = @Original_bigeye0_500To0_999) AND ([bigeye1_0To1_49] = @Original_bigeye1_0To" & _
                "1_49) AND ([bigeye1_5To2_49] = @Original_bigeye1_5To2_49) AND ([bigeye2_5To3_49]" & _
                " = @Original_bigeye2_5To3_49) AND ([bigeye3_5To4_99] = @Original_bigeye3_5To4_99" & _
                ") AND ([bigeye5_0To9_99] = @Original_bigeye5_0To9_99) AND ([bigeye10AndUP] = @Or" & _
                "iginal_bigeye10AndUP) AND ([bonito] = @Original_bonito) AND ([fishmeal] = @Origi" & _
                "nal_fishmeal));" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "SELECT salesReportPrice_ID, salesReport_ID, skipjack0_300To0_49" & _
                "9, skipjack0_500To0_999, [skipjack1_0To1-39], skipjack1_4To1_79, skipjack1_8To2_" & _
                "49, skipjack2_5To3_49, skipjack3_5AndUP, yellowfin0_300To0_499, yellowfin0_500To" & _
                "0_999, yellowfin1_0To1_49, yellowfin1_5To2_49, yellowfin2_5To3_49, yellowfin3_5T" & _
                "o4_99, yellowfin5_0To9_99, yellowfin10AndUpGood, yellowfin10AndUpDeformed, bigey" & _
                "e0_500To0_999, bigeye1_0To1_49, bigeye1_5To2_49, bigeye2_5To3_49, bigeye3_5To4_9" & _
                "9, bigeye5_0To9_99, bigeye10AndUP, bonito, fishmeal FROM trans_SalesReportPrice " & _
                "WHERE (salesReportPrice_ID = @salesReportPrice_ID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@salesReport_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "salesReport_ID", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@skipjack0_300To0_499", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "skipjack0_300To0_499", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@skipjack0_500To0_999", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "skipjack0_500To0_999", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p1", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "skipjack1_0To1-39", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@skipjack1_4To1_79", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "skipjack1_4To1_79", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@skipjack1_8To2_49", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "skipjack1_8To2_49", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@skipjack2_5To3_49", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "skipjack2_5To3_49", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@skipjack3_5AndUP", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "skipjack3_5AndUP", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@yellowfin0_300To0_499", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "yellowfin0_300To0_499", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@yellowfin0_500To0_999", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "yellowfin0_500To0_999", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@yellowfin1_0To1_49", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "yellowfin1_0To1_49", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@yellowfin1_5To2_49", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "yellowfin1_5To2_49", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@yellowfin2_5To3_49", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "yellowfin2_5To3_49", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@yellowfin3_5To4_99", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "yellowfin3_5To4_99", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@yellowfin5_0To9_99", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "yellowfin5_0To9_99", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@yellowfin10AndUpGood", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "yellowfin10AndUpGood", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@yellowfin10AndUpDeformed", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "yellowfin10AndUpDeformed", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@bigeye0_500To0_999", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "bigeye0_500To0_999", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@bigeye1_0To1_49", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "bigeye1_0To1_49", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@bigeye1_5To2_49", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "bigeye1_5To2_49", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@bigeye2_5To3_49", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "bigeye2_5To3_49", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@bigeye3_5To4_99", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "bigeye3_5To4_99", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@bigeye5_0To9_99", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "bigeye5_0To9_99", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@bigeye10AndUP", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "bigeye10AndUP", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@bonito", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "bonito", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@fishmeal", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "fishmeal", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_salesReportPrice_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "salesReportPrice_ID", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_salesReport_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "salesReport_ID", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_skipjack0_300To0_499", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "skipjack0_300To0_499", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_skipjack0_500To0_999", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "skipjack0_500To0_999", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@p2", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "skipjack1_0To1-39", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_skipjack1_4To1_79", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "skipjack1_4To1_79", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_skipjack1_8To2_49", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "skipjack1_8To2_49", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_skipjack2_5To3_49", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "skipjack2_5To3_49", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_skipjack3_5AndUP", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "skipjack3_5AndUP", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_yellowfin0_300To0_499", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "yellowfin0_300To0_499", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_yellowfin0_500To0_999", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "yellowfin0_500To0_999", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_yellowfin1_0To1_49", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "yellowfin1_0To1_49", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_yellowfin1_5To2_49", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "yellowfin1_5To2_49", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_yellowfin2_5To3_49", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "yellowfin2_5To3_49", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_yellowfin3_5To4_99", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "yellowfin3_5To4_99", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_yellowfin5_0To9_99", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "yellowfin5_0To9_99", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_yellowfin10AndUpGood", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "yellowfin10AndUpGood", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_yellowfin10AndUpDeformed", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "yellowfin10AndUpDeformed", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_bigeye0_500To0_999", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "bigeye0_500To0_999", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_bigeye1_0To1_49", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "bigeye1_0To1_49", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_bigeye1_5To2_49", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "bigeye1_5To2_49", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_bigeye2_5To3_49", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "bigeye2_5To3_49", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_bigeye3_5To4_99", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "bigeye3_5To4_99", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_bigeye5_0To9_99", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "bigeye5_0To9_99", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_bigeye10AndUP", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "bigeye10AndUP", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_bonito", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "bonito", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_fishmeal", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "fishmeal", Global.System.Data.DataRowVersion.Original, False, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@salesReportPrice_ID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "salesReportPrice_ID", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.MarketingSalesSystem.Settings.Default.MKDBConnectionString
        End Sub

        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(), _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")> _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT salesReportPrice_ID, salesReport_ID, skipjack0_300To0_499, skipjack0_500To" & _
                "0_999, [skipjack1_0To1-39], skipjack1_4To1_79, skipjack1_8To2_49, skipjack2_5To3" & _
                "_49, skipjack3_5AndUP, yellowfin0_300To0_499, yellowfin0_500To0_999, " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "         " & _
                "         yellowfin1_0To1_49, yellowfin1_5To2_49, yellowfin2_5To3_49, yellowfin3_" & _
                "5To4_99, yellowfin5_0To9_99, yellowfin10AndUpGood, yellowfin10AndUpDeformed, big" & _
                "eye0_500To0_999, bigeye1_0To1_49, bigeye1_5To2_49, bigeye2_5To3_49, " & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "          " & _
                "        bigeye3_5To4_99, bigeye5_0To9_99, bigeye10AndUP, bonito, fishmeal" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "FROM " & _
                "    trans_SalesReportPrice" & Global.Microsoft.VisualBasic.ChrW(13) & Global.Microsoft.VisualBasic.ChrW(10) & "WHERE  salesReport_ID = @SalesReportID"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SalesReportID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "salesReport_ID", Global.System.Data.DataRowVersion.Current, False, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MKDBDataSet.trans_SalesReportPriceDataTable, ByVal SalesReportID As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(SalesReportID,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData(ByVal SalesReportID As Integer) As MKDBDataSet.trans_SalesReportPriceDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(SalesReportID,Integer)
            Dim dataTable As MKDBDataSet.trans_SalesReportPriceDataTable = New MKDBDataSet.trans_SalesReportPriceDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As MKDBDataSet.trans_SalesReportPriceDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As MKDBDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "trans_SalesReportPrice")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class trans_SalesReportSummaryTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "trans_SalesReportSummary"
            tableMapping.ColumnMappings.Add("salesReportSummary_ID", "salesReportSummary_ID")
            tableMapping.ColumnMappings.Add("salesReport_ID", "salesReport_ID")
            tableMapping.ColumnMappings.Add("vessel_ID", "vessel_ID")
            tableMapping.ColumnMappings.Add("catchersPartialQty", "catchersPartialQty")
            tableMapping.ColumnMappings.Add("catchersPartialUnloadedQty", "catchersPartialUnloadedQty")
            tableMapping.ColumnMappings.Add("catchersActualUnloadedQty", "catchersActualUnloadedQty")
            tableMapping.ColumnMappings.Add("actualQtyInKilos", "actualQtyInKilos")
            tableMapping.ColumnMappings.Add("fishmealInKilos", "fishmealInKilos")
            tableMapping.ColumnMappings.Add("spoilageInKilos", "spoilageInKilos")
            tableMapping.ColumnMappings.Add("actualQtyInAmount", "actualQtyInAmount")
            tableMapping.ColumnMappings.Add("fishmealInAmount", "fishmealInAmount")
            tableMapping.ColumnMappings.Add("spoilageInAmount", "spoilageInAmount")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[trans_SalesReportSummary] WHERE (([salesReportSummary_ID] = @O"& _ 
                "riginal_salesReportSummary_ID) AND ([salesReport_ID] = @Original_salesReport_ID)"& _ 
                " AND ([vessel_ID] = @Original_vessel_ID) AND ([catchersPartialQty] = @Original_c"& _ 
                "atchersPartialQty) AND ([catchersPartialUnloadedQty] = @Original_catchersPartial"& _ 
                "UnloadedQty) AND ([catchersActualUnloadedQty] = @Original_catchersActualUnloaded"& _ 
                "Qty) AND ([actualQtyInKilos] = @Original_actualQtyInKilos) AND ([fishmealInKilos"& _ 
                "] = @Original_fishmealInKilos) AND ([spoilageInKilos] = @Original_spoilageInKilo"& _ 
                "s) AND ([actualQtyInAmount] = @Original_actualQtyInAmount) AND ([fishmealInAmoun"& _ 
                "t] = @Original_fishmealInAmount) AND ([spoilageInAmount] = @Original_spoilageInA"& _ 
                "mount))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_salesReportSummary_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "salesReportSummary_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_salesReport_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "salesReport_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_vessel_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "vessel_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_catchersPartialQty", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 5, "catchersPartialQty", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_catchersPartialUnloadedQty", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 5, "catchersPartialUnloadedQty", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_catchersActualUnloadedQty", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 5, "catchersActualUnloadedQty", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_actualQtyInKilos", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 5, "actualQtyInKilos", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_fishmealInKilos", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 5, "fishmealInKilos", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_spoilageInKilos", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 5, "spoilageInKilos", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_actualQtyInAmount", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "actualQtyInAmount", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_fishmealInAmount", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "fishmealInAmount", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_spoilageInAmount", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "spoilageInAmount", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[trans_SalesReportSummary] ([salesReport_ID], [vessel_ID], [cat"& _ 
                "chersPartialQty], [catchersPartialUnloadedQty], [catchersActualUnloadedQty], [ac"& _ 
                "tualQtyInKilos], [fishmealInKilos], [spoilageInKilos], [actualQtyInAmount], [fis"& _ 
                "hmealInAmount], [spoilageInAmount]) VALUES (@salesReport_ID, @vessel_ID, @catche"& _ 
                "rsPartialQty, @catchersPartialUnloadedQty, @catchersActualUnloadedQty, @actualQt"& _ 
                "yInKilos, @fishmealInKilos, @spoilageInKilos, @actualQtyInAmount, @fishmealInAmo"& _ 
                "unt, @spoilageInAmount);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT salesReportSummary_ID, salesReport_ID, vessel_I"& _ 
                "D, catchersPartialQty, catchersPartialUnloadedQty, catchersActualUnloadedQty, ac"& _ 
                "tualQtyInKilos, fishmealInKilos, spoilageInKilos, actualQtyInAmount, fishmealInA"& _ 
                "mount, spoilageInAmount FROM trans_SalesReportSummary WHERE (salesReportSummary_"& _ 
                "ID = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@salesReport_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "salesReport_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@vessel_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "vessel_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@catchersPartialQty", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 5, "catchersPartialQty", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@catchersPartialUnloadedQty", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 5, "catchersPartialUnloadedQty", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@catchersActualUnloadedQty", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 5, "catchersActualUnloadedQty", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@actualQtyInKilos", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 5, "actualQtyInKilos", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@fishmealInKilos", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 5, "fishmealInKilos", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@spoilageInKilos", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 5, "spoilageInKilos", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@actualQtyInAmount", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "actualQtyInAmount", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@fishmealInAmount", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "fishmealInAmount", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@spoilageInAmount", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "spoilageInAmount", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[trans_SalesReportSummary] SET [salesReport_ID] = @salesReport_ID, ["& _ 
                "vessel_ID] = @vessel_ID, [catchersPartialQty] = @catchersPartialQty, [catchersPa"& _ 
                "rtialUnloadedQty] = @catchersPartialUnloadedQty, [catchersActualUnloadedQty] = @"& _ 
                "catchersActualUnloadedQty, [actualQtyInKilos] = @actualQtyInKilos, [fishmealInKi"& _ 
                "los] = @fishmealInKilos, [spoilageInKilos] = @spoilageInKilos, [actualQtyInAmoun"& _ 
                "t] = @actualQtyInAmount, [fishmealInAmount] = @fishmealInAmount, [spoilageInAmou"& _ 
                "nt] = @spoilageInAmount WHERE (([salesReportSummary_ID] = @Original_salesReportS"& _ 
                "ummary_ID) AND ([salesReport_ID] = @Original_salesReport_ID) AND ([vessel_ID] = "& _ 
                "@Original_vessel_ID) AND ([catchersPartialQty] = @Original_catchersPartialQty) A"& _ 
                "ND ([catchersPartialUnloadedQty] = @Original_catchersPartialUnloadedQty) AND ([c"& _ 
                "atchersActualUnloadedQty] = @Original_catchersActualUnloadedQty) AND ([actualQty"& _ 
                "InKilos] = @Original_actualQtyInKilos) AND ([fishmealInKilos] = @Original_fishme"& _ 
                "alInKilos) AND ([spoilageInKilos] = @Original_spoilageInKilos) AND ([actualQtyIn"& _ 
                "Amount] = @Original_actualQtyInAmount) AND ([fishmealInAmount] = @Original_fishm"& _ 
                "ealInAmount) AND ([spoilageInAmount] = @Original_spoilageInAmount));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT sal"& _ 
                "esReportSummary_ID, salesReport_ID, vessel_ID, catchersPartialQty, catchersParti"& _ 
                "alUnloadedQty, catchersActualUnloadedQty, actualQtyInKilos, fishmealInKilos, spo"& _ 
                "ilageInKilos, actualQtyInAmount, fishmealInAmount, spoilageInAmount FROM trans_S"& _ 
                "alesReportSummary WHERE (salesReportSummary_ID = @salesReportSummary_ID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@salesReport_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "salesReport_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@vessel_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "vessel_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@catchersPartialQty", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 5, "catchersPartialQty", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@catchersPartialUnloadedQty", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 5, "catchersPartialUnloadedQty", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@catchersActualUnloadedQty", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 5, "catchersActualUnloadedQty", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@actualQtyInKilos", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 5, "actualQtyInKilos", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@fishmealInKilos", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 5, "fishmealInKilos", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@spoilageInKilos", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 5, "spoilageInKilos", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@actualQtyInAmount", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "actualQtyInAmount", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@fishmealInAmount", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "fishmealInAmount", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@spoilageInAmount", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "spoilageInAmount", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_salesReportSummary_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "salesReportSummary_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_salesReport_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "salesReport_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_vessel_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "vessel_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_catchersPartialQty", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 5, "catchersPartialQty", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_catchersPartialUnloadedQty", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 5, "catchersPartialUnloadedQty", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_catchersActualUnloadedQty", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 5, "catchersActualUnloadedQty", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_actualQtyInKilos", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 5, "actualQtyInKilos", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_fishmealInKilos", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 5, "fishmealInKilos", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_spoilageInKilos", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 5, "spoilageInKilos", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_actualQtyInAmount", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "actualQtyInAmount", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_fishmealInAmount", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "fishmealInAmount", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_spoilageInAmount", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 2, "spoilageInAmount", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@salesReportSummary_ID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "salesReportSummary_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.MarketingSalesSystem.Settings.Default.MKDBConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT salesReportSummary_ID, salesReport_ID, vessel_ID, catchersPartialQty, catc"& _ 
                "hersPartialUnloadedQty, catchersActualUnloadedQty, actualQtyInKilos, fishmealInK"& _ 
                "ilos, spoilageInKilos, actualQtyInAmount, fishmealInAmount, spoilageInAmount FRO"& _ 
                "M dbo.trans_SalesReportSummary"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MKDBDataSet.trans_SalesReportSummaryDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As MKDBDataSet.trans_SalesReportSummaryDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As MKDBDataSet.trans_SalesReportSummaryDataTable = New MKDBDataSet.trans_SalesReportSummaryDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As MKDBDataSet.trans_SalesReportSummaryDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As MKDBDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "trans_SalesReportSummary")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_salesReportSummary_ID As Integer, ByVal Original_salesReport_ID As Integer, ByVal Original_vessel_ID As Integer, ByVal Original_catchersPartialQty As Decimal, ByVal Original_catchersPartialUnloadedQty As Decimal, ByVal Original_catchersActualUnloadedQty As Decimal, ByVal Original_actualQtyInKilos As Decimal, ByVal Original_fishmealInKilos As Decimal, ByVal Original_spoilageInKilos As Decimal, ByVal Original_actualQtyInAmount As Decimal, ByVal Original_fishmealInAmount As Decimal, ByVal Original_spoilageInAmount As Decimal) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_salesReportSummary_ID,Integer)
            Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_salesReport_ID,Integer)
            Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_vessel_ID,Integer)
            Me.Adapter.DeleteCommand.Parameters(3).Value = CType(Original_catchersPartialQty,Decimal)
            Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_catchersPartialUnloadedQty,Decimal)
            Me.Adapter.DeleteCommand.Parameters(5).Value = CType(Original_catchersActualUnloadedQty,Decimal)
            Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_actualQtyInKilos,Decimal)
            Me.Adapter.DeleteCommand.Parameters(7).Value = CType(Original_fishmealInKilos,Decimal)
            Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_spoilageInKilos,Decimal)
            Me.Adapter.DeleteCommand.Parameters(9).Value = CType(Original_actualQtyInAmount,Decimal)
            Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_fishmealInAmount,Decimal)
            Me.Adapter.DeleteCommand.Parameters(11).Value = CType(Original_spoilageInAmount,Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal salesReport_ID As Integer, ByVal vessel_ID As Integer, ByVal catchersPartialQty As Decimal, ByVal catchersPartialUnloadedQty As Decimal, ByVal catchersActualUnloadedQty As Decimal, ByVal actualQtyInKilos As Decimal, ByVal fishmealInKilos As Decimal, ByVal spoilageInKilos As Decimal, ByVal actualQtyInAmount As Decimal, ByVal fishmealInAmount As Decimal, ByVal spoilageInAmount As Decimal) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(salesReport_ID,Integer)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(vessel_ID,Integer)
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(catchersPartialQty,Decimal)
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(catchersPartialUnloadedQty,Decimal)
            Me.Adapter.InsertCommand.Parameters(4).Value = CType(catchersActualUnloadedQty,Decimal)
            Me.Adapter.InsertCommand.Parameters(5).Value = CType(actualQtyInKilos,Decimal)
            Me.Adapter.InsertCommand.Parameters(6).Value = CType(fishmealInKilos,Decimal)
            Me.Adapter.InsertCommand.Parameters(7).Value = CType(spoilageInKilos,Decimal)
            Me.Adapter.InsertCommand.Parameters(8).Value = CType(actualQtyInAmount,Decimal)
            Me.Adapter.InsertCommand.Parameters(9).Value = CType(fishmealInAmount,Decimal)
            Me.Adapter.InsertCommand.Parameters(10).Value = CType(spoilageInAmount,Decimal)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal salesReport_ID As Integer,  _
                    ByVal vessel_ID As Integer,  _
                    ByVal catchersPartialQty As Decimal,  _
                    ByVal catchersPartialUnloadedQty As Decimal,  _
                    ByVal catchersActualUnloadedQty As Decimal,  _
                    ByVal actualQtyInKilos As Decimal,  _
                    ByVal fishmealInKilos As Decimal,  _
                    ByVal spoilageInKilos As Decimal,  _
                    ByVal actualQtyInAmount As Decimal,  _
                    ByVal fishmealInAmount As Decimal,  _
                    ByVal spoilageInAmount As Decimal,  _
                    ByVal Original_salesReportSummary_ID As Integer,  _
                    ByVal Original_salesReport_ID As Integer,  _
                    ByVal Original_vessel_ID As Integer,  _
                    ByVal Original_catchersPartialQty As Decimal,  _
                    ByVal Original_catchersPartialUnloadedQty As Decimal,  _
                    ByVal Original_catchersActualUnloadedQty As Decimal,  _
                    ByVal Original_actualQtyInKilos As Decimal,  _
                    ByVal Original_fishmealInKilos As Decimal,  _
                    ByVal Original_spoilageInKilos As Decimal,  _
                    ByVal Original_actualQtyInAmount As Decimal,  _
                    ByVal Original_fishmealInAmount As Decimal,  _
                    ByVal Original_spoilageInAmount As Decimal,  _
                    ByVal salesReportSummary_ID As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(salesReport_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(vessel_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(catchersPartialQty,Decimal)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(catchersPartialUnloadedQty,Decimal)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(catchersActualUnloadedQty,Decimal)
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(actualQtyInKilos,Decimal)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(fishmealInKilos,Decimal)
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(spoilageInKilos,Decimal)
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(actualQtyInAmount,Decimal)
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(fishmealInAmount,Decimal)
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(spoilageInAmount,Decimal)
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Original_salesReportSummary_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Original_salesReport_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(13).Value = CType(Original_vessel_ID,Integer)
            Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_catchersPartialQty,Decimal)
            Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_catchersPartialUnloadedQty,Decimal)
            Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_catchersActualUnloadedQty,Decimal)
            Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Original_actualQtyInKilos,Decimal)
            Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_fishmealInKilos,Decimal)
            Me.Adapter.UpdateCommand.Parameters(19).Value = CType(Original_spoilageInKilos,Decimal)
            Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Original_actualQtyInAmount,Decimal)
            Me.Adapter.UpdateCommand.Parameters(21).Value = CType(Original_fishmealInAmount,Decimal)
            Me.Adapter.UpdateCommand.Parameters(22).Value = CType(Original_spoilageInAmount,Decimal)
            Me.Adapter.UpdateCommand.Parameters(23).Value = CType(salesReportSummary_ID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal salesReport_ID As Integer,  _
                    ByVal vessel_ID As Integer,  _
                    ByVal catchersPartialQty As Decimal,  _
                    ByVal catchersPartialUnloadedQty As Decimal,  _
                    ByVal catchersActualUnloadedQty As Decimal,  _
                    ByVal actualQtyInKilos As Decimal,  _
                    ByVal fishmealInKilos As Decimal,  _
                    ByVal spoilageInKilos As Decimal,  _
                    ByVal actualQtyInAmount As Decimal,  _
                    ByVal fishmealInAmount As Decimal,  _
                    ByVal spoilageInAmount As Decimal,  _
                    ByVal Original_salesReportSummary_ID As Integer,  _
                    ByVal Original_salesReport_ID As Integer,  _
                    ByVal Original_vessel_ID As Integer,  _
                    ByVal Original_catchersPartialQty As Decimal,  _
                    ByVal Original_catchersPartialUnloadedQty As Decimal,  _
                    ByVal Original_catchersActualUnloadedQty As Decimal,  _
                    ByVal Original_actualQtyInKilos As Decimal,  _
                    ByVal Original_fishmealInKilos As Decimal,  _
                    ByVal Original_spoilageInKilos As Decimal,  _
                    ByVal Original_actualQtyInAmount As Decimal,  _
                    ByVal Original_fishmealInAmount As Decimal,  _
                    ByVal Original_spoilageInAmount As Decimal) As Integer
            Return Me.Update(salesReport_ID, vessel_ID, catchersPartialQty, catchersPartialUnloadedQty, catchersActualUnloadedQty, actualQtyInKilos, fishmealInKilos, spoilageInKilos, actualQtyInAmount, fishmealInAmount, spoilageInAmount, Original_salesReportSummary_ID, Original_salesReport_ID, Original_vessel_ID, Original_catchersPartialQty, Original_catchersPartialUnloadedQty, Original_catchersActualUnloadedQty, Original_actualQtyInKilos, Original_fishmealInKilos, Original_spoilageInKilos, Original_actualQtyInAmount, Original_fishmealInAmount, Original_spoilageInAmount, Original_salesReportSummary_ID)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class trans_SalesReportWeightSlipsTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "trans_SalesReportWeightSlips"
            tableMapping.ColumnMappings.Add("salesReportWeightSlip_ID", "salesReportWeightSlip_ID")
            tableMapping.ColumnMappings.Add("salesReport_ID", "salesReport_ID")
            tableMapping.ColumnMappings.Add("weightSlipDetail_ID", "weightSlipDetail_ID")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[trans_SalesReportWeightSlips] WHERE (([salesReportWeightSlip_I"& _ 
                "D] = @Original_salesReportWeightSlip_ID) AND ((@IsNull_salesReport_ID = 1 AND [s"& _ 
                "alesReport_ID] IS NULL) OR ([salesReport_ID] = @Original_salesReport_ID)) AND (("& _ 
                "@IsNull_weightSlipDetail_ID = 1 AND [weightSlipDetail_ID] IS NULL) OR ([weightSl"& _ 
                "ipDetail_ID] = @Original_weightSlipDetail_ID)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_salesReportWeightSlip_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "salesReportWeightSlip_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_salesReport_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "salesReport_ID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_salesReport_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "salesReport_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_weightSlipDetail_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "weightSlipDetail_ID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_weightSlipDetail_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "weightSlipDetail_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[trans_SalesReportWeightSlips] ([salesReport_ID], [weightSlipDe"& _ 
                "tail_ID]) VALUES (@salesReport_ID, @weightSlipDetail_ID);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT salesReportWei"& _ 
                "ghtSlip_ID, salesReport_ID, weightSlipDetail_ID FROM trans_SalesReportWeightSlip"& _ 
                "s WHERE (salesReportWeightSlip_ID = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@salesReport_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "salesReport_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@weightSlipDetail_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "weightSlipDetail_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[trans_SalesReportWeightSlips] SET [salesReport_ID] = @salesReport_I"& _ 
                "D, [weightSlipDetail_ID] = @weightSlipDetail_ID WHERE (([salesReportWeightSlip_I"& _ 
                "D] = @Original_salesReportWeightSlip_ID) AND ((@IsNull_salesReport_ID = 1 AND [s"& _ 
                "alesReport_ID] IS NULL) OR ([salesReport_ID] = @Original_salesReport_ID)) AND (("& _ 
                "@IsNull_weightSlipDetail_ID = 1 AND [weightSlipDetail_ID] IS NULL) OR ([weightSl"& _ 
                "ipDetail_ID] = @Original_weightSlipDetail_ID)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT salesReportWeightSlip_I"& _ 
                "D, salesReport_ID, weightSlipDetail_ID FROM trans_SalesReportWeightSlips WHERE ("& _ 
                "salesReportWeightSlip_ID = @salesReportWeightSlip_ID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@salesReport_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "salesReport_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@weightSlipDetail_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "weightSlipDetail_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_salesReportWeightSlip_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "salesReportWeightSlip_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_salesReport_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "salesReport_ID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_salesReport_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "salesReport_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_weightSlipDetail_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "weightSlipDetail_ID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_weightSlipDetail_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "weightSlipDetail_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@salesReportWeightSlip_ID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "salesReportWeightSlip_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.MarketingSalesSystem.Settings.Default.MKDBConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT salesReportWeightSlip_ID, salesReport_ID, weightSlipDetail_ID FROM dbo.tra"& _ 
                "ns_SalesReportWeightSlips"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MKDBDataSet.trans_SalesReportWeightSlipsDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As MKDBDataSet.trans_SalesReportWeightSlipsDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As MKDBDataSet.trans_SalesReportWeightSlipsDataTable = New MKDBDataSet.trans_SalesReportWeightSlipsDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As MKDBDataSet.trans_SalesReportWeightSlipsDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As MKDBDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "trans_SalesReportWeightSlips")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_salesReportWeightSlip_ID As Integer, ByVal Original_salesReport_ID As Global.System.Nullable(Of Integer), ByVal Original_weightSlipDetail_ID As Global.System.Nullable(Of Integer)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_salesReportWeightSlip_ID,Integer)
            If (Original_salesReport_ID.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_salesReport_ID.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Original_weightSlipDetail_ID.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_weightSlipDetail_ID.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal salesReport_ID As Global.System.Nullable(Of Integer), ByVal weightSlipDetail_ID As Global.System.Nullable(Of Integer)) As Integer
            If (salesReport_ID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(salesReport_ID.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (weightSlipDetail_ID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(weightSlipDetail_ID.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal salesReport_ID As Global.System.Nullable(Of Integer), ByVal weightSlipDetail_ID As Global.System.Nullable(Of Integer), ByVal Original_salesReportWeightSlip_ID As Integer, ByVal Original_salesReport_ID As Global.System.Nullable(Of Integer), ByVal Original_weightSlipDetail_ID As Global.System.Nullable(Of Integer), ByVal salesReportWeightSlip_ID As Integer) As Integer
            If (salesReport_ID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(salesReport_ID.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (weightSlipDetail_ID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(weightSlipDetail_ID.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Original_salesReportWeightSlip_ID,Integer)
            If (Original_salesReport_ID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_salesReport_ID.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Original_weightSlipDetail_ID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(Original_weightSlipDetail_ID.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(salesReportWeightSlip_ID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal salesReport_ID As Global.System.Nullable(Of Integer), ByVal weightSlipDetail_ID As Global.System.Nullable(Of Integer), ByVal Original_salesReportWeightSlip_ID As Integer, ByVal Original_salesReport_ID As Global.System.Nullable(Of Integer), ByVal Original_weightSlipDetail_ID As Global.System.Nullable(Of Integer)) As Integer
            Return Me.Update(salesReport_ID, weightSlipDetail_ID, Original_salesReportWeightSlip_ID, Original_salesReport_ID, Original_weightSlipDetail_ID, Original_salesReportWeightSlip_ID)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class trans_WeightSlipTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "trans_WeightSlip"
            tableMapping.ColumnMappings.Add("weightSlip_ID", "weightSlip_ID")
            tableMapping.ColumnMappings.Add("weightSlipDate", "weightSlipDate")
            tableMapping.ColumnMappings.Add("fishWeightSlipNum", "fishWeightSlipNum")
            tableMapping.ColumnMappings.Add("sellingType", "sellingType")
            tableMapping.ColumnMappings.Add("buyer", "buyer")
            tableMapping.ColumnMappings.Add("unloadingType", "unloadingType")
            tableMapping.ColumnMappings.Add("unloadingVessel_ID", "unloadingVessel_ID")
            tableMapping.ColumnMappings.Add("unloadingForeignVessel", "unloadingForeignVessel")
            tableMapping.ColumnMappings.Add("catcherVessel_ID", "catcherVessel_ID")
            tableMapping.ColumnMappings.Add("companyChecker_ID", "companyChecker_ID")
            tableMapping.ColumnMappings.Add("buyersChecker", "buyersChecker")
            tableMapping.ColumnMappings.Add("contractNum", "contractNum")
            tableMapping.ColumnMappings.Add("remarks", "remarks")
            tableMapping.ColumnMappings.Add("encodedBy", "encodedBy")
            tableMapping.ColumnMappings.Add("encodedOn", "encodedOn")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[trans_WeightSlip] WHERE (([weightSlip_ID] = @Original_weightSl"& _ 
                "ip_ID) AND ((@IsNull_weightSlipDate = 1 AND [weightSlipDate] IS NULL) OR ([weigh"& _ 
                "tSlipDate] = @Original_weightSlipDate)) AND ((@IsNull_fishWeightSlipNum = 1 AND "& _ 
                "[fishWeightSlipNum] IS NULL) OR ([fishWeightSlipNum] = @Original_fishWeightSlipN"& _ 
                "um)) AND ((@IsNull_sellingType = 1 AND [sellingType] IS NULL) OR ([sellingType] "& _ 
                "= @Original_sellingType)) AND ((@IsNull_buyer = 1 AND [buyer] IS NULL) OR ([buye"& _ 
                "r] = @Original_buyer)) AND ((@IsNull_unloadingType = 1 AND [unloadingType] IS NU"& _ 
                "LL) OR ([unloadingType] = @Original_unloadingType)) AND ((@IsNull_unloadingVesse"& _ 
                "l_ID = 1 AND [unloadingVessel_ID] IS NULL) OR ([unloadingVessel_ID] = @Original_"& _ 
                "unloadingVessel_ID)) AND ((@IsNull_unloadingForeignVessel = 1 AND [unloadingFore"& _ 
                "ignVessel] IS NULL) OR ([unloadingForeignVessel] = @Original_unloadingForeignVes"& _ 
                "sel)) AND ((@IsNull_catcherVessel_ID = 1 AND [catcherVessel_ID] IS NULL) OR ([ca"& _ 
                "tcherVessel_ID] = @Original_catcherVessel_ID)) AND ((@IsNull_companyChecker_ID ="& _ 
                " 1 AND [companyChecker_ID] IS NULL) OR ([companyChecker_ID] = @Original_companyC"& _ 
                "hecker_ID)) AND ((@IsNull_buyersChecker = 1 AND [buyersChecker] IS NULL) OR ([bu"& _ 
                "yersChecker] = @Original_buyersChecker)) AND ((@IsNull_contractNum = 1 AND [cont"& _ 
                "ractNum] IS NULL) OR ([contractNum] = @Original_contractNum)) AND ((@IsNull_rema"& _ 
                "rks = 1 AND [remarks] IS NULL) OR ([remarks] = @Original_remarks)) AND ((@IsNull"& _ 
                "_encodedBy = 1 AND [encodedBy] IS NULL) OR ([encodedBy] = @Original_encodedBy)) "& _ 
                "AND ((@IsNull_encodedOn = 1 AND [encodedOn] IS NULL) OR ([encodedOn] = @Original"& _ 
                "_encodedOn)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_weightSlip_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "weightSlip_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_weightSlipDate", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "weightSlipDate", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_weightSlipDate", Global.System.Data.SqlDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "weightSlipDate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_fishWeightSlipNum", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "fishWeightSlipNum", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_fishWeightSlipNum", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "fishWeightSlipNum", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_sellingType", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sellingType", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sellingType", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sellingType", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_buyer", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "buyer", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_buyer", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "buyer", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_unloadingType", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "unloadingType", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_unloadingType", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "unloadingType", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_unloadingVessel_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "unloadingVessel_ID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_unloadingVessel_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "unloadingVessel_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_unloadingForeignVessel", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "unloadingForeignVessel", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_unloadingForeignVessel", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "unloadingForeignVessel", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_catcherVessel_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "catcherVessel_ID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_catcherVessel_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "catcherVessel_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_companyChecker_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "companyChecker_ID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_companyChecker_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "companyChecker_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_buyersChecker", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "buyersChecker", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_buyersChecker", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "buyersChecker", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_contractNum", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "contractNum", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_contractNum", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "contractNum", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_remarks", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "remarks", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_remarks", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "remarks", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_encodedBy", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "encodedBy", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_encodedBy", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "encodedBy", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_encodedOn", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "encodedOn", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_encodedOn", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "encodedOn", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[trans_WeightSlip] ([weightSlipDate], [fishWeightSlipNum], [sel"& _ 
                "lingType], [buyer], [unloadingType], [unloadingVessel_ID], [unloadingForeignVess"& _ 
                "el], [catcherVessel_ID], [companyChecker_ID], [buyersChecker], [contractNum], [r"& _ 
                "emarks], [encodedBy], [encodedOn]) VALUES (@weightSlipDate, @fishWeightSlipNum, "& _ 
                "@sellingType, @buyer, @unloadingType, @unloadingVessel_ID, @unloadingForeignVess"& _ 
                "el, @catcherVessel_ID, @companyChecker_ID, @buyersChecker, @contractNum, @remark"& _ 
                "s, @encodedBy, @encodedOn);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT weightSlip_ID, weightSlipDate, fishWeightSli"& _ 
                "pNum, sellingType, buyer, unloadingType, unloadingVessel_ID, unloadingForeignVes"& _ 
                "sel, catcherVessel_ID, companyChecker_ID, buyersChecker, contractNum, remarks, e"& _ 
                "ncodedBy, encodedOn FROM trans_WeightSlip WHERE (weightSlip_ID = SCOPE_IDENTITY("& _ 
                "))"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@weightSlipDate", Global.System.Data.SqlDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "weightSlipDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@fishWeightSlipNum", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "fishWeightSlipNum", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sellingType", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sellingType", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@buyer", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "buyer", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@unloadingType", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "unloadingType", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@unloadingVessel_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "unloadingVessel_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@unloadingForeignVessel", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "unloadingForeignVessel", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@catcherVessel_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "catcherVessel_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@companyChecker_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "companyChecker_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@buyersChecker", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "buyersChecker", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@contractNum", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "contractNum", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@remarks", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "remarks", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@encodedBy", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "encodedBy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@encodedOn", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "encodedOn", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[trans_WeightSlip] SET [weightSlipDate] = @weightSlipDate, [fishWeig"& _ 
                "htSlipNum] = @fishWeightSlipNum, [sellingType] = @sellingType, [buyer] = @buyer,"& _ 
                " [unloadingType] = @unloadingType, [unloadingVessel_ID] = @unloadingVessel_ID, ["& _ 
                "unloadingForeignVessel] = @unloadingForeignVessel, [catcherVessel_ID] = @catcher"& _ 
                "Vessel_ID, [companyChecker_ID] = @companyChecker_ID, [buyersChecker] = @buyersCh"& _ 
                "ecker, [contractNum] = @contractNum, [remarks] = @remarks, [encodedBy] = @encode"& _ 
                "dBy, [encodedOn] = @encodedOn WHERE (([weightSlip_ID] = @Original_weightSlip_ID)"& _ 
                " AND ((@IsNull_weightSlipDate = 1 AND [weightSlipDate] IS NULL) OR ([weightSlipD"& _ 
                "ate] = @Original_weightSlipDate)) AND ((@IsNull_fishWeightSlipNum = 1 AND [fishW"& _ 
                "eightSlipNum] IS NULL) OR ([fishWeightSlipNum] = @Original_fishWeightSlipNum)) A"& _ 
                "ND ((@IsNull_sellingType = 1 AND [sellingType] IS NULL) OR ([sellingType] = @Ori"& _ 
                "ginal_sellingType)) AND ((@IsNull_buyer = 1 AND [buyer] IS NULL) OR ([buyer] = @"& _ 
                "Original_buyer)) AND ((@IsNull_unloadingType = 1 AND [unloadingType] IS NULL) OR"& _ 
                " ([unloadingType] = @Original_unloadingType)) AND ((@IsNull_unloadingVessel_ID ="& _ 
                " 1 AND [unloadingVessel_ID] IS NULL) OR ([unloadingVessel_ID] = @Original_unload"& _ 
                "ingVessel_ID)) AND ((@IsNull_unloadingForeignVessel = 1 AND [unloadingForeignVes"& _ 
                "sel] IS NULL) OR ([unloadingForeignVessel] = @Original_unloadingForeignVessel)) "& _ 
                "AND ((@IsNull_catcherVessel_ID = 1 AND [catcherVessel_ID] IS NULL) OR ([catcherV"& _ 
                "essel_ID] = @Original_catcherVessel_ID)) AND ((@IsNull_companyChecker_ID = 1 AND"& _ 
                " [companyChecker_ID] IS NULL) OR ([companyChecker_ID] = @Original_companyChecker"& _ 
                "_ID)) AND ((@IsNull_buyersChecker = 1 AND [buyersChecker] IS NULL) OR ([buyersCh"& _ 
                "ecker] = @Original_buyersChecker)) AND ((@IsNull_contractNum = 1 AND [contractNu"& _ 
                "m] IS NULL) OR ([contractNum] = @Original_contractNum)) AND ((@IsNull_remarks = "& _ 
                "1 AND [remarks] IS NULL) OR ([remarks] = @Original_remarks)) AND ((@IsNull_encod"& _ 
                "edBy = 1 AND [encodedBy] IS NULL) OR ([encodedBy] = @Original_encodedBy)) AND (("& _ 
                "@IsNull_encodedOn = 1 AND [encodedOn] IS NULL) OR ([encodedOn] = @Original_encod"& _ 
                "edOn)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT weightSlip_ID, weightSlipDate, fishWeightSlipNum, sellingType, "& _ 
                "buyer, unloadingType, unloadingVessel_ID, unloadingForeignVessel, catcherVessel_"& _ 
                "ID, companyChecker_ID, buyersChecker, contractNum, remarks, encodedBy, encodedOn"& _ 
                " FROM trans_WeightSlip WHERE (weightSlip_ID = @weightSlip_ID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@weightSlipDate", Global.System.Data.SqlDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "weightSlipDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@fishWeightSlipNum", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "fishWeightSlipNum", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@sellingType", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sellingType", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@buyer", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "buyer", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@unloadingType", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "unloadingType", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@unloadingVessel_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "unloadingVessel_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@unloadingForeignVessel", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "unloadingForeignVessel", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@catcherVessel_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "catcherVessel_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@companyChecker_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "companyChecker_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@buyersChecker", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "buyersChecker", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@contractNum", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "contractNum", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@remarks", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "remarks", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@encodedBy", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "encodedBy", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@encodedOn", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "encodedOn", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_weightSlip_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "weightSlip_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_weightSlipDate", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "weightSlipDate", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_weightSlipDate", Global.System.Data.SqlDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "weightSlipDate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_fishWeightSlipNum", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "fishWeightSlipNum", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_fishWeightSlipNum", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "fishWeightSlipNum", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_sellingType", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sellingType", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_sellingType", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "sellingType", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_buyer", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "buyer", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_buyer", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "buyer", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_unloadingType", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "unloadingType", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_unloadingType", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "unloadingType", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_unloadingVessel_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "unloadingVessel_ID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_unloadingVessel_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "unloadingVessel_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_unloadingForeignVessel", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "unloadingForeignVessel", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_unloadingForeignVessel", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "unloadingForeignVessel", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_catcherVessel_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "catcherVessel_ID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_catcherVessel_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "catcherVessel_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_companyChecker_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "companyChecker_ID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_companyChecker_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "companyChecker_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_buyersChecker", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "buyersChecker", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_buyersChecker", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "buyersChecker", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_contractNum", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "contractNum", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_contractNum", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "contractNum", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_remarks", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "remarks", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_remarks", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "remarks", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_encodedBy", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "encodedBy", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_encodedBy", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "encodedBy", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_encodedOn", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "encodedOn", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_encodedOn", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "encodedOn", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@weightSlip_ID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "weightSlip_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.MarketingSalesSystem.Settings.Default.MKDBConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT weightSlip_ID, weightSlipDate, fishWeightSlipNum, sellingType, buyer, unlo"& _ 
                "adingType, unloadingVessel_ID, unloadingForeignVessel, catcherVessel_ID, company"& _ 
                "Checker_ID, buyersChecker, contractNum, remarks, encodedBy, encodedOn FROM dbo.t"& _ 
                "rans_WeightSlip"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MKDBDataSet.trans_WeightSlipDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As MKDBDataSet.trans_WeightSlipDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As MKDBDataSet.trans_WeightSlipDataTable = New MKDBDataSet.trans_WeightSlipDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As MKDBDataSet.trans_WeightSlipDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As MKDBDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "trans_WeightSlip")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_weightSlip_ID As Integer, ByVal Original_weightSlipDate As Global.System.Nullable(Of Date), ByVal Original_fishWeightSlipNum As String, ByVal Original_sellingType As String, ByVal Original_buyer As String, ByVal Original_unloadingType As String, ByVal Original_unloadingVessel_ID As Global.System.Nullable(Of Integer), ByVal Original_unloadingForeignVessel As String, ByVal Original_catcherVessel_ID As Global.System.Nullable(Of Integer), ByVal Original_companyChecker_ID As Global.System.Nullable(Of Integer), ByVal Original_buyersChecker As String, ByVal Original_contractNum As String, ByVal Original_remarks As String, ByVal Original_encodedBy As Global.System.Nullable(Of Integer), ByVal Original_encodedOn As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_weightSlip_ID,Integer)
            If (Original_weightSlipDate.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_weightSlipDate.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Original_fishWeightSlipNum Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_fishWeightSlipNum,String)
            End If
            If (Original_sellingType Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_sellingType,String)
            End If
            If (Original_buyer Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_buyer,String)
            End If
            If (Original_unloadingType Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_unloadingType,String)
            End If
            If (Original_unloadingVessel_ID.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_unloadingVessel_ID.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (Original_unloadingForeignVessel Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_unloadingForeignVessel,String)
            End If
            If (Original_catcherVessel_ID.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_catcherVessel_ID.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (Original_companyChecker_ID.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_companyChecker_ID.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (Original_buyersChecker Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_buyersChecker,String)
            End If
            If (Original_contractNum Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(Original_contractNum,String)
            End If
            If (Original_remarks Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(Original_remarks,String)
            End If
            If (Original_encodedBy.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = CType(Original_encodedBy.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (Original_encodedOn.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(28).Value = CType(Original_encodedOn.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(28).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal weightSlipDate As Global.System.Nullable(Of Date), ByVal fishWeightSlipNum As String, ByVal sellingType As String, ByVal buyer As String, ByVal unloadingType As String, ByVal unloadingVessel_ID As Global.System.Nullable(Of Integer), ByVal unloadingForeignVessel As String, ByVal catcherVessel_ID As Global.System.Nullable(Of Integer), ByVal companyChecker_ID As Global.System.Nullable(Of Integer), ByVal buyersChecker As String, ByVal contractNum As String, ByVal remarks As String, ByVal encodedBy As Global.System.Nullable(Of Integer), ByVal encodedOn As Global.System.Nullable(Of Date)) As Integer
            If (weightSlipDate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(weightSlipDate.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (fishWeightSlipNum Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(fishWeightSlipNum,String)
            End If
            If (sellingType Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(sellingType,String)
            End If
            If (buyer Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(buyer,String)
            End If
            If (unloadingType Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(unloadingType,String)
            End If
            If (unloadingVessel_ID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(unloadingVessel_ID.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (unloadingForeignVessel Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(unloadingForeignVessel,String)
            End If
            If (catcherVessel_ID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(catcherVessel_ID.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (companyChecker_ID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(companyChecker_ID.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (buyersChecker Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(buyersChecker,String)
            End If
            If (contractNum Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(contractNum,String)
            End If
            If (remarks Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(remarks,String)
            End If
            If (encodedBy.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(encodedBy.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (encodedOn.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(encodedOn.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal weightSlipDate As Global.System.Nullable(Of Date),  _
                    ByVal fishWeightSlipNum As String,  _
                    ByVal sellingType As String,  _
                    ByVal buyer As String,  _
                    ByVal unloadingType As String,  _
                    ByVal unloadingVessel_ID As Global.System.Nullable(Of Integer),  _
                    ByVal unloadingForeignVessel As String,  _
                    ByVal catcherVessel_ID As Global.System.Nullable(Of Integer),  _
                    ByVal companyChecker_ID As Global.System.Nullable(Of Integer),  _
                    ByVal buyersChecker As String,  _
                    ByVal contractNum As String,  _
                    ByVal remarks As String,  _
                    ByVal encodedBy As Global.System.Nullable(Of Integer),  _
                    ByVal encodedOn As Global.System.Nullable(Of Date),  _
                    ByVal Original_weightSlip_ID As Integer,  _
                    ByVal Original_weightSlipDate As Global.System.Nullable(Of Date),  _
                    ByVal Original_fishWeightSlipNum As String,  _
                    ByVal Original_sellingType As String,  _
                    ByVal Original_buyer As String,  _
                    ByVal Original_unloadingType As String,  _
                    ByVal Original_unloadingVessel_ID As Global.System.Nullable(Of Integer),  _
                    ByVal Original_unloadingForeignVessel As String,  _
                    ByVal Original_catcherVessel_ID As Global.System.Nullable(Of Integer),  _
                    ByVal Original_companyChecker_ID As Global.System.Nullable(Of Integer),  _
                    ByVal Original_buyersChecker As String,  _
                    ByVal Original_contractNum As String,  _
                    ByVal Original_remarks As String,  _
                    ByVal Original_encodedBy As Global.System.Nullable(Of Integer),  _
                    ByVal Original_encodedOn As Global.System.Nullable(Of Date),  _
                    ByVal weightSlip_ID As Integer) As Integer
            If (weightSlipDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(weightSlipDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (fishWeightSlipNum Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(fishWeightSlipNum,String)
            End If
            If (sellingType Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(sellingType,String)
            End If
            If (buyer Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(buyer,String)
            End If
            If (unloadingType Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(unloadingType,String)
            End If
            If (unloadingVessel_ID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(unloadingVessel_ID.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (unloadingForeignVessel Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(unloadingForeignVessel,String)
            End If
            If (catcherVessel_ID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(catcherVessel_ID.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (companyChecker_ID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(companyChecker_ID.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (buyersChecker Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(buyersChecker,String)
            End If
            If (contractNum Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(contractNum,String)
            End If
            If (remarks Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(remarks,String)
            End If
            If (encodedBy.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(encodedBy.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (encodedOn.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(encodedOn.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_weightSlip_ID,Integer)
            If (Original_weightSlipDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Original_weightSlipDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (Original_fishWeightSlipNum Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(Original_fishWeightSlipNum,String)
            End If
            If (Original_sellingType Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Original_sellingType,String)
            End If
            If (Original_buyer Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(22).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(Original_buyer,String)
            End If
            If (Original_unloadingType Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(24).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(Original_unloadingType,String)
            End If
            If (Original_unloadingVessel_ID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(Original_unloadingVessel_ID.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (Original_unloadingForeignVessel Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(28).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(Original_unloadingForeignVessel,String)
            End If
            If (Original_catcherVessel_ID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(Original_catcherVessel_ID.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(30).Value = Global.System.DBNull.Value
            End If
            If (Original_companyChecker_ID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(Original_companyChecker_ID.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(32).Value = Global.System.DBNull.Value
            End If
            If (Original_buyersChecker Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(34).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(33).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(Original_buyersChecker,String)
            End If
            If (Original_contractNum Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(36).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(Original_contractNum,String)
            End If
            If (Original_remarks Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(38).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(Original_remarks,String)
            End If
            If (Original_encodedBy.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(Original_encodedBy.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(40).Value = Global.System.DBNull.Value
            End If
            If (Original_encodedOn.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(Original_encodedOn.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(42).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(43).Value = CType(weightSlip_ID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal weightSlipDate As Global.System.Nullable(Of Date),  _
                    ByVal fishWeightSlipNum As String,  _
                    ByVal sellingType As String,  _
                    ByVal buyer As String,  _
                    ByVal unloadingType As String,  _
                    ByVal unloadingVessel_ID As Global.System.Nullable(Of Integer),  _
                    ByVal unloadingForeignVessel As String,  _
                    ByVal catcherVessel_ID As Global.System.Nullable(Of Integer),  _
                    ByVal companyChecker_ID As Global.System.Nullable(Of Integer),  _
                    ByVal buyersChecker As String,  _
                    ByVal contractNum As String,  _
                    ByVal remarks As String,  _
                    ByVal encodedBy As Global.System.Nullable(Of Integer),  _
                    ByVal encodedOn As Global.System.Nullable(Of Date),  _
                    ByVal Original_weightSlip_ID As Integer,  _
                    ByVal Original_weightSlipDate As Global.System.Nullable(Of Date),  _
                    ByVal Original_fishWeightSlipNum As String,  _
                    ByVal Original_sellingType As String,  _
                    ByVal Original_buyer As String,  _
                    ByVal Original_unloadingType As String,  _
                    ByVal Original_unloadingVessel_ID As Global.System.Nullable(Of Integer),  _
                    ByVal Original_unloadingForeignVessel As String,  _
                    ByVal Original_catcherVessel_ID As Global.System.Nullable(Of Integer),  _
                    ByVal Original_companyChecker_ID As Global.System.Nullable(Of Integer),  _
                    ByVal Original_buyersChecker As String,  _
                    ByVal Original_contractNum As String,  _
                    ByVal Original_remarks As String,  _
                    ByVal Original_encodedBy As Global.System.Nullable(Of Integer),  _
                    ByVal Original_encodedOn As Global.System.Nullable(Of Date)) As Integer
            Return Me.Update(weightSlipDate, fishWeightSlipNum, sellingType, buyer, unloadingType, unloadingVessel_ID, unloadingForeignVessel, catcherVessel_ID, companyChecker_ID, buyersChecker, contractNum, remarks, encodedBy, encodedOn, Original_weightSlip_ID, Original_weightSlipDate, Original_fishWeightSlipNum, Original_sellingType, Original_buyer, Original_unloadingType, Original_unloadingVessel_ID, Original_unloadingForeignVessel, Original_catcherVessel_ID, Original_companyChecker_ID, Original_buyersChecker, Original_contractNum, Original_remarks, Original_encodedBy, Original_encodedOn, Original_weightSlip_ID)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class trans_WeightSlipDetailsTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter()
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping()
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "trans_WeightSlipDetails"
            tableMapping.ColumnMappings.Add("weightSlipDetail_ID", "weightSlipDetail_ID")
            tableMapping.ColumnMappings.Add("weightSlip_ID", "weightSlip_ID")
            tableMapping.ColumnMappings.Add("weightSlipDetailDate", "weightSlipDetailDate")
            tableMapping.ColumnMappings.Add("weigslipFormNum", "weigslipFormNum")
            tableMapping.ColumnMappings.Add("batchNum", "batchNum")
            tableMapping.ColumnMappings.Add("lotNum", "lotNum")
            tableMapping.ColumnMappings.Add("plateNum", "plateNum")
            tableMapping.ColumnMappings.Add("skipjack0_200To0_299", "skipjack0_200To0_299")
            tableMapping.ColumnMappings.Add("skipjack0_300To0_499", "skipjack0_300To0_499")
            tableMapping.ColumnMappings.Add("skipjack0_500To0_999", "skipjack0_500To0_999")
            tableMapping.ColumnMappings.Add("skipjack1_0To1_39", "skipjack1_0To1_39")
            tableMapping.ColumnMappings.Add("skipjack1_4To1_79", "skipjack1_4To1_79")
            tableMapping.ColumnMappings.Add("skipjack1_8To2_49", "skipjack1_8To2_49")
            tableMapping.ColumnMappings.Add("skipjack2_5To3_49", "skipjack2_5To3_49")
            tableMapping.ColumnMappings.Add("skipjack3_5AndUP", "skipjack3_5AndUP")
            tableMapping.ColumnMappings.Add("yelllowfin0_300To0_499", "yelllowfin0_300To0_499")
            tableMapping.ColumnMappings.Add("yellowfin0_500To0_999", "yellowfin0_500To0_999")
            tableMapping.ColumnMappings.Add("yellowfin1_0To1_49", "yellowfin1_0To1_49")
            tableMapping.ColumnMappings.Add("yellowfin1_5To2_49", "yellowfin1_5To2_49")
            tableMapping.ColumnMappings.Add("yellowfin2_5To3_49", "yellowfin2_5To3_49")
            tableMapping.ColumnMappings.Add("yellowfin3_5To4_99", "yellowfin3_5To4_99")
            tableMapping.ColumnMappings.Add("yellowfin5_0To9_99", "yellowfin5_0To9_99")
            tableMapping.ColumnMappings.Add("yellowfin10AndUP", "yellowfin10AndUP")
            tableMapping.ColumnMappings.Add("bigeye0_300To0_499", "bigeye0_300To0_499")
            tableMapping.ColumnMappings.Add("bigeye0_500To0_999", "bigeye0_500To0_999")
            tableMapping.ColumnMappings.Add("bigeye1_0To1_49", "bigeye1_0To1_49")
            tableMapping.ColumnMappings.Add("bigeye1_5To2_49", "bigeye1_5To2_49")
            tableMapping.ColumnMappings.Add("bigeye2_5To3_49", "bigeye2_5To3_49")
            tableMapping.ColumnMappings.Add("bigeye3_5To4_99", "bigeye3_5To4_99")
            tableMapping.ColumnMappings.Add("bigeye5_0To9_99", "bigeye5_0To9_99")
            tableMapping.ColumnMappings.Add("bigeye10AndUP", "bigeye10AndUP")
            tableMapping.ColumnMappings.Add("bonito0_300To0_499", "bonito0_300To0_499")
            tableMapping.ColumnMappings.Add("bonito0_500AndUP", "bonito0_500AndUP")
            tableMapping.ColumnMappings.Add("fishmeal", "fishmeal")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[trans_WeightSlipDetails] WHERE (([weightSlipDetail_ID] = @Orig"& _ 
                "inal_weightSlipDetail_ID) AND ((@IsNull_weightSlip_ID = 1 AND [weightSlip_ID] IS"& _ 
                " NULL) OR ([weightSlip_ID] = @Original_weightSlip_ID)) AND ((@IsNull_weightSlipD"& _ 
                "etailDate = 1 AND [weightSlipDetailDate] IS NULL) OR ([weightSlipDetailDate] = @"& _ 
                "Original_weightSlipDetailDate)) AND ((@IsNull_weigslipFormNum = 1 AND [weigslipF"& _ 
                "ormNum] IS NULL) OR ([weigslipFormNum] = @Original_weigslipFormNum)) AND ((@IsNu"& _ 
                "ll_batchNum = 1 AND [batchNum] IS NULL) OR ([batchNum] = @Original_batchNum)) AN"& _ 
                "D ((@IsNull_lotNum = 1 AND [lotNum] IS NULL) OR ([lotNum] = @Original_lotNum)) A"& _ 
                "ND ((@IsNull_plateNum = 1 AND [plateNum] IS NULL) OR ([plateNum] = @Original_pla"& _ 
                "teNum)) AND ((@IsNull_skipjack0_200To0_299 = 1 AND [skipjack0_200To0_299] IS NUL"& _ 
                "L) OR ([skipjack0_200To0_299] = @Original_skipjack0_200To0_299)) AND ((@IsNull_s"& _ 
                "kipjack0_300To0_499 = 1 AND [skipjack0_300To0_499] IS NULL) OR ([skipjack0_300To"& _ 
                "0_499] = @Original_skipjack0_300To0_499)) AND ((@IsNull_skipjack0_500To0_999 = 1"& _ 
                " AND [skipjack0_500To0_999] IS NULL) OR ([skipjack0_500To0_999] = @Original_skip"& _ 
                "jack0_500To0_999)) AND ((@IsNull_skipjack1_0To1_39 = 1 AND [skipjack1_0To1_39] I"& _ 
                "S NULL) OR ([skipjack1_0To1_39] = @Original_skipjack1_0To1_39)) AND ((@IsNull_sk"& _ 
                "ipjack1_4To1_79 = 1 AND [skipjack1_4To1_79] IS NULL) OR ([skipjack1_4To1_79] = @"& _ 
                "Original_skipjack1_4To1_79)) AND ((@IsNull_skipjack1_8To2_49 = 1 AND [skipjack1_"& _ 
                "8To2_49] IS NULL) OR ([skipjack1_8To2_49] = @Original_skipjack1_8To2_49)) AND (("& _ 
                "@IsNull_skipjack2_5To3_49 = 1 AND [skipjack2_5To3_49] IS NULL) OR ([skipjack2_5T"& _ 
                "o3_49] = @Original_skipjack2_5To3_49)) AND ((@IsNull_skipjack3_5AndUP = 1 AND [s"& _ 
                "kipjack3_5AndUP] IS NULL) OR ([skipjack3_5AndUP] = @Original_skipjack3_5AndUP)) "& _ 
                "AND ((@IsNull_yelllowfin0_300To0_499 = 1 AND [yelllowfin0_300To0_499] IS NULL) O"& _ 
                "R ([yelllowfin0_300To0_499] = @Original_yelllowfin0_300To0_499)) AND ((@IsNull_y"& _ 
                "ellowfin0_500To0_999 = 1 AND [yellowfin0_500To0_999] IS NULL) OR ([yellowfin0_50"& _ 
                "0To0_999] = @Original_yellowfin0_500To0_999)) AND ((@IsNull_yellowfin1_0To1_49 ="& _ 
                " 1 AND [yellowfin1_0To1_49] IS NULL) OR ([yellowfin1_0To1_49] = @Original_yellow"& _ 
                "fin1_0To1_49)) AND ((@IsNull_yellowfin1_5To2_49 = 1 AND [yellowfin1_5To2_49] IS "& _ 
                "NULL) OR ([yellowfin1_5To2_49] = @Original_yellowfin1_5To2_49)) AND ((@IsNull_ye"& _ 
                "llowfin2_5To3_49 = 1 AND [yellowfin2_5To3_49] IS NULL) OR ([yellowfin2_5To3_49] "& _ 
                "= @Original_yellowfin2_5To3_49)) AND ((@IsNull_yellowfin3_5To4_99 = 1 AND [yello"& _ 
                "wfin3_5To4_99] IS NULL) OR ([yellowfin3_5To4_99] = @Original_yellowfin3_5To4_99)"& _ 
                ") AND ((@IsNull_yellowfin5_0To9_99 = 1 AND [yellowfin5_0To9_99] IS NULL) OR ([ye"& _ 
                "llowfin5_0To9_99] = @Original_yellowfin5_0To9_99)) AND ((@IsNull_yellowfin10AndU"& _ 
                "P = 1 AND [yellowfin10AndUP] IS NULL) OR ([yellowfin10AndUP] = @Original_yellowf"& _ 
                "in10AndUP)) AND ((@IsNull_bigeye0_300To0_499 = 1 AND [bigeye0_300To0_499] IS NUL"& _ 
                "L) OR ([bigeye0_300To0_499] = @Original_bigeye0_300To0_499)) AND ((@IsNull_bigey"& _ 
                "e0_500To0_999 = 1 AND [bigeye0_500To0_999] IS NULL) OR ([bigeye0_500To0_999] = @"& _ 
                "Original_bigeye0_500To0_999)) AND ((@IsNull_bigeye1_0To1_49 = 1 AND [bigeye1_0To"& _ 
                "1_49] IS NULL) OR ([bigeye1_0To1_49] = @Original_bigeye1_0To1_49)) AND ((@IsNull"& _ 
                "_bigeye1_5To2_49 = 1 AND [bigeye1_5To2_49] IS NULL) OR ([bigeye1_5To2_49] = @Ori"& _ 
                "ginal_bigeye1_5To2_49)) AND ((@IsNull_bigeye2_5To3_49 = 1 AND [bigeye2_5To3_49] "& _ 
                "IS NULL) OR ([bigeye2_5To3_49] = @Original_bigeye2_5To3_49)) AND ((@IsNull_bigey"& _ 
                "e3_5To4_99 = 1 AND [bigeye3_5To4_99] IS NULL) OR ([bigeye3_5To4_99] = @Original_"& _ 
                "bigeye3_5To4_99)) AND ((@IsNull_bigeye5_0To9_99 = 1 AND [bigeye5_0To9_99] IS NUL"& _ 
                "L) OR ([bigeye5_0To9_99] = @Original_bigeye5_0To9_99)) AND ((@IsNull_bigeye10And"& _ 
                "UP = 1 AND [bigeye10AndUP] IS NULL) OR ([bigeye10AndUP] = @Original_bigeye10AndU"& _ 
                "P)) AND ((@IsNull_bonito0_300To0_499 = 1 AND [bonito0_300To0_499] IS NULL) OR (["& _ 
                "bonito0_300To0_499] = @Original_bonito0_300To0_499)) AND ((@IsNull_bonito0_500An"& _ 
                "dUP = 1 AND [bonito0_500AndUP] IS NULL) OR ([bonito0_500AndUP] = @Original_bonit"& _ 
                "o0_500AndUP)) AND ((@IsNull_fishmeal = 1 AND [fishmeal] IS NULL) OR ([fishmeal] "& _ 
                "= @Original_fishmeal)))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_weightSlipDetail_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "weightSlipDetail_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_weightSlip_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "weightSlip_ID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_weightSlip_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "weightSlip_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_weightSlipDetailDate", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "weightSlipDetailDate", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_weightSlipDetailDate", Global.System.Data.SqlDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "weightSlipDetailDate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_weigslipFormNum", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "weigslipFormNum", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_weigslipFormNum", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "weigslipFormNum", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_batchNum", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "batchNum", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_batchNum", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "batchNum", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_lotNum", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "lotNum", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_lotNum", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "lotNum", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_plateNum", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "plateNum", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_plateNum", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "plateNum", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_skipjack0_200To0_299", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "skipjack0_200To0_299", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_skipjack0_200To0_299", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 5, "skipjack0_200To0_299", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_skipjack0_300To0_499", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "skipjack0_300To0_499", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_skipjack0_300To0_499", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 5, "skipjack0_300To0_499", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_skipjack0_500To0_999", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "skipjack0_500To0_999", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_skipjack0_500To0_999", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 5, "skipjack0_500To0_999", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_skipjack1_0To1_39", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "skipjack1_0To1_39", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_skipjack1_0To1_39", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 5, "skipjack1_0To1_39", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_skipjack1_4To1_79", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "skipjack1_4To1_79", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_skipjack1_4To1_79", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 5, "skipjack1_4To1_79", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_skipjack1_8To2_49", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "skipjack1_8To2_49", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_skipjack1_8To2_49", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 5, "skipjack1_8To2_49", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_skipjack2_5To3_49", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "skipjack2_5To3_49", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_skipjack2_5To3_49", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 5, "skipjack2_5To3_49", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_skipjack3_5AndUP", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "skipjack3_5AndUP", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_skipjack3_5AndUP", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 5, "skipjack3_5AndUP", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_yelllowfin0_300To0_499", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "yelllowfin0_300To0_499", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_yelllowfin0_300To0_499", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 5, "yelllowfin0_300To0_499", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_yellowfin0_500To0_999", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "yellowfin0_500To0_999", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_yellowfin0_500To0_999", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 5, "yellowfin0_500To0_999", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_yellowfin1_0To1_49", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "yellowfin1_0To1_49", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_yellowfin1_0To1_49", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 5, "yellowfin1_0To1_49", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_yellowfin1_5To2_49", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "yellowfin1_5To2_49", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_yellowfin1_5To2_49", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 5, "yellowfin1_5To2_49", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_yellowfin2_5To3_49", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "yellowfin2_5To3_49", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_yellowfin2_5To3_49", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 5, "yellowfin2_5To3_49", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_yellowfin3_5To4_99", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "yellowfin3_5To4_99", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_yellowfin3_5To4_99", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 5, "yellowfin3_5To4_99", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_yellowfin5_0To9_99", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "yellowfin5_0To9_99", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_yellowfin5_0To9_99", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 5, "yellowfin5_0To9_99", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_yellowfin10AndUP", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "yellowfin10AndUP", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_yellowfin10AndUP", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 5, "yellowfin10AndUP", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_bigeye0_300To0_499", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "bigeye0_300To0_499", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_bigeye0_300To0_499", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 5, "bigeye0_300To0_499", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_bigeye0_500To0_999", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "bigeye0_500To0_999", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_bigeye0_500To0_999", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 5, "bigeye0_500To0_999", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_bigeye1_0To1_49", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "bigeye1_0To1_49", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_bigeye1_0To1_49", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 5, "bigeye1_0To1_49", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_bigeye1_5To2_49", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "bigeye1_5To2_49", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_bigeye1_5To2_49", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 5, "bigeye1_5To2_49", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_bigeye2_5To3_49", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "bigeye2_5To3_49", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_bigeye2_5To3_49", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 5, "bigeye2_5To3_49", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_bigeye3_5To4_99", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "bigeye3_5To4_99", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_bigeye3_5To4_99", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 5, "bigeye3_5To4_99", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_bigeye5_0To9_99", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "bigeye5_0To9_99", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_bigeye5_0To9_99", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 5, "bigeye5_0To9_99", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_bigeye10AndUP", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "bigeye10AndUP", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_bigeye10AndUP", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 5, "bigeye10AndUP", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_bonito0_300To0_499", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "bonito0_300To0_499", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_bonito0_300To0_499", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 5, "bonito0_300To0_499", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_bonito0_500AndUP", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "bonito0_500AndUP", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_bonito0_500AndUP", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 5, "bonito0_500AndUP", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_fishmeal", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "fishmeal", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_fishmeal", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 5, "fishmeal", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[trans_WeightSlipDetails] ([weightSlip_ID], [weightSlipDetailDa"& _ 
                "te], [weigslipFormNum], [batchNum], [lotNum], [plateNum], [skipjack0_200To0_299]"& _ 
                ", [skipjack0_300To0_499], [skipjack0_500To0_999], [skipjack1_0To1_39], [skipjack"& _ 
                "1_4To1_79], [skipjack1_8To2_49], [skipjack2_5To3_49], [skipjack3_5AndUP], [yelll"& _ 
                "owfin0_300To0_499], [yellowfin0_500To0_999], [yellowfin1_0To1_49], [yellowfin1_5"& _ 
                "To2_49], [yellowfin2_5To3_49], [yellowfin3_5To4_99], [yellowfin5_0To9_99], [yell"& _ 
                "owfin10AndUP], [bigeye0_300To0_499], [bigeye0_500To0_999], [bigeye1_0To1_49], [b"& _ 
                "igeye1_5To2_49], [bigeye2_5To3_49], [bigeye3_5To4_99], [bigeye5_0To9_99], [bigey"& _ 
                "e10AndUP], [bonito0_300To0_499], [bonito0_500AndUP], [fishmeal]) VALUES (@weight"& _ 
                "Slip_ID, @weightSlipDetailDate, @weigslipFormNum, @batchNum, @lotNum, @plateNum,"& _ 
                " @skipjack0_200To0_299, @skipjack0_300To0_499, @skipjack0_500To0_999, @skipjack1"& _ 
                "_0To1_39, @skipjack1_4To1_79, @skipjack1_8To2_49, @skipjack2_5To3_49, @skipjack3"& _ 
                "_5AndUP, @yelllowfin0_300To0_499, @yellowfin0_500To0_999, @yellowfin1_0To1_49, @"& _ 
                "yellowfin1_5To2_49, @yellowfin2_5To3_49, @yellowfin3_5To4_99, @yellowfin5_0To9_9"& _ 
                "9, @yellowfin10AndUP, @bigeye0_300To0_499, @bigeye0_500To0_999, @bigeye1_0To1_49"& _ 
                ", @bigeye1_5To2_49, @bigeye2_5To3_49, @bigeye3_5To4_99, @bigeye5_0To9_99, @bigey"& _ 
                "e10AndUP, @bonito0_300To0_499, @bonito0_500AndUP, @fishmeal);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT weightSlip"& _ 
                "Detail_ID, weightSlip_ID, weightSlipDetailDate, weigslipFormNum, batchNum, lotNu"& _ 
                "m, plateNum, skipjack0_200To0_299, skipjack0_300To0_499, skipjack0_500To0_999, s"& _ 
                "kipjack1_0To1_39, skipjack1_4To1_79, skipjack1_8To2_49, skipjack2_5To3_49, skipj"& _ 
                "ack3_5AndUP, yelllowfin0_300To0_499, yellowfin0_500To0_999, yellowfin1_0To1_49, "& _ 
                "yellowfin1_5To2_49, yellowfin2_5To3_49, yellowfin3_5To4_99, yellowfin5_0To9_99, "& _ 
                "yellowfin10AndUP, bigeye0_300To0_499, bigeye0_500To0_999, bigeye1_0To1_49, bigey"& _ 
                "e1_5To2_49, bigeye2_5To3_49, bigeye3_5To4_99, bigeye5_0To9_99, bigeye10AndUP, bo"& _ 
                "nito0_300To0_499, bonito0_500AndUP, fishmeal FROM trans_WeightSlipDetails WHERE "& _ 
                "(weightSlipDetail_ID = SCOPE_IDENTITY())"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@weightSlip_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "weightSlip_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@weightSlipDetailDate", Global.System.Data.SqlDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "weightSlipDetailDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@weigslipFormNum", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "weigslipFormNum", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@batchNum", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "batchNum", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@lotNum", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "lotNum", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@plateNum", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "plateNum", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@skipjack0_200To0_299", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 5, "skipjack0_200To0_299", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@skipjack0_300To0_499", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 5, "skipjack0_300To0_499", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@skipjack0_500To0_999", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 5, "skipjack0_500To0_999", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@skipjack1_0To1_39", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 5, "skipjack1_0To1_39", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@skipjack1_4To1_79", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 5, "skipjack1_4To1_79", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@skipjack1_8To2_49", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 5, "skipjack1_8To2_49", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@skipjack2_5To3_49", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 5, "skipjack2_5To3_49", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@skipjack3_5AndUP", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 5, "skipjack3_5AndUP", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@yelllowfin0_300To0_499", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 5, "yelllowfin0_300To0_499", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@yellowfin0_500To0_999", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 5, "yellowfin0_500To0_999", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@yellowfin1_0To1_49", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 5, "yellowfin1_0To1_49", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@yellowfin1_5To2_49", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 5, "yellowfin1_5To2_49", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@yellowfin2_5To3_49", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 5, "yellowfin2_5To3_49", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@yellowfin3_5To4_99", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 5, "yellowfin3_5To4_99", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@yellowfin5_0To9_99", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 5, "yellowfin5_0To9_99", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@yellowfin10AndUP", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 5, "yellowfin10AndUP", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@bigeye0_300To0_499", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 5, "bigeye0_300To0_499", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@bigeye0_500To0_999", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 5, "bigeye0_500To0_999", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@bigeye1_0To1_49", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 5, "bigeye1_0To1_49", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@bigeye1_5To2_49", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 5, "bigeye1_5To2_49", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@bigeye2_5To3_49", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 5, "bigeye2_5To3_49", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@bigeye3_5To4_99", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 5, "bigeye3_5To4_99", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@bigeye5_0To9_99", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 5, "bigeye5_0To9_99", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@bigeye10AndUP", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 5, "bigeye10AndUP", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@bonito0_300To0_499", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 5, "bonito0_300To0_499", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@bonito0_500AndUP", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 5, "bonito0_500AndUP", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@fishmeal", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 5, "fishmeal", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand()
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[trans_WeightSlipDetails] SET [weightSlip_ID] = @weightSlip_ID, [wei"& _ 
                "ghtSlipDetailDate] = @weightSlipDetailDate, [weigslipFormNum] = @weigslipFormNum"& _ 
                ", [batchNum] = @batchNum, [lotNum] = @lotNum, [plateNum] = @plateNum, [skipjack0"& _ 
                "_200To0_299] = @skipjack0_200To0_299, [skipjack0_300To0_499] = @skipjack0_300To0"& _ 
                "_499, [skipjack0_500To0_999] = @skipjack0_500To0_999, [skipjack1_0To1_39] = @ski"& _ 
                "pjack1_0To1_39, [skipjack1_4To1_79] = @skipjack1_4To1_79, [skipjack1_8To2_49] = "& _ 
                "@skipjack1_8To2_49, [skipjack2_5To3_49] = @skipjack2_5To3_49, [skipjack3_5AndUP]"& _ 
                " = @skipjack3_5AndUP, [yelllowfin0_300To0_499] = @yelllowfin0_300To0_499, [yello"& _ 
                "wfin0_500To0_999] = @yellowfin0_500To0_999, [yellowfin1_0To1_49] = @yellowfin1_0"& _ 
                "To1_49, [yellowfin1_5To2_49] = @yellowfin1_5To2_49, [yellowfin2_5To3_49] = @yell"& _ 
                "owfin2_5To3_49, [yellowfin3_5To4_99] = @yellowfin3_5To4_99, [yellowfin5_0To9_99]"& _ 
                " = @yellowfin5_0To9_99, [yellowfin10AndUP] = @yellowfin10AndUP, [bigeye0_300To0_"& _ 
                "499] = @bigeye0_300To0_499, [bigeye0_500To0_999] = @bigeye0_500To0_999, [bigeye1"& _ 
                "_0To1_49] = @bigeye1_0To1_49, [bigeye1_5To2_49] = @bigeye1_5To2_49, [bigeye2_5To"& _ 
                "3_49] = @bigeye2_5To3_49, [bigeye3_5To4_99] = @bigeye3_5To4_99, [bigeye5_0To9_99"& _ 
                "] = @bigeye5_0To9_99, [bigeye10AndUP] = @bigeye10AndUP, [bonito0_300To0_499] = @"& _ 
                "bonito0_300To0_499, [bonito0_500AndUP] = @bonito0_500AndUP, [fishmeal] = @fishme"& _ 
                "al WHERE (([weightSlipDetail_ID] = @Original_weightSlipDetail_ID) AND ((@IsNull_"& _ 
                "weightSlip_ID = 1 AND [weightSlip_ID] IS NULL) OR ([weightSlip_ID] = @Original_w"& _ 
                "eightSlip_ID)) AND ((@IsNull_weightSlipDetailDate = 1 AND [weightSlipDetailDate]"& _ 
                " IS NULL) OR ([weightSlipDetailDate] = @Original_weightSlipDetailDate)) AND ((@I"& _ 
                "sNull_weigslipFormNum = 1 AND [weigslipFormNum] IS NULL) OR ([weigslipFormNum] ="& _ 
                " @Original_weigslipFormNum)) AND ((@IsNull_batchNum = 1 AND [batchNum] IS NULL) "& _ 
                "OR ([batchNum] = @Original_batchNum)) AND ((@IsNull_lotNum = 1 AND [lotNum] IS N"& _ 
                "ULL) OR ([lotNum] = @Original_lotNum)) AND ((@IsNull_plateNum = 1 AND [plateNum]"& _ 
                " IS NULL) OR ([plateNum] = @Original_plateNum)) AND ((@IsNull_skipjack0_200To0_2"& _ 
                "99 = 1 AND [skipjack0_200To0_299] IS NULL) OR ([skipjack0_200To0_299] = @Origina"& _ 
                "l_skipjack0_200To0_299)) AND ((@IsNull_skipjack0_300To0_499 = 1 AND [skipjack0_3"& _ 
                "00To0_499] IS NULL) OR ([skipjack0_300To0_499] = @Original_skipjack0_300To0_499)"& _ 
                ") AND ((@IsNull_skipjack0_500To0_999 = 1 AND [skipjack0_500To0_999] IS NULL) OR "& _ 
                "([skipjack0_500To0_999] = @Original_skipjack0_500To0_999)) AND ((@IsNull_skipjac"& _ 
                "k1_0To1_39 = 1 AND [skipjack1_0To1_39] IS NULL) OR ([skipjack1_0To1_39] = @Origi"& _ 
                "nal_skipjack1_0To1_39)) AND ((@IsNull_skipjack1_4To1_79 = 1 AND [skipjack1_4To1_"& _ 
                "79] IS NULL) OR ([skipjack1_4To1_79] = @Original_skipjack1_4To1_79)) AND ((@IsNu"& _ 
                "ll_skipjack1_8To2_49 = 1 AND [skipjack1_8To2_49] IS NULL) OR ([skipjack1_8To2_49"& _ 
                "] = @Original_skipjack1_8To2_49)) AND ((@IsNull_skipjack2_5To3_49 = 1 AND [skipj"& _ 
                "ack2_5To3_49] IS NULL) OR ([skipjack2_5To3_49] = @Original_skipjack2_5To3_49)) A"& _ 
                "ND ((@IsNull_skipjack3_5AndUP = 1 AND [skipjack3_5AndUP] IS NULL) OR ([skipjack3"& _ 
                "_5AndUP] = @Original_skipjack3_5AndUP)) AND ((@IsNull_yelllowfin0_300To0_499 = 1"& _ 
                " AND [yelllowfin0_300To0_499] IS NULL) OR ([yelllowfin0_300To0_499] = @Original_"& _ 
                "yelllowfin0_300To0_499)) AND ((@IsNull_yellowfin0_500To0_999 = 1 AND [yellowfin0"& _ 
                "_500To0_999] IS NULL) OR ([yellowfin0_500To0_999] = @Original_yellowfin0_500To0_"& _ 
                "999)) AND ((@IsNull_yellowfin1_0To1_49 = 1 AND [yellowfin1_0To1_49] IS NULL) OR "& _ 
                "([yellowfin1_0To1_49] = @Original_yellowfin1_0To1_49)) AND ((@IsNull_yellowfin1_"& _ 
                "5To2_49 = 1 AND [yellowfin1_5To2_49] IS NULL) OR ([yellowfin1_5To2_49] = @Origin"& _ 
                "al_yellowfin1_5To2_49)) AND ((@IsNull_yellowfin2_5To3_49 = 1 AND [yellowfin2_5To"& _ 
                "3_49] IS NULL) OR ([yellowfin2_5To3_49] = @Original_yellowfin2_5To3_49)) AND ((@"& _ 
                "IsNull_yellowfin3_5To4_99 = 1 AND [yellowfin3_5To4_99] IS NULL) OR ([yellowfin3_"& _ 
                "5To4_99] = @Original_yellowfin3_5To4_99)) AND ((@IsNull_yellowfin5_0To9_99 = 1 A"& _ 
                "ND [yellowfin5_0To9_99] IS NULL) OR ([yellowfin5_0To9_99] = @Original_yellowfin5"& _ 
                "_0To9_99)) AND ((@IsNull_yellowfin10AndUP = 1 AND [yellowfin10AndUP] IS NULL) OR"& _ 
                " ([yellowfin10AndUP] = @Original_yellowfin10AndUP)) AND ((@IsNull_bigeye0_300To0"& _ 
                "_499 = 1 AND [bigeye0_300To0_499] IS NULL) OR ([bigeye0_300To0_499] = @Original_"& _ 
                "bigeye0_300To0_499)) AND ((@IsNull_bigeye0_500To0_999 = 1 AND [bigeye0_500To0_99"& _ 
                "9] IS NULL) OR ([bigeye0_500To0_999] = @Original_bigeye0_500To0_999)) AND ((@IsN"& _ 
                "ull_bigeye1_0To1_49 = 1 AND [bigeye1_0To1_49] IS NULL) OR ([bigeye1_0To1_49] = @"& _ 
                "Original_bigeye1_0To1_49)) AND ((@IsNull_bigeye1_5To2_49 = 1 AND [bigeye1_5To2_4"& _ 
                "9] IS NULL) OR ([bigeye1_5To2_49] = @Original_bigeye1_5To2_49)) AND ((@IsNull_bi"& _ 
                "geye2_5To3_49 = 1 AND [bigeye2_5To3_49] IS NULL) OR ([bigeye2_5To3_49] = @Origin"& _ 
                "al_bigeye2_5To3_49)) AND ((@IsNull_bigeye3_5To4_99 = 1 AND [bigeye3_5To4_99] IS "& _ 
                "NULL) OR ([bigeye3_5To4_99] = @Original_bigeye3_5To4_99)) AND ((@IsNull_bigeye5_"& _ 
                "0To9_99 = 1 AND [bigeye5_0To9_99] IS NULL) OR ([bigeye5_0To9_99] = @Original_big"& _ 
                "eye5_0To9_99)) AND ((@IsNull_bigeye10AndUP = 1 AND [bigeye10AndUP] IS NULL) OR ("& _ 
                "[bigeye10AndUP] = @Original_bigeye10AndUP)) AND ((@IsNull_bonito0_300To0_499 = 1"& _ 
                " AND [bonito0_300To0_499] IS NULL) OR ([bonito0_300To0_499] = @Original_bonito0_"& _ 
                "300To0_499)) AND ((@IsNull_bonito0_500AndUP = 1 AND [bonito0_500AndUP] IS NULL) "& _ 
                "OR ([bonito0_500AndUP] = @Original_bonito0_500AndUP)) AND ((@IsNull_fishmeal = 1"& _ 
                " AND [fishmeal] IS NULL) OR ([fishmeal] = @Original_fishmeal)));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT weightS"& _ 
                "lipDetail_ID, weightSlip_ID, weightSlipDetailDate, weigslipFormNum, batchNum, lo"& _ 
                "tNum, plateNum, skipjack0_200To0_299, skipjack0_300To0_499, skipjack0_500To0_999"& _ 
                ", skipjack1_0To1_39, skipjack1_4To1_79, skipjack1_8To2_49, skipjack2_5To3_49, sk"& _ 
                "ipjack3_5AndUP, yelllowfin0_300To0_499, yellowfin0_500To0_999, yellowfin1_0To1_4"& _ 
                "9, yellowfin1_5To2_49, yellowfin2_5To3_49, yellowfin3_5To4_99, yellowfin5_0To9_9"& _ 
                "9, yellowfin10AndUP, bigeye0_300To0_499, bigeye0_500To0_999, bigeye1_0To1_49, bi"& _ 
                "geye1_5To2_49, bigeye2_5To3_49, bigeye3_5To4_99, bigeye5_0To9_99, bigeye10AndUP,"& _ 
                " bonito0_300To0_499, bonito0_500AndUP, fishmeal FROM trans_WeightSlipDetails WHE"& _ 
                "RE (weightSlipDetail_ID = @weightSlipDetail_ID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@weightSlip_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "weightSlip_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@weightSlipDetailDate", Global.System.Data.SqlDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "weightSlipDetailDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@weigslipFormNum", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "weigslipFormNum", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@batchNum", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "batchNum", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@lotNum", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "lotNum", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@plateNum", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "plateNum", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@skipjack0_200To0_299", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 5, "skipjack0_200To0_299", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@skipjack0_300To0_499", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 5, "skipjack0_300To0_499", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@skipjack0_500To0_999", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 5, "skipjack0_500To0_999", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@skipjack1_0To1_39", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 5, "skipjack1_0To1_39", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@skipjack1_4To1_79", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 5, "skipjack1_4To1_79", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@skipjack1_8To2_49", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 5, "skipjack1_8To2_49", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@skipjack2_5To3_49", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 5, "skipjack2_5To3_49", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@skipjack3_5AndUP", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 5, "skipjack3_5AndUP", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@yelllowfin0_300To0_499", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 5, "yelllowfin0_300To0_499", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@yellowfin0_500To0_999", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 5, "yellowfin0_500To0_999", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@yellowfin1_0To1_49", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 5, "yellowfin1_0To1_49", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@yellowfin1_5To2_49", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 5, "yellowfin1_5To2_49", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@yellowfin2_5To3_49", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 5, "yellowfin2_5To3_49", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@yellowfin3_5To4_99", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 5, "yellowfin3_5To4_99", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@yellowfin5_0To9_99", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 5, "yellowfin5_0To9_99", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@yellowfin10AndUP", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 5, "yellowfin10AndUP", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@bigeye0_300To0_499", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 5, "bigeye0_300To0_499", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@bigeye0_500To0_999", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 5, "bigeye0_500To0_999", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@bigeye1_0To1_49", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 5, "bigeye1_0To1_49", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@bigeye1_5To2_49", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 5, "bigeye1_5To2_49", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@bigeye2_5To3_49", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 5, "bigeye2_5To3_49", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@bigeye3_5To4_99", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 5, "bigeye3_5To4_99", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@bigeye5_0To9_99", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 5, "bigeye5_0To9_99", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@bigeye10AndUP", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 5, "bigeye10AndUP", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@bonito0_300To0_499", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 5, "bonito0_300To0_499", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@bonito0_500AndUP", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 5, "bonito0_500AndUP", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@fishmeal", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 5, "fishmeal", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_weightSlipDetail_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "weightSlipDetail_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_weightSlip_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "weightSlip_ID", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_weightSlip_ID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "weightSlip_ID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_weightSlipDetailDate", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "weightSlipDetailDate", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_weightSlipDetailDate", Global.System.Data.SqlDbType.[Date], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "weightSlipDetailDate", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_weigslipFormNum", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "weigslipFormNum", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_weigslipFormNum", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "weigslipFormNum", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_batchNum", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "batchNum", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_batchNum", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "batchNum", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_lotNum", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "lotNum", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_lotNum", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "lotNum", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_plateNum", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "plateNum", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_plateNum", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "plateNum", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_skipjack0_200To0_299", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "skipjack0_200To0_299", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_skipjack0_200To0_299", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 5, "skipjack0_200To0_299", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_skipjack0_300To0_499", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "skipjack0_300To0_499", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_skipjack0_300To0_499", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 5, "skipjack0_300To0_499", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_skipjack0_500To0_999", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "skipjack0_500To0_999", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_skipjack0_500To0_999", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 5, "skipjack0_500To0_999", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_skipjack1_0To1_39", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "skipjack1_0To1_39", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_skipjack1_0To1_39", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 5, "skipjack1_0To1_39", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_skipjack1_4To1_79", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "skipjack1_4To1_79", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_skipjack1_4To1_79", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 5, "skipjack1_4To1_79", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_skipjack1_8To2_49", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "skipjack1_8To2_49", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_skipjack1_8To2_49", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 5, "skipjack1_8To2_49", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_skipjack2_5To3_49", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "skipjack2_5To3_49", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_skipjack2_5To3_49", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 5, "skipjack2_5To3_49", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_skipjack3_5AndUP", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "skipjack3_5AndUP", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_skipjack3_5AndUP", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 5, "skipjack3_5AndUP", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_yelllowfin0_300To0_499", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "yelllowfin0_300To0_499", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_yelllowfin0_300To0_499", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 5, "yelllowfin0_300To0_499", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_yellowfin0_500To0_999", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "yellowfin0_500To0_999", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_yellowfin0_500To0_999", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 5, "yellowfin0_500To0_999", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_yellowfin1_0To1_49", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "yellowfin1_0To1_49", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_yellowfin1_0To1_49", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 5, "yellowfin1_0To1_49", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_yellowfin1_5To2_49", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "yellowfin1_5To2_49", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_yellowfin1_5To2_49", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 5, "yellowfin1_5To2_49", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_yellowfin2_5To3_49", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "yellowfin2_5To3_49", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_yellowfin2_5To3_49", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 5, "yellowfin2_5To3_49", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_yellowfin3_5To4_99", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "yellowfin3_5To4_99", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_yellowfin3_5To4_99", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 5, "yellowfin3_5To4_99", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_yellowfin5_0To9_99", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "yellowfin5_0To9_99", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_yellowfin5_0To9_99", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 5, "yellowfin5_0To9_99", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_yellowfin10AndUP", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "yellowfin10AndUP", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_yellowfin10AndUP", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 5, "yellowfin10AndUP", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_bigeye0_300To0_499", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "bigeye0_300To0_499", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_bigeye0_300To0_499", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 5, "bigeye0_300To0_499", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_bigeye0_500To0_999", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "bigeye0_500To0_999", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_bigeye0_500To0_999", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 5, "bigeye0_500To0_999", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_bigeye1_0To1_49", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "bigeye1_0To1_49", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_bigeye1_0To1_49", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 5, "bigeye1_0To1_49", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_bigeye1_5To2_49", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "bigeye1_5To2_49", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_bigeye1_5To2_49", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 5, "bigeye1_5To2_49", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_bigeye2_5To3_49", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "bigeye2_5To3_49", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_bigeye2_5To3_49", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 5, "bigeye2_5To3_49", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_bigeye3_5To4_99", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "bigeye3_5To4_99", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_bigeye3_5To4_99", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 5, "bigeye3_5To4_99", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_bigeye5_0To9_99", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "bigeye5_0To9_99", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_bigeye5_0To9_99", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 5, "bigeye5_0To9_99", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_bigeye10AndUP", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "bigeye10AndUP", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_bigeye10AndUP", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 5, "bigeye10AndUP", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_bonito0_300To0_499", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "bonito0_300To0_499", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_bonito0_300To0_499", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 5, "bonito0_300To0_499", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_bonito0_500AndUP", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "bonito0_500AndUP", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_bonito0_500AndUP", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 5, "bonito0_500AndUP", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNull_fishmeal", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "fishmeal", Global.System.Data.DataRowVersion.Original, true, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_fishmeal", Global.System.Data.SqlDbType.[Decimal], 0, Global.System.Data.ParameterDirection.Input, 10, 5, "fishmeal", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@weightSlipDetail_ID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "weightSlipDetail_ID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection()
            Me._connection.ConnectionString = Global.MarketingSalesSystem.Settings.Default.MKDBConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand()
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT weightSlipDetail_ID, weightSlip_ID, weightSlipDetailDate, weigslipFormNum,"& _ 
                " batchNum, lotNum, plateNum, skipjack0_200To0_299, skipjack0_300To0_499, skipjac"& _ 
                "k0_500To0_999, skipjack1_0To1_39, skipjack1_4To1_79, skipjack1_8To2_49, skipjack"& _ 
                "2_5To3_49, skipjack3_5AndUP, yelllowfin0_300To0_499, yellowfin0_500To0_999, yell"& _ 
                "owfin1_0To1_49, yellowfin1_5To2_49, yellowfin2_5To3_49, yellowfin3_5To4_99, yell"& _ 
                "owfin5_0To9_99, yellowfin10AndUP, bigeye0_300To0_499, bigeye0_500To0_999, bigeye"& _ 
                "1_0To1_49, bigeye1_5To2_49, bigeye2_5To3_49, bigeye3_5To4_99, bigeye5_0To9_99, b"& _ 
                "igeye10AndUP, bonito0_300To0_499, bonito0_500AndUP, fishmeal FROM dbo.trans_Weig"& _ 
                "htSlipDetails"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As MKDBDataSet.trans_WeightSlipDetailsDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As MKDBDataSet.trans_WeightSlipDetailsDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As MKDBDataSet.trans_WeightSlipDetailsDataTable = New MKDBDataSet.trans_WeightSlipDetailsDataTable()
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As MKDBDataSet.trans_WeightSlipDetailsDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As MKDBDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "trans_WeightSlipDetails")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete( _
                    ByVal Original_weightSlipDetail_ID As Integer,  _
                    ByVal Original_weightSlip_ID As Global.System.Nullable(Of Integer),  _
                    ByVal Original_weightSlipDetailDate As Global.System.Nullable(Of Date),  _
                    ByVal Original_weigslipFormNum As String,  _
                    ByVal Original_batchNum As String,  _
                    ByVal Original_lotNum As String,  _
                    ByVal Original_plateNum As String,  _
                    ByVal Original_skipjack0_200To0_299 As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_skipjack0_300To0_499 As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_skipjack0_500To0_999 As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_skipjack1_0To1_39 As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_skipjack1_4To1_79 As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_skipjack1_8To2_49 As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_skipjack2_5To3_49 As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_skipjack3_5AndUP As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_yelllowfin0_300To0_499 As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_yellowfin0_500To0_999 As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_yellowfin1_0To1_49 As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_yellowfin1_5To2_49 As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_yellowfin2_5To3_49 As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_yellowfin3_5To4_99 As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_yellowfin5_0To9_99 As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_yellowfin10AndUP As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_bigeye0_300To0_499 As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_bigeye0_500To0_999 As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_bigeye1_0To1_49 As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_bigeye1_5To2_49 As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_bigeye2_5To3_49 As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_bigeye3_5To4_99 As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_bigeye5_0To9_99 As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_bigeye10AndUP As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_bonito0_300To0_499 As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_bonito0_500AndUP As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_fishmeal As Global.System.Nullable(Of Decimal)) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_weightSlipDetail_ID,Integer)
            If (Original_weightSlip_ID.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = CType(Original_weightSlip_ID.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (Original_weightSlipDetailDate.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = CType(Original_weightSlipDetailDate.Value,Date)
            Else
                Me.Adapter.DeleteCommand.Parameters(3).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (Original_weigslipFormNum Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(5).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(6).Value = CType(Original_weigslipFormNum,String)
            End If
            If (Original_batchNum Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(7).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(8).Value = CType(Original_batchNum,String)
            End If
            If (Original_lotNum Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(9).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(10).Value = CType(Original_lotNum,String)
            End If
            If (Original_plateNum Is Nothing) Then
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.DeleteCommand.Parameters(11).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(12).Value = CType(Original_plateNum,String)
            End If
            If (Original_skipjack0_200To0_299.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = CType(Original_skipjack0_200To0_299.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(13).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (Original_skipjack0_300To0_499.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = CType(Original_skipjack0_300To0_499.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(15).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (Original_skipjack0_500To0_999.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = CType(Original_skipjack0_500To0_999.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(17).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (Original_skipjack1_0To1_39.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = CType(Original_skipjack1_0To1_39.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(19).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (Original_skipjack1_4To1_79.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = CType(Original_skipjack1_4To1_79.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(21).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (Original_skipjack1_8To2_49.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = CType(Original_skipjack1_8To2_49.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(23).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            If (Original_skipjack2_5To3_49.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = CType(Original_skipjack2_5To3_49.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(25).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (Original_skipjack3_5AndUP.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(28).Value = CType(Original_skipjack3_5AndUP.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(27).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(28).Value = Global.System.DBNull.Value
            End If
            If (Original_yelllowfin0_300To0_499.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(30).Value = CType(Original_yelllowfin0_300To0_499.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(29).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(30).Value = Global.System.DBNull.Value
            End If
            If (Original_yellowfin0_500To0_999.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(31).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(32).Value = CType(Original_yellowfin0_500To0_999.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(31).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(32).Value = Global.System.DBNull.Value
            End If
            If (Original_yellowfin1_0To1_49.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(33).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(34).Value = CType(Original_yellowfin1_0To1_49.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(33).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(34).Value = Global.System.DBNull.Value
            End If
            If (Original_yellowfin1_5To2_49.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(35).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(36).Value = CType(Original_yellowfin1_5To2_49.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(35).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(36).Value = Global.System.DBNull.Value
            End If
            If (Original_yellowfin2_5To3_49.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(37).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(38).Value = CType(Original_yellowfin2_5To3_49.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(37).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(38).Value = Global.System.DBNull.Value
            End If
            If (Original_yellowfin3_5To4_99.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(39).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(40).Value = CType(Original_yellowfin3_5To4_99.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(39).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(40).Value = Global.System.DBNull.Value
            End If
            If (Original_yellowfin5_0To9_99.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(41).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(42).Value = CType(Original_yellowfin5_0To9_99.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(41).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(42).Value = Global.System.DBNull.Value
            End If
            If (Original_yellowfin10AndUP.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(43).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(44).Value = CType(Original_yellowfin10AndUP.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(43).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(44).Value = Global.System.DBNull.Value
            End If
            If (Original_bigeye0_300To0_499.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(45).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(46).Value = CType(Original_bigeye0_300To0_499.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(45).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(46).Value = Global.System.DBNull.Value
            End If
            If (Original_bigeye0_500To0_999.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(47).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(48).Value = CType(Original_bigeye0_500To0_999.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(47).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(48).Value = Global.System.DBNull.Value
            End If
            If (Original_bigeye1_0To1_49.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(49).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(50).Value = CType(Original_bigeye1_0To1_49.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(49).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(50).Value = Global.System.DBNull.Value
            End If
            If (Original_bigeye1_5To2_49.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(51).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(52).Value = CType(Original_bigeye1_5To2_49.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(51).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(52).Value = Global.System.DBNull.Value
            End If
            If (Original_bigeye2_5To3_49.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(53).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(54).Value = CType(Original_bigeye2_5To3_49.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(53).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(54).Value = Global.System.DBNull.Value
            End If
            If (Original_bigeye3_5To4_99.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(55).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(56).Value = CType(Original_bigeye3_5To4_99.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(55).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(56).Value = Global.System.DBNull.Value
            End If
            If (Original_bigeye5_0To9_99.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(57).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(58).Value = CType(Original_bigeye5_0To9_99.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(57).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(58).Value = Global.System.DBNull.Value
            End If
            If (Original_bigeye10AndUP.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(59).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(60).Value = CType(Original_bigeye10AndUP.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(59).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(60).Value = Global.System.DBNull.Value
            End If
            If (Original_bonito0_300To0_499.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(61).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(62).Value = CType(Original_bonito0_300To0_499.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(61).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(62).Value = Global.System.DBNull.Value
            End If
            If (Original_bonito0_500AndUP.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(63).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(64).Value = CType(Original_bonito0_500AndUP.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(63).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(64).Value = Global.System.DBNull.Value
            End If
            If (Original_fishmeal.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(65).Value = CType(0,Object)
                Me.Adapter.DeleteCommand.Parameters(66).Value = CType(Original_fishmeal.Value,Decimal)
            Else
                Me.Adapter.DeleteCommand.Parameters(65).Value = CType(1,Object)
                Me.Adapter.DeleteCommand.Parameters(66).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal weightSlip_ID As Global.System.Nullable(Of Integer),  _
                    ByVal weightSlipDetailDate As Global.System.Nullable(Of Date),  _
                    ByVal weigslipFormNum As String,  _
                    ByVal batchNum As String,  _
                    ByVal lotNum As String,  _
                    ByVal plateNum As String,  _
                    ByVal skipjack0_200To0_299 As Global.System.Nullable(Of Decimal),  _
                    ByVal skipjack0_300To0_499 As Global.System.Nullable(Of Decimal),  _
                    ByVal skipjack0_500To0_999 As Global.System.Nullable(Of Decimal),  _
                    ByVal skipjack1_0To1_39 As Global.System.Nullable(Of Decimal),  _
                    ByVal skipjack1_4To1_79 As Global.System.Nullable(Of Decimal),  _
                    ByVal skipjack1_8To2_49 As Global.System.Nullable(Of Decimal),  _
                    ByVal skipjack2_5To3_49 As Global.System.Nullable(Of Decimal),  _
                    ByVal skipjack3_5AndUP As Global.System.Nullable(Of Decimal),  _
                    ByVal yelllowfin0_300To0_499 As Global.System.Nullable(Of Decimal),  _
                    ByVal yellowfin0_500To0_999 As Global.System.Nullable(Of Decimal),  _
                    ByVal yellowfin1_0To1_49 As Global.System.Nullable(Of Decimal),  _
                    ByVal yellowfin1_5To2_49 As Global.System.Nullable(Of Decimal),  _
                    ByVal yellowfin2_5To3_49 As Global.System.Nullable(Of Decimal),  _
                    ByVal yellowfin3_5To4_99 As Global.System.Nullable(Of Decimal),  _
                    ByVal yellowfin5_0To9_99 As Global.System.Nullable(Of Decimal),  _
                    ByVal yellowfin10AndUP As Global.System.Nullable(Of Decimal),  _
                    ByVal bigeye0_300To0_499 As Global.System.Nullable(Of Decimal),  _
                    ByVal bigeye0_500To0_999 As Global.System.Nullable(Of Decimal),  _
                    ByVal bigeye1_0To1_49 As Global.System.Nullable(Of Decimal),  _
                    ByVal bigeye1_5To2_49 As Global.System.Nullable(Of Decimal),  _
                    ByVal bigeye2_5To3_49 As Global.System.Nullable(Of Decimal),  _
                    ByVal bigeye3_5To4_99 As Global.System.Nullable(Of Decimal),  _
                    ByVal bigeye5_0To9_99 As Global.System.Nullable(Of Decimal),  _
                    ByVal bigeye10AndUP As Global.System.Nullable(Of Decimal),  _
                    ByVal bonito0_300To0_499 As Global.System.Nullable(Of Decimal),  _
                    ByVal bonito0_500AndUP As Global.System.Nullable(Of Decimal),  _
                    ByVal fishmeal As Global.System.Nullable(Of Decimal)) As Integer
            If (weightSlip_ID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(0).Value = CType(weightSlip_ID.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (weightSlipDetailDate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(weightSlipDetailDate.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (weigslipFormNum Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(weigslipFormNum,String)
            End If
            If (batchNum Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(batchNum,String)
            End If
            If (lotNum Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(lotNum,String)
            End If
            If (plateNum Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(plateNum,String)
            End If
            If (skipjack0_200To0_299.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(skipjack0_200To0_299.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (skipjack0_300To0_499.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(skipjack0_300To0_499.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (skipjack0_500To0_999.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(skipjack0_500To0_999.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (skipjack1_0To1_39.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(skipjack1_0To1_39.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (skipjack1_4To1_79.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(skipjack1_4To1_79.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (skipjack1_8To2_49.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(skipjack1_8To2_49.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (skipjack2_5To3_49.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(skipjack2_5To3_49.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (skipjack3_5AndUP.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(skipjack3_5AndUP.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (yelllowfin0_300To0_499.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(yelllowfin0_300To0_499.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (yellowfin0_500To0_999.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(yellowfin0_500To0_999.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (yellowfin1_0To1_49.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(yellowfin1_0To1_49.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (yellowfin1_5To2_49.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(yellowfin1_5To2_49.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (yellowfin2_5To3_49.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(yellowfin2_5To3_49.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (yellowfin3_5To4_99.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(yellowfin3_5To4_99.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (yellowfin5_0To9_99.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(yellowfin5_0To9_99.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (yellowfin10AndUP.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(yellowfin10AndUP.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (bigeye0_300To0_499.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(22).Value = CType(bigeye0_300To0_499.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (bigeye0_500To0_999.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(23).Value = CType(bigeye0_500To0_999.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(23).Value = Global.System.DBNull.Value
            End If
            If (bigeye1_0To1_49.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(24).Value = CType(bigeye1_0To1_49.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            If (bigeye1_5To2_49.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(25).Value = CType(bigeye1_5To2_49.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(25).Value = Global.System.DBNull.Value
            End If
            If (bigeye2_5To3_49.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(26).Value = CType(bigeye2_5To3_49.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (bigeye3_5To4_99.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(27).Value = CType(bigeye3_5To4_99.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(27).Value = Global.System.DBNull.Value
            End If
            If (bigeye5_0To9_99.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(28).Value = CType(bigeye5_0To9_99.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(28).Value = Global.System.DBNull.Value
            End If
            If (bigeye10AndUP.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(29).Value = CType(bigeye10AndUP.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(29).Value = Global.System.DBNull.Value
            End If
            If (bonito0_300To0_499.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(30).Value = CType(bonito0_300To0_499.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(30).Value = Global.System.DBNull.Value
            End If
            If (bonito0_500AndUP.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(31).Value = CType(bonito0_500AndUP.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(31).Value = Global.System.DBNull.Value
            End If
            If (fishmeal.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(32).Value = CType(fishmeal.Value,Decimal)
            Else
                Me.Adapter.InsertCommand.Parameters(32).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal weightSlip_ID As Global.System.Nullable(Of Integer),  _
                    ByVal weightSlipDetailDate As Global.System.Nullable(Of Date),  _
                    ByVal weigslipFormNum As String,  _
                    ByVal batchNum As String,  _
                    ByVal lotNum As String,  _
                    ByVal plateNum As String,  _
                    ByVal skipjack0_200To0_299 As Global.System.Nullable(Of Decimal),  _
                    ByVal skipjack0_300To0_499 As Global.System.Nullable(Of Decimal),  _
                    ByVal skipjack0_500To0_999 As Global.System.Nullable(Of Decimal),  _
                    ByVal skipjack1_0To1_39 As Global.System.Nullable(Of Decimal),  _
                    ByVal skipjack1_4To1_79 As Global.System.Nullable(Of Decimal),  _
                    ByVal skipjack1_8To2_49 As Global.System.Nullable(Of Decimal),  _
                    ByVal skipjack2_5To3_49 As Global.System.Nullable(Of Decimal),  _
                    ByVal skipjack3_5AndUP As Global.System.Nullable(Of Decimal),  _
                    ByVal yelllowfin0_300To0_499 As Global.System.Nullable(Of Decimal),  _
                    ByVal yellowfin0_500To0_999 As Global.System.Nullable(Of Decimal),  _
                    ByVal yellowfin1_0To1_49 As Global.System.Nullable(Of Decimal),  _
                    ByVal yellowfin1_5To2_49 As Global.System.Nullable(Of Decimal),  _
                    ByVal yellowfin2_5To3_49 As Global.System.Nullable(Of Decimal),  _
                    ByVal yellowfin3_5To4_99 As Global.System.Nullable(Of Decimal),  _
                    ByVal yellowfin5_0To9_99 As Global.System.Nullable(Of Decimal),  _
                    ByVal yellowfin10AndUP As Global.System.Nullable(Of Decimal),  _
                    ByVal bigeye0_300To0_499 As Global.System.Nullable(Of Decimal),  _
                    ByVal bigeye0_500To0_999 As Global.System.Nullable(Of Decimal),  _
                    ByVal bigeye1_0To1_49 As Global.System.Nullable(Of Decimal),  _
                    ByVal bigeye1_5To2_49 As Global.System.Nullable(Of Decimal),  _
                    ByVal bigeye2_5To3_49 As Global.System.Nullable(Of Decimal),  _
                    ByVal bigeye3_5To4_99 As Global.System.Nullable(Of Decimal),  _
                    ByVal bigeye5_0To9_99 As Global.System.Nullable(Of Decimal),  _
                    ByVal bigeye10AndUP As Global.System.Nullable(Of Decimal),  _
                    ByVal bonito0_300To0_499 As Global.System.Nullable(Of Decimal),  _
                    ByVal bonito0_500AndUP As Global.System.Nullable(Of Decimal),  _
                    ByVal fishmeal As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_weightSlipDetail_ID As Integer,  _
                    ByVal Original_weightSlip_ID As Global.System.Nullable(Of Integer),  _
                    ByVal Original_weightSlipDetailDate As Global.System.Nullable(Of Date),  _
                    ByVal Original_weigslipFormNum As String,  _
                    ByVal Original_batchNum As String,  _
                    ByVal Original_lotNum As String,  _
                    ByVal Original_plateNum As String,  _
                    ByVal Original_skipjack0_200To0_299 As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_skipjack0_300To0_499 As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_skipjack0_500To0_999 As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_skipjack1_0To1_39 As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_skipjack1_4To1_79 As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_skipjack1_8To2_49 As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_skipjack2_5To3_49 As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_skipjack3_5AndUP As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_yelllowfin0_300To0_499 As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_yellowfin0_500To0_999 As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_yellowfin1_0To1_49 As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_yellowfin1_5To2_49 As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_yellowfin2_5To3_49 As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_yellowfin3_5To4_99 As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_yellowfin5_0To9_99 As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_yellowfin10AndUP As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_bigeye0_300To0_499 As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_bigeye0_500To0_999 As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_bigeye1_0To1_49 As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_bigeye1_5To2_49 As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_bigeye2_5To3_49 As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_bigeye3_5To4_99 As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_bigeye5_0To9_99 As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_bigeye10AndUP As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_bonito0_300To0_499 As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_bonito0_500AndUP As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_fishmeal As Global.System.Nullable(Of Decimal),  _
                    ByVal weightSlipDetail_ID As Integer) As Integer
            If (weightSlip_ID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(0).Value = CType(weightSlip_ID.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (weightSlipDetailDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(weightSlipDetailDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (weigslipFormNum Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(weigslipFormNum,String)
            End If
            If (batchNum Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(batchNum,String)
            End If
            If (lotNum Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(lotNum,String)
            End If
            If (plateNum Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(plateNum,String)
            End If
            If (skipjack0_200To0_299.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(skipjack0_200To0_299.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (skipjack0_300To0_499.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(skipjack0_300To0_499.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (skipjack0_500To0_999.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(skipjack0_500To0_999.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (skipjack1_0To1_39.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(skipjack1_0To1_39.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (skipjack1_4To1_79.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(skipjack1_4To1_79.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (skipjack1_8To2_49.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(skipjack1_8To2_49.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (skipjack2_5To3_49.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(skipjack2_5To3_49.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (skipjack3_5AndUP.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(skipjack3_5AndUP.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (yelllowfin0_300To0_499.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(yelllowfin0_300To0_499.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (yellowfin0_500To0_999.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(yellowfin0_500To0_999.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (yellowfin1_0To1_49.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(yellowfin1_0To1_49.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (yellowfin1_5To2_49.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(yellowfin1_5To2_49.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (yellowfin2_5To3_49.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(yellowfin2_5To3_49.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (yellowfin3_5To4_99.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(yellowfin3_5To4_99.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (yellowfin5_0To9_99.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(yellowfin5_0To9_99.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (yellowfin10AndUP.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(yellowfin10AndUP.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (bigeye0_300To0_499.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(bigeye0_300To0_499.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (bigeye0_500To0_999.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(bigeye0_500To0_999.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = Global.System.DBNull.Value
            End If
            If (bigeye1_0To1_49.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(bigeye1_0To1_49.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = Global.System.DBNull.Value
            End If
            If (bigeye1_5To2_49.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(25).Value = CType(bigeye1_5To2_49.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(25).Value = Global.System.DBNull.Value
            End If
            If (bigeye2_5To3_49.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(26).Value = CType(bigeye2_5To3_49.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(26).Value = Global.System.DBNull.Value
            End If
            If (bigeye3_5To4_99.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(27).Value = CType(bigeye3_5To4_99.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(27).Value = Global.System.DBNull.Value
            End If
            If (bigeye5_0To9_99.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(28).Value = CType(bigeye5_0To9_99.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(28).Value = Global.System.DBNull.Value
            End If
            If (bigeye10AndUP.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(29).Value = CType(bigeye10AndUP.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(29).Value = Global.System.DBNull.Value
            End If
            If (bonito0_300To0_499.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(30).Value = CType(bonito0_300To0_499.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(30).Value = Global.System.DBNull.Value
            End If
            If (bonito0_500AndUP.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(31).Value = CType(bonito0_500AndUP.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(31).Value = Global.System.DBNull.Value
            End If
            If (fishmeal.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(32).Value = CType(fishmeal.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(32).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(33).Value = CType(Original_weightSlipDetail_ID,Integer)
            If (Original_weightSlip_ID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(35).Value = CType(Original_weightSlip_ID.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(34).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(35).Value = Global.System.DBNull.Value
            End If
            If (Original_weightSlipDetailDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(37).Value = CType(Original_weightSlipDetailDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(36).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(37).Value = Global.System.DBNull.Value
            End If
            If (Original_weigslipFormNum Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(39).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(38).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(39).Value = CType(Original_weigslipFormNum,String)
            End If
            If (Original_batchNum Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(41).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(40).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(41).Value = CType(Original_batchNum,String)
            End If
            If (Original_lotNum Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(43).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(42).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(43).Value = CType(Original_lotNum,String)
            End If
            If (Original_plateNum Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(45).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(44).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(45).Value = CType(Original_plateNum,String)
            End If
            If (Original_skipjack0_200To0_299.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(47).Value = CType(Original_skipjack0_200To0_299.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(46).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(47).Value = Global.System.DBNull.Value
            End If
            If (Original_skipjack0_300To0_499.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(49).Value = CType(Original_skipjack0_300To0_499.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(48).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(49).Value = Global.System.DBNull.Value
            End If
            If (Original_skipjack0_500To0_999.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(50).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(51).Value = CType(Original_skipjack0_500To0_999.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(50).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(51).Value = Global.System.DBNull.Value
            End If
            If (Original_skipjack1_0To1_39.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(52).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(53).Value = CType(Original_skipjack1_0To1_39.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(52).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(53).Value = Global.System.DBNull.Value
            End If
            If (Original_skipjack1_4To1_79.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(54).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(55).Value = CType(Original_skipjack1_4To1_79.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(54).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(55).Value = Global.System.DBNull.Value
            End If
            If (Original_skipjack1_8To2_49.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(56).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(57).Value = CType(Original_skipjack1_8To2_49.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(56).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(57).Value = Global.System.DBNull.Value
            End If
            If (Original_skipjack2_5To3_49.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(58).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(59).Value = CType(Original_skipjack2_5To3_49.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(58).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(59).Value = Global.System.DBNull.Value
            End If
            If (Original_skipjack3_5AndUP.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(60).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(61).Value = CType(Original_skipjack3_5AndUP.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(60).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(61).Value = Global.System.DBNull.Value
            End If
            If (Original_yelllowfin0_300To0_499.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(62).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(63).Value = CType(Original_yelllowfin0_300To0_499.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(62).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(63).Value = Global.System.DBNull.Value
            End If
            If (Original_yellowfin0_500To0_999.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(64).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(65).Value = CType(Original_yellowfin0_500To0_999.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(64).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(65).Value = Global.System.DBNull.Value
            End If
            If (Original_yellowfin1_0To1_49.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(66).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(67).Value = CType(Original_yellowfin1_0To1_49.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(66).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(67).Value = Global.System.DBNull.Value
            End If
            If (Original_yellowfin1_5To2_49.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(68).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(69).Value = CType(Original_yellowfin1_5To2_49.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(68).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(69).Value = Global.System.DBNull.Value
            End If
            If (Original_yellowfin2_5To3_49.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(70).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(71).Value = CType(Original_yellowfin2_5To3_49.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(70).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(71).Value = Global.System.DBNull.Value
            End If
            If (Original_yellowfin3_5To4_99.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(72).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(73).Value = CType(Original_yellowfin3_5To4_99.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(72).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(73).Value = Global.System.DBNull.Value
            End If
            If (Original_yellowfin5_0To9_99.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(74).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(75).Value = CType(Original_yellowfin5_0To9_99.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(74).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(75).Value = Global.System.DBNull.Value
            End If
            If (Original_yellowfin10AndUP.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(76).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(77).Value = CType(Original_yellowfin10AndUP.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(76).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(77).Value = Global.System.DBNull.Value
            End If
            If (Original_bigeye0_300To0_499.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(78).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(79).Value = CType(Original_bigeye0_300To0_499.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(78).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(79).Value = Global.System.DBNull.Value
            End If
            If (Original_bigeye0_500To0_999.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(80).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(81).Value = CType(Original_bigeye0_500To0_999.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(80).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(81).Value = Global.System.DBNull.Value
            End If
            If (Original_bigeye1_0To1_49.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(82).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(83).Value = CType(Original_bigeye1_0To1_49.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(82).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(83).Value = Global.System.DBNull.Value
            End If
            If (Original_bigeye1_5To2_49.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(84).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(85).Value = CType(Original_bigeye1_5To2_49.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(84).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(85).Value = Global.System.DBNull.Value
            End If
            If (Original_bigeye2_5To3_49.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(86).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(87).Value = CType(Original_bigeye2_5To3_49.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(86).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(87).Value = Global.System.DBNull.Value
            End If
            If (Original_bigeye3_5To4_99.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(88).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(89).Value = CType(Original_bigeye3_5To4_99.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(88).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(89).Value = Global.System.DBNull.Value
            End If
            If (Original_bigeye5_0To9_99.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(90).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(91).Value = CType(Original_bigeye5_0To9_99.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(90).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(91).Value = Global.System.DBNull.Value
            End If
            If (Original_bigeye10AndUP.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(92).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(93).Value = CType(Original_bigeye10AndUP.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(92).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(93).Value = Global.System.DBNull.Value
            End If
            If (Original_bonito0_300To0_499.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(94).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(95).Value = CType(Original_bonito0_300To0_499.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(94).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(95).Value = Global.System.DBNull.Value
            End If
            If (Original_bonito0_500AndUP.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(96).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(97).Value = CType(Original_bonito0_500AndUP.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(96).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(97).Value = Global.System.DBNull.Value
            End If
            If (Original_fishmeal.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(98).Value = CType(0,Object)
                Me.Adapter.UpdateCommand.Parameters(99).Value = CType(Original_fishmeal.Value,Decimal)
            Else
                Me.Adapter.UpdateCommand.Parameters(98).Value = CType(1,Object)
                Me.Adapter.UpdateCommand.Parameters(99).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(100).Value = CType(weightSlipDetail_ID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal weightSlip_ID As Global.System.Nullable(Of Integer),  _
                    ByVal weightSlipDetailDate As Global.System.Nullable(Of Date),  _
                    ByVal weigslipFormNum As String,  _
                    ByVal batchNum As String,  _
                    ByVal lotNum As String,  _
                    ByVal plateNum As String,  _
                    ByVal skipjack0_200To0_299 As Global.System.Nullable(Of Decimal),  _
                    ByVal skipjack0_300To0_499 As Global.System.Nullable(Of Decimal),  _
                    ByVal skipjack0_500To0_999 As Global.System.Nullable(Of Decimal),  _
                    ByVal skipjack1_0To1_39 As Global.System.Nullable(Of Decimal),  _
                    ByVal skipjack1_4To1_79 As Global.System.Nullable(Of Decimal),  _
                    ByVal skipjack1_8To2_49 As Global.System.Nullable(Of Decimal),  _
                    ByVal skipjack2_5To3_49 As Global.System.Nullable(Of Decimal),  _
                    ByVal skipjack3_5AndUP As Global.System.Nullable(Of Decimal),  _
                    ByVal yelllowfin0_300To0_499 As Global.System.Nullable(Of Decimal),  _
                    ByVal yellowfin0_500To0_999 As Global.System.Nullable(Of Decimal),  _
                    ByVal yellowfin1_0To1_49 As Global.System.Nullable(Of Decimal),  _
                    ByVal yellowfin1_5To2_49 As Global.System.Nullable(Of Decimal),  _
                    ByVal yellowfin2_5To3_49 As Global.System.Nullable(Of Decimal),  _
                    ByVal yellowfin3_5To4_99 As Global.System.Nullable(Of Decimal),  _
                    ByVal yellowfin5_0To9_99 As Global.System.Nullable(Of Decimal),  _
                    ByVal yellowfin10AndUP As Global.System.Nullable(Of Decimal),  _
                    ByVal bigeye0_300To0_499 As Global.System.Nullable(Of Decimal),  _
                    ByVal bigeye0_500To0_999 As Global.System.Nullable(Of Decimal),  _
                    ByVal bigeye1_0To1_49 As Global.System.Nullable(Of Decimal),  _
                    ByVal bigeye1_5To2_49 As Global.System.Nullable(Of Decimal),  _
                    ByVal bigeye2_5To3_49 As Global.System.Nullable(Of Decimal),  _
                    ByVal bigeye3_5To4_99 As Global.System.Nullable(Of Decimal),  _
                    ByVal bigeye5_0To9_99 As Global.System.Nullable(Of Decimal),  _
                    ByVal bigeye10AndUP As Global.System.Nullable(Of Decimal),  _
                    ByVal bonito0_300To0_499 As Global.System.Nullable(Of Decimal),  _
                    ByVal bonito0_500AndUP As Global.System.Nullable(Of Decimal),  _
                    ByVal fishmeal As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_weightSlipDetail_ID As Integer,  _
                    ByVal Original_weightSlip_ID As Global.System.Nullable(Of Integer),  _
                    ByVal Original_weightSlipDetailDate As Global.System.Nullable(Of Date),  _
                    ByVal Original_weigslipFormNum As String,  _
                    ByVal Original_batchNum As String,  _
                    ByVal Original_lotNum As String,  _
                    ByVal Original_plateNum As String,  _
                    ByVal Original_skipjack0_200To0_299 As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_skipjack0_300To0_499 As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_skipjack0_500To0_999 As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_skipjack1_0To1_39 As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_skipjack1_4To1_79 As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_skipjack1_8To2_49 As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_skipjack2_5To3_49 As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_skipjack3_5AndUP As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_yelllowfin0_300To0_499 As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_yellowfin0_500To0_999 As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_yellowfin1_0To1_49 As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_yellowfin1_5To2_49 As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_yellowfin2_5To3_49 As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_yellowfin3_5To4_99 As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_yellowfin5_0To9_99 As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_yellowfin10AndUP As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_bigeye0_300To0_499 As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_bigeye0_500To0_999 As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_bigeye1_0To1_49 As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_bigeye1_5To2_49 As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_bigeye2_5To3_49 As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_bigeye3_5To4_99 As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_bigeye5_0To9_99 As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_bigeye10AndUP As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_bonito0_300To0_499 As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_bonito0_500AndUP As Global.System.Nullable(Of Decimal),  _
                    ByVal Original_fishmeal As Global.System.Nullable(Of Decimal)) As Integer
            Return Me.Update(weightSlip_ID, weightSlipDetailDate, weigslipFormNum, batchNum, lotNum, plateNum, skipjack0_200To0_299, skipjack0_300To0_499, skipjack0_500To0_999, skipjack1_0To1_39, skipjack1_4To1_79, skipjack1_8To2_49, skipjack2_5To3_49, skipjack3_5AndUP, yelllowfin0_300To0_499, yellowfin0_500To0_999, yellowfin1_0To1_49, yellowfin1_5To2_49, yellowfin2_5To3_49, yellowfin3_5To4_99, yellowfin5_0To9_99, yellowfin10AndUP, bigeye0_300To0_499, bigeye0_500To0_999, bigeye1_0To1_49, bigeye1_5To2_49, bigeye2_5To3_49, bigeye3_5To4_99, bigeye5_0To9_99, bigeye10AndUP, bonito0_300To0_499, bonito0_500AndUP, fishmeal, Original_weightSlipDetail_ID, Original_weightSlip_ID, Original_weightSlipDetailDate, Original_weigslipFormNum, Original_batchNum, Original_lotNum, Original_plateNum, Original_skipjack0_200To0_299, Original_skipjack0_300To0_499, Original_skipjack0_500To0_999, Original_skipjack1_0To1_39, Original_skipjack1_4To1_79, Original_skipjack1_8To2_49, Original_skipjack2_5To3_49, Original_skipjack3_5AndUP, Original_yelllowfin0_300To0_499, Original_yellowfin0_500To0_999, Original_yellowfin1_0To1_49, Original_yellowfin1_5To2_49, Original_yellowfin2_5To3_49, Original_yellowfin3_5To4_99, Original_yellowfin5_0To9_99, Original_yellowfin10AndUP, Original_bigeye0_300To0_499, Original_bigeye0_500To0_999, Original_bigeye1_0To1_49, Original_bigeye1_5To2_49, Original_bigeye2_5To3_49, Original_bigeye3_5To4_99, Original_bigeye5_0To9_99, Original_bigeye10AndUP, Original_bonito0_300To0_499, Original_bonito0_500AndUP, Original_fishmeal, Original_weightSlipDetail_ID)
        End Function
    End Class
    
    '''<summary>
    '''TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD"& _ 
        "esigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")>  _
    Partial Public Class TableAdapterManager
        Inherits Global.System.ComponentModel.Component
        
        Private _updateOrder As UpdateOrderOption
        
        Private _trans_CatchActivitiesTableAdapter As trans_CatchActivitiesTableAdapter
        
        Private _trans_CatchActivityDetailsTableAdapter As trans_CatchActivityDetailsTableAdapter
        
        Private _trans_CatchMethodTableAdapter As trans_CatchMethodTableAdapter
        
        Private _trans_SalesReportTableAdapter As trans_SalesReportTableAdapter
        
        Private _trans_SalesReportCatcherTableAdapter As trans_SalesReportCatcherTableAdapter
        
        Private _trans_SalesReportPriceTableAdapter As trans_SalesReportPriceTableAdapter
        
        Private _trans_SalesReportSummaryTableAdapter As trans_SalesReportSummaryTableAdapter
        
        Private _trans_SalesReportWeightSlipsTableAdapter As trans_SalesReportWeightSlipsTableAdapter
        
        Private _trans_WeightSlipTableAdapter As trans_WeightSlipTableAdapter
        
        Private _trans_WeightSlipDetailsTableAdapter As trans_WeightSlipDetailsTableAdapter
        
        Private _backupDataSetBeforeUpdate As Boolean
        
        Private _connection As Global.System.Data.IDbConnection
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property UpdateOrder() As UpdateOrderOption
            Get
                Return Me._updateOrder
            End Get
            Set
                Me._updateOrder = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property trans_CatchActivitiesTableAdapter() As trans_CatchActivitiesTableAdapter
            Get
                Return Me._trans_CatchActivitiesTableAdapter
            End Get
            Set
                Me._trans_CatchActivitiesTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property trans_CatchActivityDetailsTableAdapter() As trans_CatchActivityDetailsTableAdapter
            Get
                Return Me._trans_CatchActivityDetailsTableAdapter
            End Get
            Set
                Me._trans_CatchActivityDetailsTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property trans_CatchMethodTableAdapter() As trans_CatchMethodTableAdapter
            Get
                Return Me._trans_CatchMethodTableAdapter
            End Get
            Set
                Me._trans_CatchMethodTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property trans_SalesReportTableAdapter() As trans_SalesReportTableAdapter
            Get
                Return Me._trans_SalesReportTableAdapter
            End Get
            Set
                Me._trans_SalesReportTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property trans_SalesReportCatcherTableAdapter() As trans_SalesReportCatcherTableAdapter
            Get
                Return Me._trans_SalesReportCatcherTableAdapter
            End Get
            Set
                Me._trans_SalesReportCatcherTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property trans_SalesReportPriceTableAdapter() As trans_SalesReportPriceTableAdapter
            Get
                Return Me._trans_SalesReportPriceTableAdapter
            End Get
            Set
                Me._trans_SalesReportPriceTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property trans_SalesReportSummaryTableAdapter() As trans_SalesReportSummaryTableAdapter
            Get
                Return Me._trans_SalesReportSummaryTableAdapter
            End Get
            Set
                Me._trans_SalesReportSummaryTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property trans_SalesReportWeightSlipsTableAdapter() As trans_SalesReportWeightSlipsTableAdapter
            Get
                Return Me._trans_SalesReportWeightSlipsTableAdapter
            End Get
            Set
                Me._trans_SalesReportWeightSlipsTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property trans_WeightSlipTableAdapter() As trans_WeightSlipTableAdapter
            Get
                Return Me._trans_WeightSlipTableAdapter
            End Get
            Set
                Me._trans_WeightSlipTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3"& _ 
            "a", "System.Drawing.Design.UITypeEditor")>  _
        Public Property trans_WeightSlipDetailsTableAdapter() As trans_WeightSlipDetailsTableAdapter
            Get
                Return Me._trans_WeightSlipDetailsTableAdapter
            End Get
            Set
                Me._trans_WeightSlipDetailsTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Property BackupDataSetBeforeUpdate() As Boolean
            Get
                Return Me._backupDataSetBeforeUpdate
            End Get
            Set
                Me._backupDataSetBeforeUpdate = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public Property Connection() As Global.System.Data.IDbConnection
            Get
                If (Not (Me._connection) Is Nothing) Then
                    Return Me._connection
                End If
                If ((Not (Me._trans_CatchActivitiesTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._trans_CatchActivitiesTableAdapter.Connection) Is Nothing)) Then
                    Return Me._trans_CatchActivitiesTableAdapter.Connection
                End If
                If ((Not (Me._trans_CatchActivityDetailsTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._trans_CatchActivityDetailsTableAdapter.Connection) Is Nothing)) Then
                    Return Me._trans_CatchActivityDetailsTableAdapter.Connection
                End If
                If ((Not (Me._trans_CatchMethodTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._trans_CatchMethodTableAdapter.Connection) Is Nothing)) Then
                    Return Me._trans_CatchMethodTableAdapter.Connection
                End If
                If ((Not (Me._trans_SalesReportTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._trans_SalesReportTableAdapter.Connection) Is Nothing)) Then
                    Return Me._trans_SalesReportTableAdapter.Connection
                End If
                If ((Not (Me._trans_SalesReportCatcherTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._trans_SalesReportCatcherTableAdapter.Connection) Is Nothing)) Then
                    Return Me._trans_SalesReportCatcherTableAdapter.Connection
                End If
                If ((Not (Me._trans_SalesReportPriceTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._trans_SalesReportPriceTableAdapter.Connection) Is Nothing)) Then
                    Return Me._trans_SalesReportPriceTableAdapter.Connection
                End If
                If ((Not (Me._trans_SalesReportSummaryTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._trans_SalesReportSummaryTableAdapter.Connection) Is Nothing)) Then
                    Return Me._trans_SalesReportSummaryTableAdapter.Connection
                End If
                If ((Not (Me._trans_SalesReportWeightSlipsTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._trans_SalesReportWeightSlipsTableAdapter.Connection) Is Nothing)) Then
                    Return Me._trans_SalesReportWeightSlipsTableAdapter.Connection
                End If
                If ((Not (Me._trans_WeightSlipTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._trans_WeightSlipTableAdapter.Connection) Is Nothing)) Then
                    Return Me._trans_WeightSlipTableAdapter.Connection
                End If
                If ((Not (Me._trans_WeightSlipDetailsTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._trans_WeightSlipDetailsTableAdapter.Connection) Is Nothing)) Then
                    Return Me._trans_WeightSlipDetailsTableAdapter.Connection
                End If
                Return Nothing
            End Get
            Set
                Me._connection = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0"),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property TableAdapterInstanceCount() As Integer
            Get
                Dim count As Integer = 0
                If (Not (Me._trans_CatchActivitiesTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._trans_CatchActivityDetailsTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._trans_CatchMethodTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._trans_SalesReportTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._trans_SalesReportCatcherTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._trans_SalesReportPriceTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._trans_SalesReportSummaryTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._trans_SalesReportWeightSlipsTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._trans_WeightSlipTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._trans_WeightSlipDetailsTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                Return count
            End Get
        End Property
        
        '''<summary>
        '''Update rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function UpdateUpdatedRows(ByVal dataSet As MKDBDataSet, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow), ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._trans_CatchActivitiesTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.trans_CatchActivities.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._trans_CatchActivitiesTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._trans_CatchActivityDetailsTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.trans_CatchActivityDetails.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._trans_CatchActivityDetailsTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._trans_CatchMethodTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.trans_CatchMethod.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._trans_CatchMethodTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._trans_SalesReportTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.trans_SalesReport.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._trans_SalesReportTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._trans_SalesReportCatcherTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.trans_SalesReportCatcher.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._trans_SalesReportCatcherTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._trans_SalesReportPriceTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.trans_SalesReportPrice.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._trans_SalesReportPriceTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._trans_SalesReportSummaryTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.trans_SalesReportSummary.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._trans_SalesReportSummaryTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._trans_SalesReportWeightSlipsTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.trans_SalesReportWeightSlips.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._trans_SalesReportWeightSlipsTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._trans_WeightSlipTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.trans_WeightSlip.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._trans_WeightSlipTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._trans_WeightSlipDetailsTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.trans_WeightSlipDetails.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._trans_WeightSlipDetailsTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Insert rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function UpdateInsertedRows(ByVal dataSet As MKDBDataSet, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._trans_CatchActivitiesTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.trans_CatchActivities.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._trans_CatchActivitiesTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._trans_CatchActivityDetailsTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.trans_CatchActivityDetails.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._trans_CatchActivityDetailsTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._trans_CatchMethodTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.trans_CatchMethod.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._trans_CatchMethodTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._trans_SalesReportTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.trans_SalesReport.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._trans_SalesReportTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._trans_SalesReportCatcherTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.trans_SalesReportCatcher.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._trans_SalesReportCatcherTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._trans_SalesReportPriceTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.trans_SalesReportPrice.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._trans_SalesReportPriceTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._trans_SalesReportSummaryTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.trans_SalesReportSummary.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._trans_SalesReportSummaryTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._trans_SalesReportWeightSlipsTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.trans_SalesReportWeightSlips.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._trans_SalesReportWeightSlipsTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._trans_WeightSlipTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.trans_WeightSlip.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._trans_WeightSlipTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._trans_WeightSlipDetailsTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.trans_WeightSlipDetails.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._trans_WeightSlipDetailsTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Delete rows in bottom-up order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function UpdateDeletedRows(ByVal dataSet As MKDBDataSet, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._trans_WeightSlipDetailsTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.trans_WeightSlipDetails.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._trans_WeightSlipDetailsTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._trans_WeightSlipTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.trans_WeightSlip.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._trans_WeightSlipTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._trans_SalesReportWeightSlipsTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.trans_SalesReportWeightSlips.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._trans_SalesReportWeightSlipsTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._trans_SalesReportSummaryTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.trans_SalesReportSummary.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._trans_SalesReportSummaryTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._trans_SalesReportPriceTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.trans_SalesReportPrice.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._trans_SalesReportPriceTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._trans_SalesReportCatcherTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.trans_SalesReportCatcher.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._trans_SalesReportCatcherTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._trans_SalesReportTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.trans_SalesReport.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._trans_SalesReportTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._trans_CatchMethodTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.trans_CatchMethod.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._trans_CatchMethodTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._trans_CatchActivityDetailsTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.trans_CatchActivityDetails.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._trans_CatchActivityDetailsTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._trans_CatchActivitiesTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.trans_CatchActivities.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._trans_CatchActivitiesTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Function GetRealUpdatedRows(ByVal updatedRows() As Global.System.Data.DataRow, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Global.System.Data.DataRow()
            If ((updatedRows Is Nothing)  _
                        OrElse (updatedRows.Length < 1)) Then
                Return updatedRows
            End If
            If ((allAddedRows Is Nothing)  _
                        OrElse (allAddedRows.Count < 1)) Then
                Return updatedRows
            End If
            Dim realUpdatedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim i As Integer = 0
            Do While (i < updatedRows.Length)
                Dim row As Global.System.Data.DataRow = updatedRows(i)
                If (allAddedRows.Contains(row) = false) Then
                    realUpdatedRows.Add(row)
                End If
                i = (i + 1)
            Loop
            Return realUpdatedRows.ToArray
        End Function
        
        '''<summary>
        '''Update all changes to the dataset.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Overridable Function UpdateAll(ByVal dataSet As MKDBDataSet) As Integer
            If (dataSet Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dataSet")
            End If
            If (dataSet.HasChanges = false) Then
                Return 0
            End If
            If ((Not (Me._trans_CatchActivitiesTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._trans_CatchActivitiesTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._trans_CatchActivityDetailsTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._trans_CatchActivityDetailsTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._trans_CatchMethodTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._trans_CatchMethodTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._trans_SalesReportTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._trans_SalesReportTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._trans_SalesReportCatcherTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._trans_SalesReportCatcherTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._trans_SalesReportPriceTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._trans_SalesReportPriceTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._trans_SalesReportSummaryTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._trans_SalesReportSummaryTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._trans_SalesReportWeightSlipsTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._trans_SalesReportWeightSlipsTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._trans_WeightSlipTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._trans_WeightSlipTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            If ((Not (Me._trans_WeightSlipDetailsTableAdapter) Is Nothing)  _
                        AndAlso (Me.MatchTableAdapterConnection(Me._trans_WeightSlipDetailsTableAdapter.Connection) = false)) Then
                Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                        "tring.")
            End If
            Dim workConnection As Global.System.Data.IDbConnection = Me.Connection
            If (workConnection Is Nothing) Then
                Throw New Global.System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana"& _ 
                        "ger TableAdapter property to a valid TableAdapter instance.")
            End If
            Dim workConnOpened As Boolean = false
            If ((workConnection.State And Global.System.Data.ConnectionState.Broken)  _
                        = Global.System.Data.ConnectionState.Broken) Then
                workConnection.Close
            End If
            If (workConnection.State = Global.System.Data.ConnectionState.Closed) Then
                workConnection.Open
                workConnOpened = true
            End If
            Dim workTransaction As Global.System.Data.IDbTransaction = workConnection.BeginTransaction
            If (workTransaction Is Nothing) Then
                Throw New Global.System.ApplicationException("The transaction cannot begin. The current data connection does not support transa"& _ 
                        "ctions or the current state is not allowing the transaction to begin.")
            End If
            Dim allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)()
            Dim adaptersWithAcceptChangesDuringUpdate As Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter) = New Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter)()
            Dim revertConnections As Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection) = New Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection)()
            Dim result As Integer = 0
            Dim backupDataSet As Global.System.Data.DataSet = Nothing
            If Me.BackupDataSetBeforeUpdate Then
                backupDataSet = New Global.System.Data.DataSet()
                backupDataSet.Merge(dataSet)
            End If
            Try 
                '---- Prepare for update -----------
                '
                If (Not (Me._trans_CatchActivitiesTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._trans_CatchActivitiesTableAdapter, Me._trans_CatchActivitiesTableAdapter.Connection)
                    Me._trans_CatchActivitiesTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._trans_CatchActivitiesTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._trans_CatchActivitiesTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._trans_CatchActivitiesTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._trans_CatchActivitiesTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._trans_CatchActivityDetailsTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._trans_CatchActivityDetailsTableAdapter, Me._trans_CatchActivityDetailsTableAdapter.Connection)
                    Me._trans_CatchActivityDetailsTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._trans_CatchActivityDetailsTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._trans_CatchActivityDetailsTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._trans_CatchActivityDetailsTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._trans_CatchActivityDetailsTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._trans_CatchMethodTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._trans_CatchMethodTableAdapter, Me._trans_CatchMethodTableAdapter.Connection)
                    Me._trans_CatchMethodTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._trans_CatchMethodTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._trans_CatchMethodTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._trans_CatchMethodTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._trans_CatchMethodTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._trans_SalesReportTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._trans_SalesReportTableAdapter, Me._trans_SalesReportTableAdapter.Connection)
                    Me._trans_SalesReportTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._trans_SalesReportTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._trans_SalesReportTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._trans_SalesReportTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._trans_SalesReportTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._trans_SalesReportCatcherTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._trans_SalesReportCatcherTableAdapter, Me._trans_SalesReportCatcherTableAdapter.Connection)
                    Me._trans_SalesReportCatcherTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._trans_SalesReportCatcherTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._trans_SalesReportCatcherTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._trans_SalesReportCatcherTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._trans_SalesReportCatcherTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._trans_SalesReportPriceTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._trans_SalesReportPriceTableAdapter, Me._trans_SalesReportPriceTableAdapter.Connection)
                    Me._trans_SalesReportPriceTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._trans_SalesReportPriceTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._trans_SalesReportPriceTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._trans_SalesReportPriceTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._trans_SalesReportPriceTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._trans_SalesReportSummaryTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._trans_SalesReportSummaryTableAdapter, Me._trans_SalesReportSummaryTableAdapter.Connection)
                    Me._trans_SalesReportSummaryTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._trans_SalesReportSummaryTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._trans_SalesReportSummaryTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._trans_SalesReportSummaryTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._trans_SalesReportSummaryTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._trans_SalesReportWeightSlipsTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._trans_SalesReportWeightSlipsTableAdapter, Me._trans_SalesReportWeightSlipsTableAdapter.Connection)
                    Me._trans_SalesReportWeightSlipsTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._trans_SalesReportWeightSlipsTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._trans_SalesReportWeightSlipsTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._trans_SalesReportWeightSlipsTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._trans_SalesReportWeightSlipsTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._trans_WeightSlipTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._trans_WeightSlipTableAdapter, Me._trans_WeightSlipTableAdapter.Connection)
                    Me._trans_WeightSlipTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._trans_WeightSlipTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._trans_WeightSlipTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._trans_WeightSlipTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._trans_WeightSlipTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._trans_WeightSlipDetailsTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._trans_WeightSlipDetailsTableAdapter, Me._trans_WeightSlipDetailsTableAdapter.Connection)
                    Me._trans_WeightSlipDetailsTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._trans_WeightSlipDetailsTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._trans_WeightSlipDetailsTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._trans_WeightSlipDetailsTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._trans_WeightSlipDetailsTableAdapter.Adapter)
                    End If
                End If
                '
                '---- Perform updates -----------
                '
                If (Me.UpdateOrder = UpdateOrderOption.UpdateInsertDelete) Then
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                Else
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                End If
                result = (result + Me.UpdateDeletedRows(dataSet, allChangedRows))
                '
                '---- Commit updates -----------
                '
                workTransaction.Commit
                If (0 < allAddedRows.Count) Then
                    Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                    allAddedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
                If (0 < allChangedRows.Count) Then
                    Dim rows((allChangedRows.Count) - 1) As Global.System.Data.DataRow
                    allChangedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
            Catch ex As Global.System.Exception
                workTransaction.Rollback
                '---- Restore the dataset -----------
                If Me.BackupDataSetBeforeUpdate Then
                    Global.System.Diagnostics.Debug.Assert((Not (backupDataSet) Is Nothing))
                    dataSet.Clear
                    dataSet.Merge(backupDataSet)
                Else
                    If (0 < allAddedRows.Count) Then
                        Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                        allAddedRows.CopyTo(rows)
                        Dim i As Integer = 0
                        Do While (i < rows.Length)
                            Dim row As Global.System.Data.DataRow = rows(i)
                            row.AcceptChanges
                            row.SetAdded
                            i = (i + 1)
                        Loop
                    End If
                End If
                Throw ex
            Finally
                If workConnOpened Then
                    workConnection.Close
                End If
                If (Not (Me._trans_CatchActivitiesTableAdapter) Is Nothing) Then
                    Me._trans_CatchActivitiesTableAdapter.Connection = CType(revertConnections(Me._trans_CatchActivitiesTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._trans_CatchActivitiesTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._trans_CatchActivityDetailsTableAdapter) Is Nothing) Then
                    Me._trans_CatchActivityDetailsTableAdapter.Connection = CType(revertConnections(Me._trans_CatchActivityDetailsTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._trans_CatchActivityDetailsTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._trans_CatchMethodTableAdapter) Is Nothing) Then
                    Me._trans_CatchMethodTableAdapter.Connection = CType(revertConnections(Me._trans_CatchMethodTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._trans_CatchMethodTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._trans_SalesReportTableAdapter) Is Nothing) Then
                    Me._trans_SalesReportTableAdapter.Connection = CType(revertConnections(Me._trans_SalesReportTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._trans_SalesReportTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._trans_SalesReportCatcherTableAdapter) Is Nothing) Then
                    Me._trans_SalesReportCatcherTableAdapter.Connection = CType(revertConnections(Me._trans_SalesReportCatcherTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._trans_SalesReportCatcherTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._trans_SalesReportPriceTableAdapter) Is Nothing) Then
                    Me._trans_SalesReportPriceTableAdapter.Connection = CType(revertConnections(Me._trans_SalesReportPriceTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._trans_SalesReportPriceTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._trans_SalesReportSummaryTableAdapter) Is Nothing) Then
                    Me._trans_SalesReportSummaryTableAdapter.Connection = CType(revertConnections(Me._trans_SalesReportSummaryTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._trans_SalesReportSummaryTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._trans_SalesReportWeightSlipsTableAdapter) Is Nothing) Then
                    Me._trans_SalesReportWeightSlipsTableAdapter.Connection = CType(revertConnections(Me._trans_SalesReportWeightSlipsTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._trans_SalesReportWeightSlipsTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._trans_WeightSlipTableAdapter) Is Nothing) Then
                    Me._trans_WeightSlipTableAdapter.Connection = CType(revertConnections(Me._trans_WeightSlipTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._trans_WeightSlipTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._trans_WeightSlipDetailsTableAdapter) Is Nothing) Then
                    Me._trans_WeightSlipDetailsTableAdapter.Connection = CType(revertConnections(Me._trans_WeightSlipDetailsTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._trans_WeightSlipDetailsTableAdapter.Transaction = Nothing
                End If
                If (0 < adaptersWithAcceptChangesDuringUpdate.Count) Then
                    Dim adapters((adaptersWithAcceptChangesDuringUpdate.Count) - 1) As Global.System.Data.Common.DataAdapter
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters)
                    Dim i As Integer = 0
                    Do While (i < adapters.Length)
                        Dim adapter As Global.System.Data.Common.DataAdapter = adapters(i)
                        adapter.AcceptChangesDuringUpdate = true
                        i = (i + 1)
                    Loop
                End If
            End Try
            Return result
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overridable Sub SortSelfReferenceRows(ByVal rows() As Global.System.Data.DataRow, ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
            Global.System.Array.Sort(Of Global.System.Data.DataRow)(rows, New SelfReferenceComparer(relation, childFirst))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Protected Overridable Function MatchTableAdapterConnection(ByVal inputConnection As Global.System.Data.IDbConnection) As Boolean
            If (Not (Me._connection) Is Nothing) Then
                Return true
            End If
            If ((Me.Connection Is Nothing)  _
                        OrElse (inputConnection Is Nothing)) Then
                Return true
            End If
            If String.Equals(Me.Connection.ConnectionString, inputConnection.ConnectionString, Global.System.StringComparison.Ordinal) Then
                Return true
            End If
            Return false
        End Function
        
        '''<summary>
        '''Update Order Option
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Public Enum UpdateOrderOption
            
            InsertUpdateDelete = 0
            
            UpdateInsertDelete = 1
        End Enum
        
        '''<summary>
        '''Used to sort self-referenced table's rows
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
        Private Class SelfReferenceComparer
            Inherits Object
            Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow)
            
            Private _relation As Global.System.Data.DataRelation
            
            Private _childFirst As Integer
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Friend Sub New(ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
                MyBase.New
                Me._relation = relation
                If childFirst Then
                    Me._childFirst = -1
                Else
                    Me._childFirst = 1
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Private Function GetRoot(ByVal row As Global.System.Data.DataRow, ByRef distance As Integer) As Global.System.Data.DataRow
                Global.System.Diagnostics.Debug.Assert((Not (row) Is Nothing))
                Dim root As Global.System.Data.DataRow = row
                distance = 0

                Dim traversedRows As Global.System.Collections.Generic.IDictionary(Of Global.System.Data.DataRow, Global.System.Data.DataRow) = New Global.System.Collections.Generic.Dictionary(Of Global.System.Data.DataRow, Global.System.Data.DataRow)()
                traversedRows(row) = row

                Dim parent As Global.System.Data.DataRow = row.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Do While ((Not (parent) Is Nothing)  _
                            AndAlso (traversedRows.ContainsKey(parent) = false))
                    distance = (distance + 1)
                    root = parent
                    traversedRows(parent) = parent
                    parent = parent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Loop

                If (distance = 0) Then
                    traversedRows.Clear
                    traversedRows(row) = row
                    parent = row.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Do While ((Not (parent) Is Nothing)  _
                                AndAlso (traversedRows.ContainsKey(parent) = false))
                        distance = (distance + 1)
                        root = parent
                        traversedRows(parent) = parent
                        parent = parent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Loop
                End If

                Return root
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
             Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")>  _
            Public Function Compare(ByVal row1 As Global.System.Data.DataRow, ByVal row2 As Global.System.Data.DataRow) As Integer Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow).Compare
                If Object.ReferenceEquals(row1, row2) Then
                    Return 0
                End If
                If (row1 Is Nothing) Then
                    Return -1
                End If
                If (row2 Is Nothing) Then
                    Return 1
                End If

                Dim distance1 As Integer = 0
                Dim root1 As Global.System.Data.DataRow = Me.GetRoot(row1, distance1)

                Dim distance2 As Integer = 0
                Dim root2 As Global.System.Data.DataRow = Me.GetRoot(row2, distance2)

                If Object.ReferenceEquals(root1, root2) Then
                    Return (Me._childFirst * distance1.CompareTo(distance2))
                Else
                    Global.System.Diagnostics.Debug.Assert(((Not (root1.Table) Is Nothing)  _
                                    AndAlso (Not (root2.Table) Is Nothing)))
                    If (root1.Table.Rows.IndexOf(root1) < root2.Table.Rows.IndexOf(root2)) Then
                        Return -1
                    Else
                        Return 1
                    End If
                End If
            End Function
        End Class
    End Class
End Namespace
